{"version":3,"file":"arquero-worker.min.js","sources":["../node_modules/arquero/src/util/error.js","../node_modules/arquero/src/util/is-function.js","../node_modules/arquero/src/util/repeat.js","../node_modules/arquero/src/util/to-string.js","../node_modules/arquero/src/util/is-date.js","../node_modules/arquero/src/format/util.js","../node_modules/arquero/src/format/infer.js","../node_modules/arquero/src/table/table.js","../node_modules/arquero/src/table/column.js","../node_modules/arquero/src/util/is-object.js","../node_modules/arquero/src/util/is-regexp.js","../node_modules/arquero/src/util/is-string.js","../node_modules/arquero/src/table/columns-from.js","../node_modules/arquero/src/util/pad.js","../node_modules/arquero/src/util/format-date.js","../node_modules/arquero/src/util/is-typed-array.js","../node_modules/arquero/src/format/value.js","../node_modules/arquero/src/util/map-object.js","../node_modules/arquero/src/format/to-html.js","../node_modules/arquero/src/format/to-json.js","../node_modules/arquero/src/util/unroll.js","../node_modules/arquero/src/util/row-object-builder.js","../node_modules/arquero/src/table/column-table.js","../node_modules/arquero/src/table/regroup.js","../node_modules/arquero/src/util/array-type.js","../node_modules/arquero/src/format/to-csv.js","../node_modules/arquero/src/format/to-markdown.js","../node_modules/arquero/node_modules/acorn/dist/acorn.mjs","../node_modules/arquero/src/expression/ast/constants.js","../node_modules/arquero/src/expression/ast/walk.js","../node_modules/arquero/src/expression/ast/clean.js","../node_modules/arquero/src/expression/codegen.js","../node_modules/arquero/src/util/no-op.js","../node_modules/arquero/src/op/aggregate-functions.js","../node_modules/arquero/src/util/product.js","../node_modules/arquero/src/util/bins.js","../node_modules/arquero/src/op/window-functions.js","../node_modules/arquero/src/util/is-valid.js","../node_modules/arquero/src/op/functions/array.js","../node_modules/arquero/src/util/parse-iso-date.js","../node_modules/arquero/src/op/functions/date.js","../node_modules/arquero/src/op/functions/equal.js","../node_modules/arquero/src/util/random.js","../node_modules/arquero/src/op/functions/math.js","../node_modules/arquero/src/util/has.js","../node_modules/arquero/src/op/functions/index.js","../node_modules/arquero/src/op/functions/bin.js","../node_modules/arquero/src/op/functions/sequence.js","../node_modules/arquero/src/op/functions/object.js","../node_modules/arquero/src/op/functions/string.js","../node_modules/arquero/src/op/index.js","../node_modules/arquero/src/expression/compile.js","../node_modules/arquero/src/expression/constants.js","../node_modules/arquero/src/expression/parse.js","../node_modules/arquero/src/query/constants.js","../node_modules/arquero/src/util/concat.js","../node_modules/arquero/src/util/ascending.js","../node_modules/arquero/src/util/value-list.js","../node_modules/arquero/src/util/min.js","../node_modules/arquero/src/util/max.js","../node_modules/arquero/src/util/quantile.js","../node_modules/arquero/src/engine/reduce/field-reducer.js","../node_modules/arquero/src/engine/reduce/reducer.js","../node_modules/arquero/src/engine/reduce/util.js","../node_modules/arquero/src/util/bisector.js","../node_modules/arquero/src/engine/window/window-state.js","../node_modules/arquero/src/engine/window/window.js","../node_modules/arquero/src/util/is-array.js","../node_modules/arquero/src/util/to-array.js","../node_modules/arquero/src/engine/derive.js","../node_modules/arquero/src/table/bit-set.js","../node_modules/arquero/src/engine/unroll.js","../node_modules/arquero/src/verbs/expr/wrap.js","../node_modules/arquero/src/verbs/expr/field.js","../node_modules/arquero/src/util/is-number.js","../node_modules/arquero/src/verbs/expr/selection.js","../node_modules/arquero/src/verbs/expr/parse.js","../node_modules/arquero/src/util/unroll2.js","../node_modules/arquero/src/engine/join-loop.js","../node_modules/arquero/src/engine/join-hash.js","../node_modules/arquero/src/util/key-function.js","../node_modules/arquero/src/verbs/expr/parse-key.js","../node_modules/arquero/src/util/intersect.js","../node_modules/arquero/src/verbs/join.js","../node_modules/arquero/src/engine/pivot.js","../node_modules/arquero/src/verbs/pivot.js","../node_modules/arquero/src/engine/reduce.js","../node_modules/arquero/src/engine/rollup.js","../node_modules/arquero/src/util/sample.js","../node_modules/arquero/src/verbs/sample.js","../node_modules/arquero/src/engine/spread.js","../node_modules/arquero/src/engine/groupby.js","../node_modules/arquero/src/expression/compare.js","../node_modules/arquero/src/query/util.js","../node_modules/arquero/src/verbs/expr/rolling.js","../node_modules/arquero/src/verbs/expr/desc.js","../node_modules/arquero/src/verbs/index.js","../node_modules/arquero/src/engine/concat.js","../node_modules/arquero/src/verbs/dedupe.js","../node_modules/arquero/src/util/unique-name.js","../node_modules/arquero/src/verbs/derive.js","../node_modules/arquero/src/verbs/except.js","../node_modules/arquero/src/verbs/filter.js","../node_modules/arquero/src/engine/filter.js","../node_modules/arquero/src/verbs/fold.js","../node_modules/arquero/src/engine/fold.js","../node_modules/arquero/src/verbs/intersect.js","../node_modules/arquero/src/verbs/join-filter.js","../node_modules/arquero/src/engine/join-filter.js","../node_modules/arquero/src/verbs/lookup.js","../node_modules/arquero/src/engine/lookup.js","../node_modules/arquero/src/verbs/rollup.js","../node_modules/arquero/src/engine/sample.js","../node_modules/arquero/src/verbs/select.js","../node_modules/arquero/src/engine/select.js","../node_modules/arquero/src/verbs/spread.js","../node_modules/arquero/src/verbs/union.js","../node_modules/arquero/src/verbs/unroll.js","../node_modules/arquero/src/verbs/groupby.js","../node_modules/arquero/src/verbs/orderby.js","../node_modules/arquero/src/engine/orderby.js","../node_modules/arquero/src/engine/ungroup.js","../node_modules/arquero/src/engine/unorder.js","../node_modules/arquero/src/query/to-ast.js","../node_modules/arquero/src/query/verb.js","../node_modules/arquero/src/query/query.js","../node_modules/arquero/src/query/query-builder.js","../node_modules/arquero/src/format/from-arrow.js","../node_modules/arquero/src/util/auto-type.js","../node_modules/arquero/src/util/parse-dsv.js","../node_modules/arquero/src/format/from-csv.js","../node_modules/arquero/src/format/from-json.js","../src/worker/load.js","../src/worker/handler.js","../src/worker/database.js","../src/worker/index.js","../src/worker/constants.js"],"sourcesContent":["export default function(message) {\n  throw Error(message);\n}","export default function isFunction(value) {\n  return typeof value === 'function';\n}","import isFunction from './is-function';\n\nexport default function(reps, value) {\n  const result = Array(reps);\n  if (isFunction(value)) {\n    for (let i = 0; i < reps; ++i) {\n      result[i] = value(i);\n    }\n  } else {\n    result.fill(value);\n  }\n  return result;\n}","export default Object.prototype.toString;","import toString from './to-string';\n\nexport default function(value) {\n  return toString.call(value) === '[object Date]';\n}","import inferFormat from './infer';\nimport isFunction from '../util/is-function';\n\nexport function columns(table, names) {\n  return isFunction(names)\n    ? names(table)\n    : names || table.columnNames();\n}\n\nexport function numRows(table, limit) {\n  return limit !== 0 ? Math.min(limit || Infinity, table.numRows()) : 0;\n}\n\nexport function formats(table, names, options) {\n  const formatOpt = options.format || {};\n  const alignOpt = options.align || {};\n  const format = {};\n  const align = {};\n\n  names.forEach(name => {\n    const auto = inferFormat(values(table, name), options);\n    align[name] = alignOpt[name] || auto.align;\n    format[name] = formatOpt[name] || auto.format;\n  });\n\n  return { align, format };\n}\n\nfunction values(table, columnName) {\n  const column = table.column(columnName);\n  return fn => table.scan(row => fn(column.get(row)));\n}\n\nexport function scan(table, names, limit, ctx) {\n  limit = numRows(table, limit);\n  if (limit <= 0) return;\n\n  const n = names.length;\n  let r = 0;\n  table.scan((row, data, stop) => {\n    ctx.row(row);\n    for (let i = 0; i < n; ++i) {\n      const name = names[i];\n      ctx.cell(table.get(name, row), name, i);\n    }\n    if (++r >= limit) stop();\n  }, true);\n}","import isDate from '../util/is-date';\n\nfunction isExactDateUTC(d) {\n  return d.getUTCHours() === 0\n    && d.getUTCMinutes() === 0\n    && d.getUTCSeconds() === 0\n    && d.getUTCMilliseconds() === 0;\n}\n\nexport default function(scan, options = {}) {\n  let count = 0;\n  let nulls = 0;\n  let dates = 0;\n  let dutcs = 0;\n  let nums = 0;\n  let digits = 0;\n\n  scan(value => {\n    ++count;\n    if (value == null) {\n      ++nulls;\n      return;\n    }\n\n    const type = typeof value;\n    if (type === 'object' && isDate(value)) {\n      ++dates;\n      if (isExactDateUTC(value)) ++dutcs;\n    } else if (type === 'number') {\n      ++nums;\n      if (value === value &&  (value | 0) !== value) {\n        const s = value + '';\n        const p = s.indexOf('.');\n        if (p >= 0) {\n          const e = s.indexOf('e');\n          const l = e > 0 ? e : s.length;\n          digits = Math.max(digits, l - p - 1);\n        }\n      }\n    }\n  });\n\n  return {\n    align:  (nulls + nums + dates) / count > 0.5 ? 'r' : 'l',\n    format: {\n      utc:    dates === dutcs,\n      digits: Math.min(digits, options.maxdigits || 6)\n    }\n  };\n}","import error from '../util/error';\nimport repeat from '../util/repeat';\nimport { numRows } from '../format/util';\n\n/**\n * Abstract class representing a data table.\n */\nexport default class Table {\n\n  /**\n   * Construct a new Table instance.\n   * @param {string[]} names - An array of column names.\n   * @param {number} nrows - The number of rows.\n   * @param {*} data - The backing data, which can vary by implementation.\n   * @param {BitSet} [filter] - A bit mask for which rows to include.\n   * @param {Object} [groups] - Row grouping criteria.\n   * @param {string[]} [groups.names] - Output column names for grouping variables.\n   * @param {function[]} [groups.get] - Accessor functions for grouping variables.\n   * @param {function} [order] - A comparator function for sorting rows.\n   * @param {Object} [params] - Parameter values for table expressions.\n   */\n  constructor(names, nrows, data, filter, groups, order, params) {\n    this._names = Object.freeze(names);\n    this._total = nrows;\n    this._nrows = filter ? filter.count() : nrows;\n    this._data = data;\n    this._filter = filter || null;\n    this._group = groups || null;\n    this._order = order || null;\n    if (params) this._params = params;\n  }\n\n  /**\n   * Provide an informative object string tag.\n   */\n  get [Symbol.toStringTag]() {\n    if (!this._names) return 'Object'; // bail if called on prototype\n    const nr = this.numRows() + ' row' + (this.numRows() !== 1 ? 's' : '');\n    const nc = this.numCols() + ' col' + (this.numCols() !== 1 ? 's' : '');\n    return `Table: ${nc} x ${nr}`\n      + (this.isFiltered() ? ` (${this.totalRows()} backing)` : '')\n      + (this.isGrouped() ? `, ${this._group.size} groups` : '')\n      + (this.isOrdered() ? ', ordered' : '');\n  }\n\n  /**\n   * Create a new table with the same type as this table.\n   * The new table may have different data, filter, grouping, or ordering\n   * based on the values of the optional configuration argument. If a\n   * setting is not specified, it is inherited from the current table.\n   * @param {Object} [config] Configuration settings for the new table:\n   *  - data: The data payload to use.\n   *  - filter: An additional filter bitset to apply.\n   *  - groups: The groupby specification to use (null for no groups).\n   *  - order: The orderby comparator to use (null for no order).\n   *  - params: Table expression parameters.\n   * @return {Table} A newly created table.\n   */\n  create({ data, filter, groups, order }) { // eslint-disable-line no-unused-vars\n  }\n\n  /**\n   * Create a new fully-materialized instance of this table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {Table} A reified table.\n   */\n  reify(indices) { // eslint-disable-line no-unused-vars\n  }\n\n  /**\n   * Indicates if the table has a filter applied.\n   * @return {boolean} True if filtered, false otherwise.\n   */\n  isFiltered() {\n    return !!this._filter;\n  }\n\n  /**\n   * Indicates if the table has a groupby specification.\n   * @return {boolean} True if grouped, false otherwise.\n   */\n  isGrouped() {\n    return !!this._group;\n  }\n\n  /**\n   * Indicates if the table has a row order comparator.\n   * @return {boolean} True if ordered, false otherwise.\n   */\n  isOrdered() {\n    return !!this._order;\n  }\n\n  /**\n   * Returns the internal table storage data structure.\n   * @return {*} The backing table storage data structure.\n   */\n  data() {\n    return this._data;\n  }\n\n  /**\n   * A table groupby specification.\n   * @typedef {Object} GroupBySpec\n   * @property {number} size - The number of groups.\n   * @property {string[]} names - Column names for each group.\n   * @property {Function[]} get - Value accessor functions for each group.\n   * @property {number[]} rows - Indices of an example table row for each group.\n   * @property {number[]} keys - Per-row group indices, length is total rows of table.\n   */\n\n  /**\n   * Returns the groupby specification, if defined.\n   * @return {GroupBySpec} The groupby specification.\n   */\n  groups() {\n    return this._group;\n  }\n\n  /**\n   * Returns the row order comparator function, if specified.\n   * @return {Function} The row order comparator function.\n   */\n  comparator() {\n    return this._order;\n  }\n\n  /**\n   * The total number of rows in this table, counting both\n   * filtered and unfiltered rows.\n   * @return {number} The number of total rows.\n   */\n  totalRows() {\n    return this._total;\n  }\n\n  /**\n   * The number of active rows in this table. This number may be\n   * less than the total rows if the table has been filtered.\n   * @see Table.totalRows\n   * @return {number} The number of rows.\n   */\n  numRows() {\n    return this._nrows;\n  }\n\n  /**\n   * The number of columns in this table.\n   * @return {number} The number of columns.\n   */\n  numCols() {\n    return this._names.length;\n  }\n\n  /**\n   * Filter function invoked for each column name.\n   * @callback nameFilter\n   * @param {string} name The column name.\n   * @param {number} index The column index.\n   * @param {string[]} array The array of names.\n   * @return {boolean} Returns true to retain the column name.\n   */\n\n  /**\n   * The table column names, optionally filtered.\n   * @param {nameFilter} [filter] An optional filter function.\n   *  If unspecified, all column names are returned.\n   * @return {string[]} An array of matching column names.\n   */\n  columnNames(filter) {\n    return filter ? this._names.filter(filter) : this._names.slice();\n  }\n\n  /**\n   * The column name at the given index.\n   * @param {number} index The column index.\n   * @return {string} The column name,\n   *  or undefined if the index is out of range.\n   */\n  columnName(index) {\n    return this._names[index];\n  }\n\n  /**\n   * The column index for the given name.\n   * @param {string} name The column name.\n   * @return {number} The column index, or -1 if the name is not found.\n   */\n  columnIndex(name) {\n    return this._names.indexOf(name);\n  }\n\n  /**\n   * Get the value for the given column and row.\n   * @param {string} name The column name.\n   * @param {number} row The row index.\n   * @return {*} The table value at (column, row).\n   */\n  get(name, row) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an accessor (\"getter\") function for a column. The returned\n   * function takes a row index as its single argument and returns the\n   * corresponding column value.\n   * @param {string} name The column name.\n   * @return {Function} The column getter function.\n   */\n  getter(name) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Options for generating row objects.\n   * @typedef {Object} ObjectsOptions\n   * @property {number} [limit=Infinity] The maximum number of objects to create.\n   */\n\n  /**\n   * Returns an array of objects representing table rows.\n   * @param {ObjectsOptions} [options] The options for row object generation.\n   * @return {Array} An array of row objects.\n   */\n  objects(options) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an iterator over objects representing table rows.\n   * @return {Iterator} An iterator over row objects.\n   */\n  [Symbol.iterator]() {\n    error('Not implemented');\n  }\n\n  /**\n   * Print the contents of this table using the console.table() method.\n   * @param {ObjectsOptions} options The options for row object generation,\n   *  determining which rows and columns are printed.\n   */\n  print(options = {}) {\n    if (typeof options === 'number') {\n      options = { limit: 10 };\n    } else if (options.limit == null) {\n      options.limit = 10;\n    }\n\n    const show = numRows(this, options.limit);\n    const msg = `${this[Symbol.toStringTag]}. Showing ${show} rows.`;\n    const obj = this.objects(options);\n\n    console.log(msg);   // eslint-disable-line no-console\n    console.table(obj); // eslint-disable-line no-console\n  }\n\n  /**\n   * Returns an array of indices for all rows passing the table filter.\n   * @param {boolean} [order=true] A flag indicating if the returned\n   *  indices should be sorted if this table is ordered. If false, the\n   *  returned indices may or may not be sorted.\n   * @return {Uint32Array} An array of row indices.\n   */\n  indices(order = true) {\n    if (this._index) return this._index;\n\n    let i = -1;\n    const index = new Uint32Array(this.numRows());\n    this.scan(row => index[++i] = row);\n\n    // sort index vector\n    if (order && this.isOrdered()) {\n      const compare = this._order;\n      const data = this._data;\n      index.sort((a, b) => compare(a, b, data));\n    }\n\n    // save indices if they reflect table metadata\n    if (!this.isOrdered || order) {\n      this._index = index;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns an array of indices for each group in the table.\n   * If the table is not grouped, the result is the same as\n   * {@link indices}, but wrapped within an array.\n   * @param {boolean} [order=true] A flag indicating if the returned\n   *  indices should be sorted if this table is ordered. If false, the\n   *  returned indices may or may not be sorted.\n   * @return {number[][]} An array of row index arrays, one per group.\n   *  The indices will be filtered if the table is filtered.\n   */\n  partitions(order = true) {\n    // return partitions if already generated\n    if (this._partitions) {\n      return this._partitions;\n    }\n\n    // if not grouped, return a single partition\n    if (!this.isGrouped()) {\n      return [ this.indices(order) ];\n    }\n\n    // generate partitions\n    const { keys, size } = this._group;\n    const part = repeat(size, () => []);\n\n    // populate partitions, don't sort if indices don't exist\n    const sort = !!this._index;\n    this.scan(row => part[keys[row]].push(row), sort);\n\n    // if ordered but not yet sorted, sort partitions directly\n    if (order && !sort && this.isOrdered()) {\n      const compare = this._order;\n      const data = this._data;\n      for (let i = 0; i < size; ++i) {\n        part[i].sort((a, b) => compare(a, b, data));\n      }\n    }\n\n    // save partitions if they reflect table metadata\n    if (order || !this.isOrdered()) {\n      this._partitions = part;\n    }\n\n    return part;\n  }\n\n  /**\n   * Callback function invoked for each row of a table scan.\n   * @callback scanVisitor\n   * @param {number} row The table row index.\n   * @param {Object|Array} data The backing table data store.\n   * @param {Function} stop Function to stop the scan early.\n   *  Callees can invoke this function to prevent future calls.\n   */\n\n  /**\n   * Perform a table scan, visiting each row of the table.\n   * If this table is filtered, only rows passing the filter are visited.\n   * @param {scanVisitor} fn Callback invoked for each row of the table.\n   * @param {boolean} [order=false] Indicates if the table should be\n   *  scanned in the order determined by {@link Table#orderby}. This\n   *  argument has no effect if the table is unordered.\n   */\n  scan(fn, order) {\n    const filter = this._filter;\n    const nrows = this._nrows;\n    const data = this._data;\n\n    let i = 0;\n    const stop = () => i = this._total;\n\n    if (order && this.isOrdered() || filter && this._index) {\n      const index = this.indices();\n      const data = this._data;\n      for (; i < nrows; ++i) {\n        fn(index[i], data, stop);\n      }\n    } else if (filter) {\n      for (i = filter.next(0); i >= 0; i = filter.next(i + 1)) {\n        fn(i, data, stop);\n      }\n    } else {\n      for (; i < nrows; ++i) {\n        fn(i, data, stop);\n      }\n    }\n  }\n\n  /**\n   * Get or set table expression parameter values.\n   * If called with no arguments, returns the current parameter values\n   * as an object. Otherwise, adds the provided parameters to this\n   * table's parameter set and returns the table. Any prior parameters\n   * with names matching the input parameters are overridden.\n   * @param {Object} values The parameter values.\n   * @return {Table|Object} The current parameters values (if called with\n   *  no arguments) or this table.\n   */\n  params(values) {\n    if (arguments.length) {\n      if (values) {\n        this._params = { ...this._params, ...values };\n      }\n      return this;\n    } else {\n      return this._params;\n    }\n  }\n\n  // -- Transformation Verbs ------------------------------------------------\n\n  /**\n   * Options for count transformations.\n   * @typedef {Object} CountOptions\n   * @property {string} [as='count'] The name of the output count column.\n   */\n\n  /**\n   * Count the number of values in a group. This method is a shorthand\n   * for {@link Table#rollup} with a count aggregate function.\n   * @param {CountOptions} [options] Options for the count.\n   * @return {Table} A new table with groupby and count columns.\n   * @example table.groupby('colA').count()\n   * @example table.groupby('colA').count({ as: 'num' })\n   */\n  count(options) {\n    const as = options && options.as || 'count';\n    return this.rollup({ [as]: '() => count()' });\n  }\n\n  /**\n   * De-duplicate table rows by removing repeated row values.\n   * @param  {...any} [keys] Key columns to check for duplicates.\n   *  Two rows are considered duplicates if they have matching values\n   *  for all keys. If keys are unspecified, all columns are used.\n   *  Keys may be column name strings, column index numbers, or value\n   *  objects with output column names for keys and table expressions\n   *  for values.\n   * @return {Table} A new de-duplicated table.\n   * @example table.dedupe()\n   * @example table.dedupe('a', 'b')\n   * @example table.dedupe({ abs: d => op.abs(d.a) })\n   */\n  dedupe(...keys) {\n    return this.__dedupe(this, keys.flat());\n  }\n\n  /**\n   * Derive new column values based on the provided expressions.\n   * @param {Object} values Object of name-value pairs defining the\n   *  columns to derive. The input object should have output column\n   *  names for keys and table expressions for values.\n   * @return {Table} A new table with derived columns added.\n   * @example table.derive({ sumXY: d => d.x + d.y })\n   */\n  derive(values) {\n    return this.__derive(this, values);\n  }\n\n  /**\n   * Filter a table to a subset of rows based on the input criteria.\n   * The resulting table provides a filtered view over the original data;\n   * no data copy is made. To create a table that copies only filtered data\n   * to new data structures, call {@link Table#reify} on the output table.\n   * @param {Function} criteria The filter criteria as a table expression.\n   *  Both aggregate and window functions are permitted, and will take into\n   *  account any {@link Table#groupby} or {@link Table#orderby} settings.\n   * @return {Table} A new table with filtered rows.\n   * @example table.filter(d => abs(d.value) < 5)\n   */\n  filter(criteria) {\n    return this.__filter(this, criteria);\n  }\n\n  /**\n   * Group table rows based on a set of column values.\n   * Subsequent operations that are sensitive to grouping (such as\n   * aggregate functions) will operate over the grouped rows.\n   * To undo grouping, use {@link Table#ungroup}.\n   * @param  {...any} keys Key column values to group by.\n   *  Keys may be column name strings, column index numbers, or value\n   *  objects with output column names for keys and table expressions\n   *  for values.\n   * @return {Table} A new table with grouped rows.\n   * @example table.groupby('colA', 'colB')\n   * @example table.groupby({ key: d => d.colA + d.colB })\n   */\n  groupby(...keys) {\n    return this.__groupby(this, keys.flat());\n  }\n\n  /**\n   * Order table rows based on a set of column values.\n   * Subsequent operations sensitive to ordering (such as window functions)\n   * will operate over sorted values.\n   * The resulting table provides an view over the original data, without\n   * any copying. To create a table with sorted data copied to new data\n   * strucures, call {@link Table#reify} on the result of this method.\n   * To undo ordering, use {@link Table#unorder}.\n   * @param  {...any} keys Key values to sort by, in precedence order.\n   *  By default, sorting is done in ascending order.\n   *  To sort in descending order, wrap values using {@link desc}.\n   *  If a string, order by the column with that name.\n   *  If a number, order by the column with that index.\n   *  If a function, must be a valid table expression; aggregate functions\n   *  are permitted, but window functions are not.\n   *  If an object, object values must be valid values parameters\n   *  with output column names for keys and table expressions\n   *  for values (the output names will be ignored).\n   *  If an array, array values must be valid key parameters.\n   * @return {Table} A new ordered table.\n   * @example table.orderby('a', desc('b'))\n   * @example table.orderby({ a: 'a', b: desc('b') )})\n   * @example table.orderby(desc(d => d.a))\n   */\n  orderby(...keys) {\n    return this.__orderby(this, keys.flat());\n  }\n\n  /**\n   * Reduce a table, processing all rows to produce a new table.\n   * To produce standard aggregate summaries, use {@link rollup}.\n   * This method allows the use of custom reducer implementations,\n   * for example to produce multiple rows for an aggregate.\n   * @param  {Reducer} reducer The reducer to apply.\n   * @return {Table} A new table of reducer outputs.\n   */\n  reduce(reducer) {\n    return this.__reduce(this, reducer);\n  }\n\n  /**\n   * Rollup a table to produce an aggregate summary.\n   * Often used in conjunction with {@link Table#groupby}.\n   * To produce counts only, {@link Table#count} is a convenient shortcut.\n   * @param {Object} values Object of name-value pairs defining aggregated\n   *  output columns. The input object should have output column\n   *  names for keys and table expressions for values.\n   * @return {Table} A new table of aggregate summary values.\n   * @example table.groupby('colA').rollup({ mean: d => mean(d.colB) })\n   * @example table.groupby('colA').rollup({ mean: op.median('colB') })\n   */\n  rollup(values) {\n    return this.__rollup(this, values);\n  }\n\n  /**\n   * Options for sample transformations.\n   * @typedef {Object} SampleOptions\n   * @property {boolean} [replace=false] Flag for sampling with replacement.\n   * @property {Function|string} [weight] Column values to use as weights\n   *  for sampling. Rows will be sampled with probability proportional to\n   *  their relative weight. The input should be a column name string or\n   *  a table expression compatible with {@link Table#derive}.\n   */\n\n  /**\n   * Generate a table from a random sample of rows.\n   * If the table is grouped, performs a stratified sample by\n   * sampling from each group separately.\n   * @param {number|Function} size The number of samples to draw per group.\n   *  If number-valued, the same sample size is used for each group.\n   *  If function-valued, the input should be an aggregate table\n   *  expression compatible with {@link Table#rollup}.\n   * @param {SampleOptions} options Options for sampling.\n   * @return {Table} A new table with sampled rows.\n   * @example table.sample(50)\n   * @example table.sample(100, { replace: true })\n   * @example table.groupby('colA').sample(() => op.floor(0.5 * op.count()))\n   */\n  sample(size, options) {\n    return this.__sample(this, size, options);\n  }\n\n  /**\n   * Select a subset of columns into a new table, potentially renaming them.\n   * @param {string|string[]|number|number[]|Object|Function} columns The columns to select.\n   *  The input may consist of:\n   *  - column name strings,\n   *  - column integer indices,\n   *  - objects with current column names as keys and new column names as\n   *    values (for renaming), or\n   *  - functions that take a table as input and returns a valid selection\n   *    parameter (typically the output of the selection helper functions\n   *    {@link all}, {@link not}, or {@link range}).\n   * @return {Table} A new table of selected columns.\n   * @example table.select('colA', 'colB')\n   * @example table.select(not('colB', 'colC'))\n   * @example table.select({ colA: 'newA', colB: 'newB' })\n   */\n  select(...columns) {\n    return this.__select(this, columns.flat());\n  }\n\n  /**\n   * Ungroup a table, removing any grouping criteria.\n   * Undoes the effects of {@link Table#groupby}.\n   * @return {Table} A new ungrouped table, or this table if not grouped.\n   * @example table.ungroup()\n   */\n  ungroup() {\n    return this.__ungroup(this);\n  }\n\n  /**\n   * Unorder a table, removing any sorting criteria.\n   * Undoes the effects of {@link Table#orderby}.\n   * @return {Table} A new unordered table, or this table if not ordered.\n   * @example table.unorder()\n   */\n  unorder() {\n    return this.__unorder(this);\n  }\n\n  // -- Reshaping Verbs -----------------------------------------------------\n\n  /**\n   * Options for fold transformations.\n   * @typedef {Object} FoldOptions\n   * @property {string[]} [as=['key', 'value']] An array indicating the\n   *  output column names to use for the key and value columns, respectively.\n   */\n\n  /**\n   * Fold one or more columns into two key-value pair columns.\n   * The fold transform is an inverse of the {@link Table#pivot} transform.\n   * The resulting table has two new columns, one containing the column\n   * names (named \"key\") and the other the column values (named \"value\").\n   * The number of output rows equals the original row count multiplied\n   * by the number of folded columns.\n   * @param {*} values The columns to fold. The input may consist of an array\n   *  with column name strings, objects with output names as keys and current\n   *  names as values (output names will be ignored), or the output of the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   * @param {FoldOptions} options Options for folding.\n   * @return {Table} A new folded table.\n   * @example table.fold('colA')\n   * @example table.fold(['colA', 'colB'])\n   * @example table.fold(range(5, 8))\n   */\n  fold(values, options) {\n    return this.__fold(this, values, options);\n  }\n\n  /**\n   * Options for pivot transformations.\n   * @typedef {Object} PivotOptions\n   * @property {number} [limit=Infinity] The maximum number of new columns to generate.\n   * @property {string} [keySeparator='_'] A string to place between multiple key names.\n   * @property {string} [valueSeparator='_'] A string to place between key and value names.\n   * @property {boolean} [sort=true] Flag for alphabetical sorting of new column names.\n   */\n\n  /**\n   * Pivot columns into a cross-tabulation.\n   * The pivot transform is an inverse of the {@link Table#fold} transform.\n   * The resulting table has new columns for each unique combination\n   * of the provided *keys*, populated with the provided *values*.\n   * The provided *values* must be aggregates, as a single set of keys may\n   * include more than one row. If string-valued, the *any* aggregate is used.\n   * If only one *values* column is defined, the new pivoted columns will\n   * be named using key values directly. Otherwise, input value column names\n   * will be included as a component of the output column names.\n   * @param {*} keys Key values to map to new column names. Keys may be an\n   *  array of column name strings, column index numbers, or value objects\n   *  with output column names for keys and table expressions for values.\n   * @param {string|string[]|Object} values Output values for pivoted columns.\n   *  Column string names will be wrapped in any *any* aggregate.\n   *  If object-valued, the input object should have output value\n   *  names for keys and table expressions for values.\n   * @param {PivotOptions} options Options for pivoting.\n   * @return {Table} A new pivoted table.\n   * @example table.pivot('key', 'value')\n   * @example table.pivot(['keyA', 'keyB'], ['valueA', 'valueB'])\n   * @example table.pivot({ key: d => d.key }, { value: d => sum(d.value) })\n   */\n  pivot(keys, values, options) {\n    return this.__pivot(this, keys, values, options);\n  }\n\n  /**\n   * Options for spread transformations.\n   * @typedef {Object} SpreadOptions\n   * @property {number} [limit=Infinity] The maximum number of new columns to generate.\n   * @property {string[]} [as] Output column names to use. This option only\n   *  applies when a single column is spread. If the given array of names is\n   *  shorter than the number of generated columns, the additional columns\n   *  will be named using the standard naming convention.\n   */\n\n  /**\n   * Spread array elements into a set of new columns.\n   * Output columns are named based on the value key and array index.\n   * @param {string|Array|Object} values The columns to spread, as either\n   *  an array of column names or a key-value object of table expressions.\n   * @param {SpreadOptions} [options] Options for spreading.\n   * @return {Table} A new table with the spread columns added.\n   * @example table.spread({ a: split(d.text, '') })\n   * @example table.spread('arrayCol', { limit: 100 })\n   */\n  spread(values, options) {\n    return this.__spread(this, values, options);\n  }\n\n  /**\n   * Options for unroll transformations.\n   * @typedef {Object} UnrollOptions\n   * @property {number} [limit=Infinity] The maximum number of new rows\n   *  to generate per array value.\n   * @property {boolean|string} [index=false] Flag or column name for adding\n   *  zero-based array index values as an output column. If true, a new column\n   *  named \"index\" will be included. If string-valued, a new column with\n   *  the given name will be added.\n   * @property {string|string[]|number|number[]|Object|Function} [drop]\n   *  A selection of columns to drop (exclude) from the unrolled output.\n   *  The input may consist of:\n   *  - column name strings,\n   *  - column integer indices,\n   *  - objects with column names as keys,\n   *  - functions that take a table as input and returns a valid selection\n   *    parameter (typically the output of the selection helper functions\n   *    {@link all}, {@link not}, or {@link range}).\n   */\n\n  /**\n   * Unroll one or more array-valued columns into new rows.\n   * If more than one array value is used, the number of new rows\n   * is the smaller of the limit and the largest length.\n   * Values for all other columns are copied over.\n   * @param {string|Array|Object} values The columns to unroll, as either\n   *  an array of column names or a key-value object of table expressions.\n   * @param {UnrollOptions} [options] Options for unrolling.\n   * @return {Table} A new unrolled table.\n   * @example table.unroll('colA', { limit: 1000 })\n   */\n  unroll(values, options) {\n    return this.__unroll(this, values, options);\n  }\n\n  // -- Joins ---------------------------------------------------------------\n\n  /**\n   * Lookup values from a secondary table and add them as new columns.\n   * A lookup occurs upon matching key values for rows in both tables.\n   * If the secondary table has multiple rows with the same key, only\n   * the last observed instance will be considered in the lookup.\n   * Lookup is similar to {@link Table#join_left}, but with a streamlined\n   * syntax and the added constraint of allowing at most one match only.\n   * @param {Table} other The secondary table to look up values from.\n   * @param {Array} on A two-element array of lookup keys (column name\n   *  strings or table expressions) for this table and the secondary table,\n   *  respectively.\n   * @param {string|Object} values The column values to add from the\n   *  secondary table. Can be column name strings or objects with column\n   *  names as keys and table expressions as values.\n   * @return {Table} A new table with lookup values added.\n   * @example table.lookup(other, ['key1', 'key2'], 'value1', 'value2')\n   */\n  lookup(other, on, ...values) {\n    return this.__lookup(this, other, on, values.flat());\n  }\n\n  /**\n   * Options for join transformations.\n   * @typedef {Object} JoinOptions\n   * @property {boolean} [left=false] Flag indicating a left outer join.\n   *  If both the *left* and *right* are true, indicates a full outer join.\n   * @property {boolean} [right=false] Flag indicating a right outer join.\n   *  If both the *left* and *right* are true, indicates a full outer join.\n   * @property {string[]} [suffix=['_1', '_2']] Column name suffixes to\n   *  append if two columns with the same name are produced by the join.\n   */\n\n  /**\n   * Join two tables, extending the columns of one table with\n   * values from the other table. The current table is considered\n   * the \"left\" table in the join, and the new table input is\n   * considered the \"right\" table in the join. By default an inner\n   * join is performed, removing all rows that do not match the\n   * join criteria. To perform left, right, or full outer joins, use\n   * the {@link Table#join_left}, {@link Table#join_right}, or\n   * {@link Table#join_full} methods, or provide an options argument.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join.\n   * @return {Table} A new joined table.\n   * @example table.join(other, ['keyL', 'keyR'])\n   * @example table.join(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join(other, on, values, options) {\n    return this.__join(this, other, on, values, options);\n  }\n\n  /**\n   * Perform a left outer join on two tables. Rows in the left table\n   * that do not match a row in the right table will be preserved.\n   * This is a convenience method with fixed options for {@link Table#join}.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: true, right: false}.\n   * @return {Table} A new joined table.\n   * @example table.join_left(other, ['keyL', 'keyR'])\n   * @example table.join_left(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_left(other, on, values, options) {\n    const opt = { ...options, left: true, right: false };\n    return this.__join(this, other, on, values, opt);\n  }\n\n  /**\n   * Perform a right outer join on two tables. Rows in the right table\n   * that do not match a row in the left table will be preserved.\n   * This is a convenience method with fixed options for {@link Table#join}.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: false, right: true}.\n   * @return {Table} A new joined table.\n   * @example table.join_right(other, ['keyL', 'keyR'])\n   * @example table.join_right(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_right(other, on, values, options) {\n    const opt = { ...options, left: false, right: true };\n    return this.__join(this, other, on, values, opt);\n  }\n\n  /**\n   * Perform a full outer join on two tables. Rows in either the left or\n   * right table that do not match a row in the other will be preserved.\n   * This is a convenience method with fixed options for {@link Table#join}.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: true, right: true}.\n   * @return {Table} A new joined table.\n   * @example table.join_full(other, ['keyL', 'keyR'])\n   * @example table.join_full(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_full(other, on, values, options) {\n    const opt = { ...options, left: true, right: true };\n    return this.__join(this, other, on, values, opt);\n  }\n\n  /**\n   * Produce the Cartesian cross product of two tables. The output table\n   * has one row for every pair of input table rows. Beware that outputs\n   * may be quite large, as the number of output rows is the product of\n   * the input row counts.\n   * This is a convenience method for {@link Table#join} in which the\n   * join criteria is always true.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Object} [values] The columns to include in the output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join.\n   * @return {Table} A new joined table.\n   * @example table.cross(other)\n   * @example table.cross(other, [['leftKey', 'leftVal'], ['rightVal']])\n   */\n  cross(other, values, options) {\n    const opt = { ...options, left: true, right: true };\n    return this.__join(this, other, () => true, values, opt);\n  }\n\n  /**\n   * Perform a semi-join, filtering the left table to only rows that\n   * match a row in the right table.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @return {Table} A new filtered table.\n   * @example table.semijoin(other)\n   * @example table.semijoin(other, ['keyL', 'keyR'])\n   * @example table.semijoin(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  semijoin(other, on) {\n    return this.__join_filter(this, other, on);\n  }\n\n  /**\n   * Perform an anti-join, filtering the left table to only rows that\n   * do *not* match a row in the right table.\n   * @param {Table} other The other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @return {Table} A new filtered table.\n   * @example table.antijoin(other)\n   * @example table.antijoin(other, ['keyL', 'keyR'])\n   * @example table.antijoin(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  antijoin(other, on) {\n    return this.__join_filter(this, other, on, { anti: true });\n  }\n\n  // -- Set Operations ------------------------------------------------------\n\n  /**\n   * Concatenate multiple tables into a single table, preserving all rows.\n   * This transformation mirrors the UNION_ALL operation in SQL.\n   * Only named columns in this table are included in the output.\n   * @see Table#union\n   * @param  {...any} tables A list of tables to concatenate.\n   * @return {Table} A new concatenated table.\n   * @example table.concat(other)\n   * @example table.concat(other1, other2)\n   * @example table.concat([other1, other2])\n   */\n  concat(...tables) {\n    return this.__concat(this, tables.flat());\n  }\n\n  /**\n   * Union multiple tables into a single table, deduplicating all rows.\n   * This transformation mirrors the UNION operation in SQL. It is\n   * similar to {@link Table#concat} but suppresses duplicate rows with\n   * values identical to another row.\n   * Only named columns in this table are included in the output.\n   * @see Table#concat\n   * @param  {...any} tables A list of tables to union.\n   * @return {Table} A new unioned table.\n   * @example table.union(other)\n   * @example table.union(other1, other2)\n   * @example table.union([other1, other2])\n   */\n  union(...tables) {\n    return this.__union(this, tables.flat());\n  }\n\n  /**\n   * Intersect multiple tables, keeping only rows whose with identical\n   * values for all columns in all tables, and deduplicates the rows.\n   * This transformation is similar to a series of {@link Table#semijoin}\n   * calls, but additionally suppresses duplicate rows.\n   * @see Table#semijoin\n   * @param  {...any} tables A list of tables to intersect.\n   * @return {Table} A new filtered table.\n   * @example table.intersect(other)\n   * @example table.intersect(other1, other2)\n   * @example table.intersect([other1, other2])\n   */\n  intersect(...tables) {\n    return this.__intersect(this, tables.flat());\n  }\n\n  /**\n   * Compute the set difference with multiple tables, keeping only rows in\n   * this table that whose values do not occur in the other tables.\n   * This transformation is similar to a series of {@link Table#antijoin}\n   * calls, but additionally suppresses duplicate rows.\n   * @see Table#antijoin\n   * @param  {...any} tables A list of tables to difference.\n   * @return {Table} A new filtered table.\n   * @example table.except(other)\n   * @example table.except(other1, other2)\n   * @example table.except([other1, other2])\n   */\n  except(...tables) {\n    return this.__except(this, tables.flat());\n  }\n}","import isFunction from '../util/is-function';\n\n/**\n * Class representing an array-backed data column.\n * Any object that adheres to this interface can be used as\n * a data column within a {@link ColumnTable}.\n */\nexport default class Column {\n  /**\n   * Create a new column instance.\n   * @param {Array} data The backing array (or array-like object)\n   *  containing the column data.\n   */\n  constructor(data) {\n    this.data = data;\n  }\n\n  /**\n   * Get the length (number of rows) of the column.\n   * @return {number} The length of the column array.\n   */\n  get length() {\n    return this.data.length;\n  }\n\n  /**\n   * Get the column value at the given row index.\n   * @param {number} row The row index of the value to retrieve.\n   * @return {*} The column value.\n   */\n  get(row) {\n    return this.data[row];\n  }\n}\n\n/**\n * Create a new column from the given input data.\n * @param {Array|Column} data The backing column data. If the value\n *  conforms to the Column interface it will be returned directly. If\n *  the value is an array, it will be wrapped in a new Column instance.\n */\nColumn.from = function(data) {\n  return data && isFunction(data.get) ? data : new Column(data);\n};","export default function isObject(value) {\n  return value === Object(value);\n}","import toString from './to-string';\n\nexport default function(value) {\n  return toString.call(value) === '[object RegExp]';\n}","export default function isString(value) {\n  return typeof value === 'string';\n}\n","import error from '../util/error';\nimport isDate from '../util/is-date';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport isRegExp from '../util/is-regexp';\nimport isString from '../util/is-string';\n\nexport default function(values, names) {\n  const raise = type => error(`Illegal argument type: ${type || typeof values}`);\n  const iter = Symbol.iterator;\n  return values instanceof Map ? fromKeyValuePairs(values.entries(), names)\n    : isDate(values) ? raise('Date')\n    : isRegExp(values) ? raise('RegExp')\n    : isString(values) ? raise()\n    : isFunction(values[iter]) ? fromValues(values[iter](), names)\n    : isObject(values) ? fromKeyValuePairs(Object.entries(values), names)\n    : raise();\n}\n\nfunction fromKeyValuePairs(entries, names = ['key', 'value']) {\n  const keys = [];\n  const vals = [];\n\n  for (const [key, val] of entries) {\n    keys.push(key);\n    vals.push(val);\n  }\n\n  const columns = {};\n  if (names[0]) columns[names[0]] = keys;\n  if (names[1]) columns[names[1]] = vals;\n  return columns;\n}\n\nfunction fromValues(values, names) {\n  const columns = {};\n  const addCol = name => columns[name] = [];\n\n  let first = values.next();\n  for (; first.value == null && !first.done; first = values.next());\n\n  if (!first.done) {\n    names = names || Object.keys(first.value);\n    const cols = names.map(addCol);\n    const n = cols.length;\n\n    const addRow = obj => {\n      for (let i = 0; i < n; ++i) {\n        cols[i].push(obj[names[i]]);\n      }\n    };\n\n    addRow(first.value);\n    for (const row of values) {\n      if (row != null) addRow(row);\n    }\n  } else if (names) {\n    names.forEach(addCol);\n  }\n\n  return columns;\n}","export default function(value, width, char = '0') {\n  const s = value + '';\n  const len = s.length;\n  return len < width ? Array(width - len + 1).join(char) + s : s;\n}","import pad from './pad';\n\nconst pad2 = v => (v < 10 ? '0' : '') + v;\n\nconst formatYear = year => year < 0 ? '-' + pad(-year, 6)\n  : year > 9999 ? '+' + pad(year, 6)\n  : pad(year, 4);\n\nexport function formatISO(year, month, date, hours, min, sec, ms, utc, short) {\n  const suffix = utc ? 'Z' : '';\n  return formatYear(year) + '-' + pad2(month + 1) + '-' + pad2(date) + (\n    !short || ms ? 'T' + pad2(hours) + ':' + pad2(min) + ':' + pad2(sec) + '.' + pad(ms, 3) + suffix\n    : sec ? 'T' + pad2(hours) + ':' + pad2(min) + ':' + pad2(sec) + suffix\n    : min || hours || !utc ? 'T' + pad2(hours) + ':' + pad2(min) + suffix\n    : ''\n  );\n}\n\nexport function formatDate(d, short) {\n  return isNaN(d)\n    ? 'Invalid Date'\n    : formatISO(\n      d.getFullYear(),\n      d.getMonth(),\n      d.getDate(),\n      d.getHours(),\n      d.getMinutes(),\n      d.getSeconds(),\n      d.getMilliseconds(),\n      false, short\n    );\n}\n\nexport function formatUTCDate(d, short) {\n  return isNaN(d)\n    ? 'Invalid Date'\n    : formatISO(\n      d.getUTCFullYear(),\n      d.getUTCMonth(),\n      d.getUTCDate(),\n      d.getUTCHours(),\n      d.getUTCMinutes(),\n      d.getUTCSeconds(),\n      d.getUTCMilliseconds(),\n      true, short\n    );\n}","export default function(value) {\n  // all typed arrays should share the same method prototype\n  return value && value.map === Int8Array.prototype.map;\n}","import { formatDate, formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\nimport isFunction from '../util/is-function';\nimport isTypedArray from '../util/is-typed-array';\n\nexport default function(v, options = {}) {\n  if (isFunction(options)) {\n    return options(v) + '';\n  }\n\n  const type = typeof v;\n\n  if (type === 'object') {\n    if (isDate(v)) {\n      return options.utc ? formatUTCDate(v) : formatDate(v);\n    } else {\n      const s = JSON.stringify(\n        v,\n        (k, v) => isTypedArray(v) ? Array.from(v) : v\n      );\n      const maxlen = options.maxlen || 30;\n      return s.length > maxlen\n        ? s.slice(0, 28) + '\\u2026' + (s[0] === '[' ? ']' : '}')\n        : s;\n    }\n  } else if (type === 'number') {\n    const digits = options.digits || 0;\n    let a;\n    return v !== 0 && ((a = Math.abs(v)) >= 1e18 || a < Math.pow(10, -digits))\n      ? v.toExponential(digits)\n      : v.toFixed(digits);\n  } else {\n    return v + '';\n  }\n}","export default function(obj, fn, output = {}) {\n  for (const key in obj) {\n    output[key] = fn(obj[key], key);\n  }\n  return output;\n}","import formatValue from './value';\nimport { columns, formats, scan } from './util';\nimport isFunction from '../util/is-function';\nimport mapObject from '../util/map-object';\n\n/**\n * Options for HTML formatting.\n * @typedef {Object} HTMLOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {string[]} [columns] Ordered list of column names to print.\n * @property {Object} [align] Object of column alignment options.\n *  The object keys should be column names. The object values should be\n *  aligment strings, one of 'l' (left), 'c' (center), or 'r' (right).\n *  If specified, these override the automatically inferred options.\n * @property {Object} [format] Object of column format options.\n *  The object keys should be column names. The object values should be\n *  formatting functions or objects with any of the following properties.\n *  If specified, these override the automatically inferred options.\n *  - {string} date One of 'utc' or 'loc' (for UTC or local dates), or null for full date times.\n *  - {number} digits Number of significant digits to include for numbers.\n * @property {Object} [style] CSS styles to include in HTML output.\n *  The object keys should be HTML table tag names: 'table', 'thead',\n *  'tbody', 'tr', 'th', or 'td'. The object values should be strings of\n *  valid CSS style directives (such as \"font-weight: bold;\") or functions\n *  that take a column name and row as inputs and return a CSS string.\n */\n\n/**\n * Format a table as an HTML table string.\n * @param {ColumnTable} table The table to format.\n * @param {HTMLOptions} options The formatting options.\n * @return {string} An HTML table string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const { align, format } = formats(table, names, options);\n  const style = styles(options);\n\n  const alignValue = a => a === 'c' ? 'center' : a === 'r' ? 'right' : 'left';\n  const escape = s => s.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\n  let r = -1;\n  let idx = -1;\n\n  const tag = (tag, name) => {\n    const a = idx >= 0 && name ? alignValue(align[name]) : '';\n    const s = style[tag] ? (style[tag](name, idx, r) || '') : '';\n    const css = (a ? (`text-align: ${a};` + (s ? ' ' : '')) : '') + s;\n    return `<${tag}${css ? ` style=\"${css}\"` : ''}>`;\n  };\n\n  let text = tag('table')\n    + tag('thead')\n    + tag('tr', r)\n    + names.map(name => `${tag('th', name)}${name}</th>`).join('')\n    + '</tr></thead>'\n    + tag('tbody');\n\n  scan(table, names, options.limit, {\n    row(row) {\n      r = row;\n      text += (++idx ? '</tr>' : '') + tag('tr');\n    },\n    cell(value, name) {\n      text += tag('td', name)\n        + escape(formatValue(value, format[name]))\n        + '</td>';\n    }\n  });\n\n  return text + '</tr></tbody></table>';\n}\n\nfunction styles(options) {\n  return mapObject(\n    options.style,\n    value => isFunction(value) ? value : () => value\n  );\n}","import { columns, numRows } from './util';\nimport { formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\n\n/**\n * Options for JSON formatting.\n * @typedef {Object} JSONFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {string[]|Function} [columns] Ordered list of column names\n *  to include. If function-valued, the function should accept a table as\n *  input and return an array of column name strings.\n * @property {Object} [format] Object of column format options. The object\n *  keys should be column names. The object values should be formatting\n *  functions to invoke to transform column values prior to output. If\n *  specified, these override any automatically inferred options.\n */\n\nconst defaultFormatter = value => isDate(value)\n  ? formatUTCDate(value, true)\n  : value;\n\n/**\n * Format a table as a JavaScript Object Notation (JSON) string.\n * @param {ColumnTable} table The table to format.\n * @param {JSONFormatOptions} options The formatting options.\n * @return {string} A JSON string.\n */\nexport default function(table, options = {}) {\n  const limit = numRows(table, options.limit);\n  const names = columns(table, options.columns);\n  const format = options.format || {};\n  let text = '{';\n\n  names.forEach((name, i) => {\n    text += (i ? ',' : '') + JSON.stringify(name) + ':[';\n\n    const column = table.column(name);\n    if (limit > 0) {\n      let r = 0;\n      const formatter = format[name] || defaultFormatter;\n      table.scan((row, data, stop) => {\n        const value = column.get(row);\n        text += (r ? ',' : '') + JSON.stringify(formatter(value));\n        if (++r >= limit) stop();\n      }, true);\n    }\n\n    text += ']';\n  });\n\n  return text + '}';\n}","export default function(list, args, code) {\n  return Function('_',\n    '\"use strict\"; const '\n    + list.map((_, i) => `_${i} = _[${i}]`).join(', ')\n    + `; return (${args}) => ${code};`\n  )(list);\n}","import unroll from './unroll';\n\nexport default function(table, names) {\n  names = names || table.columnNames();\n  return unroll(\n    names.map(name => table.column(name)),\n    'row',\n    '({' + names.map((_, i) => `${JSON.stringify(_)}:_${i}.get(row)`) + '})'\n  );\n}","import Column from './column';\nimport columnsFrom from './columns-from';\nimport Table from './table';\nimport { regroup, reindex } from './regroup';\nimport { numRows } from '../format/util';\nimport toCSV from '../format/to-csv';\nimport toHTML from '../format/to-html';\nimport toJSON from '../format/to-json';\nimport toMarkdown from '../format/to-markdown';\nimport arrayType from '../util/array-type';\nimport error from '../util/error';\nimport mapObject from '../util/map-object';\nimport rowObjectBuilder from '../util/row-object-builder';\n\n/**\n * Class representing a table backed by a named set of columns.\n */\nexport default class ColumnTable extends Table {\n\n  /**\n   * Create a new ColumnTable from existing input data.\n   * @param {*} values The backing table data values.\n   *  If array-valued, should be a list of JavaScript objects with\n   *  key-value properties for each column value.\n   *  If object- or Map-valued, a table with two columns (one for keys,\n   *  one for values) will be created.\n   *  If the input adheres to an Apache Arrow table (providing a schema\n   *  property with named fields and a getColumn method), the columns\n   *  exported by that object will be used directly.\n   * @param {string[]} [names] The named columns to include.\n   * @return {ColumnTable} A new ColumnTable instance.\n   */\n  static from(values, names) {\n    return new ColumnTable(columnsFrom(values, names));\n  }\n\n  constructor(columns, filter, group, order, params) {\n    mapObject(columns, Column.from, columns);\n    const names = Object.keys(columns);\n    const nrows = names.length ? columns[names[0]].length : 0;\n    super(names, nrows, columns, filter, group, order, params);\n  }\n\n  create({ data, filter, groups, order }) {\n    const f = filter\n      ? (this._filter ? this._filter.and(filter) : filter)\n      : filter !== undefined ? filter : this._filter;\n\n    return new ColumnTable(\n      data || this._data,\n      f,\n      groups !== undefined ? groups : regroup(this._group, filter && f),\n      order !== undefined ? order : this._order,\n      this._params\n    );\n  }\n\n  /**\n   * Get the backing set of columns for this table.\n   * @return {Object} Object of named column instances.\n   */\n  columns() {\n    return this._data;\n  }\n\n  /**\n   * Get the column instance with the given name.\n   * @param {string} name The column name.\n   * @return {Column} The named column, or undefined if does not exist.\n   */\n  column(name) {\n    return this._data[name];\n  }\n\n  /**\n   * Get the column instance at the given index position.\n   * @param {number} index The zero-based column index.\n   * @return {Column} The column, or undefined if does not exist.\n   */\n  columnAt(index) {\n    return this._data[this._names[index]];\n  }\n\n  /**\n   * Get the value for the given column and row.\n   * @param {string} name The column name.\n   * @param {number} row The row index.\n   * @return {*} The table value at (column, row).\n   */\n  get(name, row) {\n    return this._data[name].get(row);\n  }\n\n  /**\n   * Returns an accessor (\"getter\") function for a column. The returned\n   * function takes a row index as its single argument and returns the\n   * corresponding column value.\n   * @param {string} name The column name.\n   * @return {Function} The column getter function.\n   */\n  getter(name) {\n    const column = this.column(name);\n    return column\n      ? row => column.get(row)\n      : error(`Unrecognized column: ${name}`);\n  }\n\n  /**\n   * Returns an array of objects representing table rows.\n   * @param {ObjectsOptions} [options] The options for row object generation.\n   * @return {Array} An array of row objects.\n   */\n  objects(options = {}) {\n    const limit = numRows(this, options.limit);\n    if (limit <= 0) return [];\n    const tuples = Array(limit);\n    const create = rowObjectBuilder(this);\n\n    let r = 0;\n    this.scan((row, data, stop) => {\n      tuples[r] = create(row);\n      if (++r >= limit) stop();\n    }, true);\n\n    return tuples;\n  }\n\n  /**\n   * Returns an iterator over objects representing table rows.\n   * @return {Iterator} An iterator over row objects.\n   */\n  *[Symbol.iterator]() {\n    const create = rowObjectBuilder(this);\n    const n = this.numRows();\n\n    if (this.isOrdered() || this.isFiltered) {\n      const indices = this.indices();\n      for (let i = 0; i < n; ++i) {\n        yield create(indices[i]);\n      }\n    } else {\n      for (let i = 0; i < n; ++i) {\n        yield create(i);\n      }\n    }\n  }\n\n  /**\n   * Create a new fully-materialized instance of this table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {Table} A reified table.\n   */\n  reify(indices) {\n    const nrows = indices ? indices.length : this.numRows();\n    let data, groups;\n\n    if (!indices && !this.isOrdered()) {\n      if (!this.isFiltered()) {\n        return this; // data already reified\n      } else if (nrows === this.totalRows()) {\n        data = this.data(); // all rows pass filter, skip copy\n      }\n    }\n\n    if (!data) {\n      const scan = indices ? f => indices.forEach(f) : f => this.scan(f, true);\n      const names = this.columnNames();\n      const ncols = names.length;\n      data = {};\n\n      for (let i = 0; i < ncols; ++i) {\n        const name = names[i];\n        const prev = this.column(name);\n        const curr = data[name] = new (arrayType(prev))(nrows);\n        let r = -1;\n        scan(row => curr[++r] = prev.get(row));\n      }\n\n      if (this.isGrouped()) {\n        groups = reindex(this.groups(), scan, !!indices, nrows);\n      }\n    }\n\n    return this.create({ data, groups, filter: null, order: null });\n  }\n\n  /**\n   * Format this table as a comma-separated values (CSV) string. Other\n   * delimiters, such as tabs or pipes ('|'), can be specified using\n   * the options argument.\n   * @param {CSVFormatOptions} options The formatting options.\n   * @return {string} A delimited-value format string.\n   */\n  toCSV(options) {\n    return toCSV(this, options);\n  }\n\n  /**\n   * Format this table as an HTML table string.\n   * @param {HTMLOptions} options The formatting options.\n   * @return {string} An HTML table string.\n   */\n  toHTML(options) {\n    return toHTML(this, options);\n  }\n\n  /**\n   * Format this table as a JavaScript Object Notation (JSON) string.\n   * @param {JSONFormatOptions} options The formatting options.\n   * @return {string} A JSON string.\n   */\n  toJSON(options) {\n    return toJSON(this, options);\n  }\n\n  /**\n   * Format this table as a GitHub-Flavored Markdown table string.\n   * @param {MarkdownOptions} options The formatting options.\n   * @return {string} A GitHub-Flavored Markdown table string.\n   */\n  toMarkdown(options) {\n    return toMarkdown(this, options);\n  }\n}","/**\n * Regroup table rows in response to a BitSet filter.\n * @param {GroupBySpec} groups The current groupby specification.\n * @param {BitSet} filter The filter to apply.\n */\nexport function regroup(groups, filter) {\n  if (!groups || !filter) return groups;\n\n  // check for presence of rows for each group\n  const { keys, rows, size } = groups;\n  const map = new Int32Array(size);\n  filter.scan(row => map[keys[row]] = 1);\n\n  // check sum, exit early if all groups occur\n  const sum = map.reduce((sum, val) => sum + val, 0);\n  if (sum === size) return groups;\n\n  // create group index map, filter exemplar rows\n  const _rows = Array(sum);\n  let _size = 0;\n  for (let i = 0; i < size; ++i) {\n    if (map[i]) _rows[map[i] = _size++] = rows[i];\n  }\n\n  // re-index the group keys\n  const _keys = new Uint32Array(keys.length);\n  filter.scan(row => _keys[row] = map[keys[row]]);\n\n  return { ...groups, keys: _keys, rows: _rows, size: _size };\n}\n\n/**\n * Regroup table rows in response to a re-indexing.\n * This operation may or may not involve filtering of rows.\n * @param {GroupBySpec} groups The current groupby specification.\n * @param {Function} scan Function to scan new row indices.\n * @param {boolean} filter Flag indicating if filtering may occur.\n * @param {number} nrows The number of rows in the new table.\n */\nexport function reindex(groups, scan, filter, nrows) {\n  const { keys, rows, size } = groups;\n  let _rows = rows;\n  let _size = size;\n  let map = null;\n\n  if (filter) {\n    // check for presence of rows for each group\n    map = new Int32Array(size);\n    scan(row => map[keys[row]] = 1);\n\n    // check sum, regroup if not all groups occur\n    const sum = map.reduce((sum, val) => sum + val, 0);\n    if (sum !== size) {\n      // create group index map, filter exemplar rows\n      _rows = Array(sum);\n      _size = 0;\n      for (let i = 0; i < size; ++i) {\n        if (map[i]) _rows[map[i] = _size++] = rows[i];\n      }\n    }\n  }\n\n  // re-index the group keys\n  let r = -1;\n  const _keys = new Uint32Array(nrows);\n  const fn = _size !== size\n    ? row => _keys[++r] = map[keys[row]]\n    : row => _keys[++r] = keys[row];\n  scan(fn);\n\n  return { ...groups, keys: _keys, rows: _rows, size: _size };\n}","import isTypedArray from './is-typed-array';\n\nexport default function(column) {\n  return isTypedArray(column.data) ? column.data.constructor\n    : column.type && column.type.ArrayType ? column.type.ArrayType\n    : Array;\n}","import { columns, scan } from './util';\nimport { formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\n\n/**\n * Options for CSV formatting.\n * @typedef {Object} CSVFormatOptions\n * @property {string} [delimiter=','] The delimiter between values.\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {string[]|Function} [columns] Ordered list of column names\n *  to include. If function-valued, the function should accept a table as\n *  input and return an array of column name strings.\n * @property {Object} [format] Object of column format options.\n *  The object keys should be column names. The object values should be\n *  formatting functions to invoke to transform column values prior to output.\n *  If specified, these override any automatically inferred options.\n */\n\n/**\n * Format a table as a comma-separated values (CSV) string. Other\n * delimiters, such as tabs or pipes ('|'), can be specified using\n * the options argument.\n * @param {ColumnTable} table The table to format.\n * @param {CSVFormatOptions} options The formatting options.\n * @return {string} A delimited-value format string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const format = options.format || {};\n  const delim = options.delimiter || ',';\n  const reFormat = new RegExp(`[\"${delim}\\n\\r]`);\n\n  const formatValue = value => value == null ? ''\n    : isDate(value) ? formatUTCDate(value, true)\n    : reFormat.test(value += '') ? '\"' + value.replace(/\"/g, '\"\"') + '\"'\n    : value;\n\n  const vals = names.map(formatValue);\n  let text = '';\n\n  scan(table, names, options.limit, {\n    row() {\n      text += vals.join(delim) + '\\n';\n    },\n    cell(value, name, index) {\n      vals[index] = formatValue(format[name] ? format[name](value) : value);\n    }\n  });\n\n  return text + vals.join(delim);\n}","import formatValue from './value';\nimport { columns, formats, scan } from './util';\n\n/**\n * Options for Markdown formatting.\n * @typedef {Object} MarkdownOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {string[]} [columns] Ordered list of column names to print.\n * @property {Object} [align] Object of column alignment options.\n *  The object keys should be column names. The object values should be\n *  aligment strings, one of 'l' (left), 'c' (center), or 'r' (right).\n *  If specified, these override the automatically inferred options.\n * @property {Object} [format] Object of column format options.\n *  The object keys should be column names. The object values should be\n *  formatting functions or objects with any of the following properties.\n *  If specified, these override the automatically inferred options.\n *  - {string} date One of 'utc' or 'loc' (for UTC or local dates), or null for full date times.\n *  - {number} digits Number of significant digits to include for numbers.\n */\n\n/**\n * Format a table as a GitHub-Flavored Markdown table string.\n * @param {ColumnTable} table The table to format.\n * @param {MarkdownOptions} options The formatting options.\n * @return {string} A GitHub-Flavored Markdown table string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const { align, format } = formats(table, names, options);\n\n  const alignValue = a => a === 'c' ? ':-:' : a === 'r' ? '-:' : ':-';\n  const escape = s => s.replace(/\\|/g, '\\\\|');\n\n  let text = '|'\n    + names.map(escape).join('|')\n    + '|\\n|'\n    + names.map(name => alignValue(align[name])).join('|')\n    + '|';\n\n  scan(table, names, options.limit, {\n    row() {\n      text += '\\n|';\n    },\n    cell(value, name) {\n      text += escape(formatValue(value, format[name])) + '|';\n    }\n  });\n\n  return text + '\\n';\n}","// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n  // (2019), 11 (2020), 12 (2021), or `\"latest\"` (the latest version\n  // the library supports). This influences support for strict mode,\n  // the set of reserved words, and support for new syntax features.\n  ecmaVersion: null,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === \"latest\") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = {};\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },inNonArrowFunction: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\nprototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\nprototypeAccessors.inNonArrowFunction.get = function () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91) { return true } // '['\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock(true, node)\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (this.options.ecmaVersion > 10 && starttype === types._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this.type === types._case || this.type === types._default) {\n      var isCase = this.type === types._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var isForIn = this.type === types._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (this.type !== types.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassElement = function(constructorAllowsSuper) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  var allowsDirectSuper = false;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n    allowsDirectSuper = constructorAllowsSuper;\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  if (this.type === types.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseIdent(true);\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseIdent(true);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    this.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLValSimple(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLValSimple(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types.comma); }\n    if (allowEmpty && this.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\n\npp$2.checkLValSimple = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ParenthesizedExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n    return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n  default:\n    this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\npp$2.checkLValPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n    }\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr, bindingType, checkClashes);\n  }\n};\n\npp$2.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLValPattern(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLValPattern(expr.argument, bindingType, checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr, bindingType, checkClashes);\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0)\n            { refDestructuringErrors.doubleProto = key.start; }\n          // Backwards-compat kludge. Can be removed in version 6.0\n        } else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(noIn) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    if (this.type === types.eq)\n      { left = this.toAssignable(left, false, refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var coalesce = this.type === types.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types.coalesce) || (coalesce && (this.type === types.logicalOR || this.type === types.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types.bracketL);\n  if (computed || (optional && this.type !== types.parenL && this.type !== types.backQuote) || this.eat(types.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n    node.computed = !!computed;\n    if (computed) { this.expect(types.bracketR); }\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  case types._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types.parenL:\n    return this.parseDynamicImport(node)\n  case types.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types.comma) && this.eat(types.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$3.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\")\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types.parenR) {\n      first ? first = false : this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.inNonArrowFunction)\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types.comma)\n      { elt = null; }\n    else if (this.type === types.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function(noIn) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign(noIn);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$5.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$5.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$5.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$5.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$5.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\npp$6.copyNode = function(node) {\n  var newNode = new Node(this, node.start, this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types._const || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types._else &&\n      !(prevType === types.semi && this.curContext() !== types$1.p_stat) &&\n      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties,\n  12: ecma12BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues,\n  12: ecma12ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\nbuildUnicodeData(9);\nbuildUnicodeData(10);\nbuildUnicodeData(11);\nbuildUnicodeData(12);\n\nvar pp$8 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 12 ? 12 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$8.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$8.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$8.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$8.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$8.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$8.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$8.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$8.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$8.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$8.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$8.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$8.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$8.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$8.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$8.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$8.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$8.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$8.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$8.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$8.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$8.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$8.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$8.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$8.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!has(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$8.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$8.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$8.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$8.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$8.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$8.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$8.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$8.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$8.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$9 = Parser.prototype;\n\n// Move to the next token\n\npp$9.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$9.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$9[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$9.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$9.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$9.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$9.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$9.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$9.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$9.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$9.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$9.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$9.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$9.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$9.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$9.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$9.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$9.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$9.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$9.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types.assign, 3) }\n      }\n      return this.finishOp(types.coalesce, 2)\n    }\n  }\n  return this.finishOp(types.question, 1)\n};\n\npp$9.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n};\n\npp$9.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$9.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp$9.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$9.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$9.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString$1(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$9.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$9.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$9.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$9.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$9.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$9.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString$1(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1,\n        \"Invalid escape sequence\"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$9.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$9.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString$1(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$9.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"8.0.4\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types,\n  keywordTypes: keywords$1,\n  TokContext: TokContext,\n  tokContexts: types$1,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords$1 as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types$1 as tokContexts, types as tokTypes, tokenizer, version };\n//# sourceMappingURL=acorn.mjs.map\n","export const ArrowFunctionExpression = 'ArrowFunctionExpression';\nexport const FunctionExpression = 'FunctionExpression';\nexport const Identifier = 'Identifier';\nexport const Literal = 'Literal';\nexport const MemberExpression = 'MemberExpression';\nexport const ObjectPattern = 'ObjectPattern';\nexport const Property = 'Property';\n\nexport const Column = 'Column';\nexport const Constant = 'Constant';\nexport const Function = 'Function';\nexport const Parameter = 'Parameter';\nexport const OpLookup = 'OpLookup';","export default function walk(node, ctx, visitors, parent) {\n  const visit = visitors[node.type] || visitors['Default'];\n  if (visit && visit(node, ctx, parent) === false) return;\n\n  const walker = walkers[node.type];\n  if (walker) walker(node, ctx, visitors);\n}\n\nconst unary = (node, ctx, visitors) => {\n  walk(node.argument, ctx, visitors, node);\n};\n\nconst binary = (node, ctx, visitors) => {\n  walk(node.left, ctx, visitors, node);\n  walk(node.right, ctx, visitors, node);\n};\n\nconst ternary = (node, ctx, visitors) => {\n  walk(node.test, ctx, visitors, node);\n  walk(node.consequent, ctx, visitors, node);\n  if (node.alternate) walk(node.alternate, ctx, visitors, node);\n};\n\nconst func = (node, ctx, visitors) => {\n  list(node.params, ctx, visitors, node);\n  walk(node.body, ctx, visitors, node);\n};\n\nconst call = (node, ctx, visitors) => {\n  walk(node.callee, ctx, visitors, node);\n  list(node.arguments, ctx, visitors, node);\n};\n\nconst list = (nodes, ctx, visitors) => {\n  nodes.forEach(node => walk(node, ctx, visitors, node));\n};\n\nconst walkers = {\n  TemplateLiteral: (node, ctx, visitors) => {\n    list(node.expressions, ctx, visitors, node);\n    list(node.quasis, ctx, visitors, node);\n  },\n  MemberExpression: (node, ctx, visitors) => {\n    walk(node.object, ctx, visitors, node, 'object');\n    walk(node.property, ctx, visitors, node, 'property');\n  },\n  CallExpression: call,\n  NewExpression: call,\n  ArrayExpression: (node, ctx, visitors) => {\n    list(node.elements, ctx, visitors, node);\n  },\n  AssignmentExpression: binary,\n  AwaitExpression: unary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: unary,\n  UpdateExpression: unary,\n  ConditionalExpression: ternary,\n  ObjectExpression: (node, ctx, visitors) => {\n    list(node.properties, ctx, visitors, node);\n  },\n  Property: (node, ctx, visitors) => {\n    walk(node.key, ctx, visitors, node);\n    walk(node.value, ctx, visitors, node);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  VariableDeclaration: (node, ctx, visitors) => {\n    list(node.declarations, ctx, visitors, node);\n  },\n  VariableDeclarator: (node, ctx, visitors) => {\n    walk(node.id, ctx, visitors, node);\n    walk(node.init, ctx, visitors, node);\n  },\n  SpreadElement: (node, ctx, visitors) => {\n    walk(node.argument, ctx, visitors, node);\n  },\n\n  BlockStatement: (node, ctx, visitors) => {\n    list(node.body, ctx, visitors, node);\n  },\n  ExpressionStatement: (node, ctx, visitors) => {\n    walk(node.expression, ctx, visitors, node);\n  },\n  IfStatement: ternary,\n  ForStatement: (node, ctx, visitors) => {\n    walk(node.init, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n    walk(node.update, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  WhileStatement: (node, ctx, visitors) => {\n    walk(node.test, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  DoWhileStatement: (node, ctx, visitors) => {\n    walk(node.body, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n  },\n  SwitchStatement: (node, ctx, visitors) => {\n    walk(node.discriminant, ctx, visitors, node);\n    list(node.cases, ctx, visitors, node);\n  },\n  SwitchCase: (node, ctx, visitors) => {\n    if (node.test) walk(node.test, ctx, visitors, node);\n    list(node.consequent, ctx, visitors, node);\n  },\n  ReturnStatement: unary,\n\n  Program: (node, ctx, visitors) => {\n    walk(node.body[0], ctx, visitors, node);\n  }\n};","import walk from './walk';\n\nfunction strip(node) {\n  delete node.start;\n  delete node.end;\n  delete node.optional;\n}\n\nfunction stripMember(node) {\n  strip(node);\n  delete node.object;\n  delete node.property;\n  delete node.computed;\n  if (!node.table) delete node.table;\n}\n\nexport default function(ast) {\n  walk(ast, null, {\n    Column: stripMember,\n    Constant: stripMember,\n    Default: strip\n  });\n  return ast;\n}","const visit = (node, opt) => {\n  return visitors[node.type](node, opt);\n};\n\nconst binary = (node, opt) => {\n  return '(' + visit(node.left, opt) + node.operator + visit(node.right, opt) + ')';\n};\n\nconst func = (node, opt) => {\n  return '(' + list(node.params, opt) + ')=>' + visit(node.body, opt);\n};\n\nconst call = (node, opt) => {\n  return visit(node.callee, opt) + '(' + list(node.arguments, opt) + ')';\n};\n\nconst list = (array, opt, delim=',') => {\n  return array.map(node => visit(node, opt)).join(delim);\n};\n\nconst visitors = {\n  Column: (node, opt) => {\n    const column = node.computed\n      ? `[${JSON.stringify(node.name)}]`\n      : `.${node.name}`;\n    const table = node.table || '';\n    const row = `.get(${opt.index}${table})`;\n    return `data${table}${column}${row}`;\n  },\n  Constant: node => node.raw,\n  Function: node => `fn.${node.name}`,\n  Parameter: node => {\n    const param = node.computed\n      ? `[${JSON.stringify(node.name)}]`\n      : `.${node.name}`;\n    return `$${param}`;\n  },\n  OpLookup: (node, opt) => {\n    const d = !node.computed;\n    const o = (opt.op || node.object.name) + (node.index || '');\n    const p = visit(node.property, opt);\n    return o + (d ? '.' + p : '[' + p + ']');\n  },\n  Literal: node => node.raw,\n  Identifier: node => node.name,\n  TemplateLiteral: (node, opt) => {\n    const { quasis, expressions } = node;\n    const n = expressions.length;\n    let t = quasis[0].value.raw ;\n    for (let i = 0; i < n;) {\n      t += '${' + visit(expressions[i], opt) + '}' + quasis[++i].value.raw;\n    }\n    return '`' + t + '`';\n  },\n  MemberExpression: (node, opt) => {\n    const d = !node.computed;\n    const o = visit(node.object, opt);\n    const p = visit(node.property, opt);\n    return o + (d ? '.' + p : '[' + p + ']');\n  },\n  CallExpression: call,\n  NewExpression: (node, opt) => {\n    return 'new ' + call(node, opt);\n  },\n  ArrayExpression: (node, opt) => {\n    return '[' + list(node.elements, opt) + ']';\n  },\n  AssignmentExpression: binary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: (node, opt) => {\n    return '(' + node.operator + visit(node.argument, opt) + ')';\n  },\n  ConditionalExpression: (node, opt) => {\n    return '(' + visit(node.test, opt) +\n      '?' + visit(node.consequent, opt) +\n      ':' + visit(node.alternate, opt) + ')';\n  },\n  ObjectExpression: (node, opt) => {\n    return '({' + list(node.properties, opt) + '})';\n  },\n  Property: (node, opt) => {\n    return visit(node.key, opt) + ':' + visit(node.value, opt);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  ObjectPattern: (node, opt) => {\n    return '{' + list(node.properties, opt) + '}';\n  },\n  VariableDeclaration: (node, opt) => {\n    return node.kind + ' ' + list(node.declarations, opt, ',');\n  },\n  VariableDeclarator: (node, opt) => {\n    return visit(node.id, opt) + '=' + visit(node.init, opt);\n  },\n  SpreadElement: (node, opt) => {\n    return '...' + visit(node.argument, opt);\n  },\n\n  BlockStatement: (node, opt) => {\n    return '{' + list(node.body, opt, ';') + ';}';\n  },\n  BreakStatement: () => {\n    return 'break';\n  },\n  ExpressionStatement: (node, opt) => {\n    return visit(node.expression, opt);\n  },\n  IfStatement: (node, opt) => {\n    return 'if (' + visit(node.test, opt) + ')'\n      + visit(node.consequent, opt)\n      + (node.alternate ? ' else ' + visit(node.alternate, opt) : '');\n  },\n  SwitchStatement: (node, opt) => {\n    return 'switch (' + visit(node.discriminant, opt) + ') {'\n     + list(node.cases, opt, '')\n     + '}';\n  },\n  SwitchCase: (node, opt) => {\n    return (node.test ? 'case ' + visit(node.test, opt) : 'default')\n      + ': '\n      + list(node.consequent, opt, ';') + ';';\n  },\n  ReturnStatement: (node, opt) => {\n    return 'return ' + visit(node.argument, opt);\n  },\n  Program: (node, opt) => visit(node.body[0], opt)\n};\n\nexport default function(node, opt = { index: 'row' }) {\n  return visit(node, opt);\n}","export default function() {}","import bins from '../util/bins';\nimport noop from '../util/no-op';\nimport product from '../util/product';\n\n/**\n * Initialize an aggregate operator.\n */\nfunction initOp(op) {\n  op.init = op.init || noop;\n  op.add = op.add || noop;\n  op.rem = op.rem || noop;\n  return op;\n}\n\n/**\n * Initialize an aggregate operator.\n * @callback AggregateInit\n * @param {Object} state The aggregate state object.\n * @return {void}\n */\n\n/**\n * Add a value to an aggregate operator.\n * @callback AggregateAdd\n * @param {Object} state The aggregate state object.\n * @param {*} value The value to add.\n * @return {void}\n */\n\n/**\n * Remove a value from an aggregate operator.\n * @callback AggregateRem\n * @param {Object} state The aggregate state object.\n * @param {*} value The value to remove.\n * @return {void}\n */\n\n/**\n * Retrive an output value from an aggregate operator.\n * @callback AggregateValue\n * @param {Object} state The aggregate state object.\n * @return {*} The output value.\n */\n\n/**\n * An operator instance for an aggregate function.\n * @typedef {Object} AggregateOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateAdd} add Add a value to the operator state.\n * @property {AggregateRem} rem Remove a value from the operator state.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new aggregate operator instance.\n * @callback AggregateCreate\n * @param {...any} [params] The aggregate operator parameters.\n * @return {AggregateOperator} The instantiated aggregate operator.\n */\n\n/**\n * An operator definition for an aggregate function.\n * @typedef {Object} AggregateDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n * @property {string[]} [req] Names of operators required by this one.\n * @property {string[]} [stream] Names of operators required by this one\n *  for streaming operations (value removes).\n */\n\n/**\n * Aggregate operator definitions.\n */\nexport default {\n  /** @type {AggregateDef} */\n  count: {\n    create: () => initOp({\n      value: s => s.count\n    }),\n    param: []\n  },\n\n  /** @type {AggregateDef} */\n  values: {\n    create: () => initOp({\n      init: s => s.values = true,\n      value: s => s.list.values()\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  any: {\n    create: () => initOp({\n      add: (s, v) => { if (s.any == null) s.any = v; },\n      value: s => s.valid ? s.any : undefined\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  valid: {\n    create: () => initOp({\n      value: s => s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  invalid: {\n    create: () => initOp({\n      value: s => s.count - s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  distinct: {\n    create: () => ({\n      init: s => {\n        s.counts = new Map();\n        s.distinct = 0;\n      },\n      value: s => s.distinct + (s.valid === s.count ? 0 : 1),\n      add: (s, v) => {\n        const count = s.counts.get(v) || -1;\n        s.counts.set(v, count + 1);\n        if (count < 0) ++s.distinct;\n      },\n      rem: (s, v) => {\n        const count = s.counts.get(v);\n        if (count === 1) {\n          --s.distinct;\n          s.counts.delete(v);\n        } else {\n          s.counts.set(v, count - 1);\n        }\n      }\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  unique: {\n    create: () => initOp({\n      value: s => Array.from(s.counts.keys())\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  mode: {\n    create: () => initOp({\n      value: s => {\n        let mode = undefined;\n        let max = 0;\n        for (const [value, count] of s.counts) {\n          if (count > max) {\n            max = count;\n            mode = value;\n          }\n        }\n        return mode;\n      }\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  sum: {\n    create: () => ({\n      init:  s => s.sum = 0,\n      value: s => s.sum,\n      add: (s, v) => s.sum += +v,\n      rem: (s, v) => s.sum -= v\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  product: {\n    create: () => ({\n      init:  s => s.product = 1,\n      value: s => s.valid\n        ? s.product = (Number.isNaN(s.product) ? product(s.list.values()) : s.product)\n        : undefined,\n      add: (s, v) => s.product *= v,\n      rem: (s, v) => s.product /= v\n    }),\n    param: [1],\n    stream: ['values']\n  },\n\n  /** @type {AggregateDef} */\n  mean: {\n    create: () => ({\n      init: s => s.mean = 0,\n      value: s => s.valid ? s.mean : undefined,\n      add: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean += s.mean_d / s.valid;\n      },\n      rem: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean -= s.valid ? s.mean_d / s.valid : s.mean;\n      }\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  average: {\n    create: () => initOp({\n      value: s => s.valid ? s.mean : undefined\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variance: {\n    create: () => ({\n      init:  s => s.dev = 0,\n      value: s => s.valid > 1 ? s.dev / (s.valid - 1) : undefined,\n      add: (s, v) => s.dev += s.mean_d * (v - s.mean),\n      rem: (s, v) => s.dev -= s.mean_d * (v - s.mean)\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.dev / s.valid : undefined\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdev: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / (s.valid - 1)) : undefined\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdevp: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / s.valid) : undefined\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  min: {\n    create: () => ({\n      init:  s => s.min = undefined,\n      value: s => s.min = (Number.isNaN(s.min) ? s.list.min() : s.min),\n      add: (s, v) => { if (v < s.min || s.min === undefined) s.min = v; },\n      rem: (s, v) => { if (v <= s.min) s.min = NaN; }\n    }),\n    param: [1],\n    stream: ['values']\n  },\n\n  /** @type {AggregateDef} */\n  max: {\n    create: () => ({\n      init:  s => s.max = undefined,\n      value: s => s.max = (Number.isNaN(s.max) ? s.list.max() : s.max),\n      add: (s, v) => { if (v > s.max || s.max === undefined) s.max = v; },\n      rem: (s, v) => { if (v >= s.max) s.max = NaN; }\n    }),\n    param: [1],\n    stream: ['values']\n  },\n\n  /** @type {AggregateDef} */\n  quantile: {\n    create: (p) => initOp({\n      value: s => s.list.quantile(p)\n    }),\n    param: [1, 1],\n    req: ['values']\n  },\n\n  /** @type {AggregateDef} */\n  median: {\n    create: () => initOp({\n      value: s => s.list.quantile(0.5)\n    }),\n    param: [1],\n    req: ['values']\n  },\n\n  /** @type {AggregateDef} */\n  covariance: {\n    create: () => ({\n      init:  s => {\n        s.cov = s.mean_x = s.mean_y = s.dev_x = s.dev_y = 0;\n      },\n      value: s => s.valid > 1 ? s.cov / (s.valid - 1) : undefined,\n      add: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x += dx / s.valid;\n        s.mean_y += dy / s.valid;\n        const dy2 = y - s.mean_y;\n        s.dev_x += dx * (x - s.mean_x);\n        s.dev_y += dy * dy2;\n        s.cov += dx * dy2;\n      },\n      rem: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x -= s.valid ? dx / s.valid : s.mean_x;\n        s.mean_y -= s.valid ? dy / s.valid : s.mean_y;\n        const dy2 = y - s.mean_y;\n        s.dev_x -= dx * (x - s.mean_x);\n        s.dev_y -= dy * dy2;\n        s.cov -= dx * dy2;\n      }\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  covariancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.cov / s.valid : undefined\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  corr: {\n    create: () => initOp({\n      value: s => s.valid > 1\n        ? s.cov / (Math.sqrt(s.dev_x) * Math.sqrt(s.dev_y))\n        : undefined\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  bins: {\n    create: (maxbins, nice, minstep) => initOp({\n      value: s => bins(s.min, s.max, maxbins, nice, minstep)\n    }),\n    param: [1, 3],\n    req: ['min', 'max']\n  }\n};","export default function(values, start = 0, stop = values.length) {\n  let prod = 1;\n\n  for (let i = start; i < stop; ++i) {\n    prod *= values[i];\n  }\n\n  return prod;\n}","export default function(min, max, maxbins = 15, nice = true, minstep = 0) {\n  const div = [5, 2];\n  const base = 10;\n  const logb = Math.LN10;\n  const level = Math.ceil(Math.log(maxbins) / logb);\n  const span = (max - min) || Math.abs(min) || 1;\n\n  let step = Math.max(\n    minstep,\n    Math.pow(base, Math.round(Math.log(span) / logb) - level)\n  );\n\n  // increase step size if too many bins\n  while (Math.ceil(span / step) > maxbins) {\n    step *= base;\n  }\n\n  // decrease step size if it stays within maxbins\n  const n = div.length;\n  for (let i = 0; i < n; ++i) {\n    const v = step / div[i];\n    if (v >= minstep && span / v <= maxbins) {\n      step = v;\n    }\n  }\n\n  // snap to \"nice\" boundaries\n  if (nice) {\n    let v = Math.log(step);\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n    const eps = Math.pow(base, -precision - 1);\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return [\n    min,\n    max === min ? min + step : max,\n    step\n  ];\n}","import error from '../util/error';\nimport noop from '../util/no-op';\n\n/**\n * Initialize a window operator.\n * @callback WindowInit\n * @return {void}\n */\n\n/**\n * Retrieve an output value from a window operator.\n * @callback WindowValue\n * @param {WindowState} state The window state object.\n * @return {*} The output value.\n */\n\n/**\n * An operator instance for a window function.\n * @typedef {Object} WindowOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new window operator instance.\n * @callback WindowCreate\n * @param {...any} [params] The aggregate operator parameters.\n * @return {WindowOperator} The instantiated window operator.\n */\n\n/**\n * An operator definition for a window function.\n * @typedef {Object} WindowDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n */\n\nconst rank = {\n  create() {\n    let rank;\n    return {\n      init: () => rank = 1,\n      value: w => {\n        const i = w.index;\n        return (i && !w.peer(i)) ? (rank = i + 1) : rank;\n      }\n    };\n  },\n  param: []\n};\n\nconst cume_dist = {\n  create() {\n    let cume;\n    return {\n      init: () => cume = 0,\n      value: w => {\n        const { index, peer, size } = w;\n        let i = index;\n        if (cume < i) {\n          while (i + 1 < size && peer(i + 1)) ++i;\n          cume = i;\n        }\n        return (1 + cume) / size;\n      }\n    };\n  },\n  param: []\n};\n\n/**\n * Window operator definitions.\n */\nexport default {\n  /** @type {WindowDef} */\n  row_number: {\n    create() {\n      return {\n        init: noop,\n        value: w => w.index + 1\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  rank,\n\n  /** @type {WindowDef} */\n  avg_rank: {\n    create() {\n      let j, rank;\n      return {\n        init: () => (j = -1, rank = 1),\n        value: w => {\n          const i = w.index;\n          if (i >= j) {\n            for (rank = j = i + 1; w.peer(j); rank += ++j);\n            rank /= (j - i);\n          }\n          return rank;\n        }\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  dense_rank: {\n    create() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        value: w => {\n          const i = w.index;\n          return (i && !w.peer(i)) ? ++drank : drank;\n        }\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  percent_rank: {\n    create() {\n      const { init, value } = rank.create();\n      return {\n        init,\n        value: w => (value(w) - 1) / (w.size - 1)\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  cume_dist,\n\n  /** @type {WindowDef} */\n  ntile: {\n    create(num) {\n      num = +num;\n      if (!(num > 0)) error('ntile num must be greater than zero.');\n      const { init, value } = cume_dist.create();\n      return {\n        init,\n        value: w => Math.ceil(num * value(w))\n      };\n    },\n    param: [0, 1]\n  },\n\n  /** @type {WindowDef} */\n  lag: {\n    create(offset, defaultValue) {\n      offset = +offset || 1;\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.index - offset;\n          return i >= 0 ? w.value(i, f) : defaultValue;\n        }\n      };\n    },\n    param: [1, 2]\n  },\n\n  /** @type {WindowDef} */\n  lead: {\n    create(offset, defaultValue) {\n      offset = +offset || 1;\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.index + offset;\n          return i < w.size ? w.value(i, f) : defaultValue;\n        }\n      };\n    },\n    param: [1, 2]\n  },\n\n  /** @type {WindowDef} */\n  first_value: {\n    create() {\n      return {\n        init: noop,\n        value: (w, f) => w.value(w.i0, f)\n      };\n    },\n    param: [1]\n  },\n\n  /** @type {WindowDef} */\n  last_value: {\n    create() {\n      return {\n        init: noop,\n        value: (w, f) => w.value(w.i1 - 1, f)\n      };\n    },\n    param: [1]\n  },\n\n  /** @type {WindowDef} */\n  nth_value: {\n    create(nth) {\n      nth = +nth;\n      if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? w.value(i, f) : undefined;\n        }\n      };\n    },\n    param: [1, 1]\n  }\n};\n","export default function isValid(value) {\n  return value != null && value === value;\n}\n","import isValid from '../../util/is-valid';\n\nexport default {\n  concat:      (...values) => [].concat(...values),\n  join:        (array, delim) => array.join(delim),\n  includes:    (seq, value, index) => seq.includes(value, index),\n  indexof:     (seq, value) => seq.indexOf(value),\n  lastindexof: (seq, value) => seq.lastIndexOf(value),\n  length:      (seq) => seq.length,\n  pluck:       (array, property) => array.map(v => isValid(v)? v[property] : undefined),\n  slice:       (seq, start, end) => seq.slice(start, end),\n  reverse:     (array) => array.slice().reverse()\n};","const iso_re = /^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/;\n\nconst fix_tz = new Date('2019-01-01T00:00').getHours()\n            || new Date('2019-07-01T00:00').getHours();\n\nexport default function(value, parse = Date.parse) {\n  const m = value.match(iso_re);\n  if (m) {\n    if (fix_tz && !!m[4] && !m[7]) {\n      value = value.replace(/-/g, '/').replace(/T/, ' ');\n    }\n    value = parse(value);\n  }\n  return value;\n}","import { formatDate, formatUTCDate } from '../../util/format-date';\nimport parseIsoDate from '../../util/parse-iso-date';\n\nconst msMinute = 6e4;\nconst msDay = 864e5;\nconst msWeek = 6048e5;\n\nconst t0 = new Date();\nconst t1 = new Date();\nconst t = d => (\n  t0.setTime(typeof d === 'string' ? parseIsoDate(d) : d),\n  t0\n);\n\n/**\n * Function to create a new Date value.\n * If no arguments are provided, the current time is used.\n * @param {number} [year] The year.\n * @param {number} [month=0] The (zero-based) month.\n * @param {number} [date=1] The date within the month.\n * @param {number} [hours=0] The hour within the day.\n * @param {number} [minutes=0] The minute within the hour.\n * @param {number} [seconds=0] The second within the minute.\n * @param {number} [milliseconds=0] The milliseconds within the second.\n * @return {date} The resuting Date value.\n */\nfunction datetime(year, month, date, hours, minutes, seconds, milliseconds) {\n  return !arguments.length\n    ? new Date(Date.now())\n    : new Date(\n        year,\n        month || 0,\n        date == null ? 1 : date,\n        hours || 0,\n        minutes || 0,\n        seconds || 0,\n        milliseconds || 0\n      );\n}\n\n/**\n * Function to create a new Date value according to UTC time.\n * If no arguments are provided, the current time is used.\n * @param {number} [year] The year.\n * @param {number} [month=0] The (zero-based) month.\n * @param {number} [date=1] The date within the month.\n * @param {number} [hours=0] The hour within the day.\n * @param {number} [minutes=0] The minute within the hour.\n * @param {number} [seconds=0] The second within the minute.\n * @param {number} [milliseconds=0] The milliseconds within the second.\n * @return {date} The resuting Date value.\n */\nfunction utcdatetime(year, month, date, hours, minutes, seconds, milliseconds) {\n  return !arguments.length\n    ? new Date(Date.now())\n    : new Date(Date.UTC(\n        year,\n        month || 0,\n        date == null ? 1 : date,\n        hours || 0,\n        minutes || 0,\n        seconds || 0,\n        milliseconds || 0\n      ));\n}\n\nfunction dayofyear(date) {\n  t1.setTime(+date);\n  t1.setHours(0, 0, 0, 0);\n  t0.setTime(+t1);\n  t0.setMonth(0);\n  t0.setDate(1);\n  const tz = (t1.getTimezoneOffset() - t0.getTimezoneOffset()) * msMinute;\n  return Math.floor(1 + ((t1 - t0) - tz) / msDay);\n}\n\nfunction utcdayofyear(date) {\n  t1.setTime(+date);\n  t1.setUTCHours(0, 0, 0, 0);\n  const t0 = Date.UTC(t1.getUTCFullYear(), 0, 1);\n  return Math.floor(1 + (t1 - t0) / msDay);\n}\n\nfunction week(date, firstday) {\n  const i = firstday || 0;\n  t1.setTime(+date);\n  t1.setDate(t1.getDate() - (t1.getDay() + 7 - i) % 7);\n  t1.setHours(0, 0, 0, 0);\n  t0.setTime(+date);\n  t0.setMonth(0);\n  t0.setDate(1);\n  t0.setDate(1 - (t0.getDay() + 7 - i) % 7);\n  t0.setHours(0, 0, 0, 0);\n  const tz = (t1.getTimezoneOffset() - t0.getTimezoneOffset()) * msMinute;\n  return Math.floor((1 + (t1 - t0) - tz) / msWeek);\n}\n\nfunction utcweek(date, firstday) {\n  const i = firstday || 0;\n  t1.setTime(+date);\n  t1.setUTCDate(t1.getUTCDate() - (t1.getUTCDay() + 7 - i) % 7);\n  t1.setUTCHours(0, 0, 0, 0);\n  t0.setTime(+date);\n  t0.setUTCMonth(0);\n  t0.setUTCDate(1);\n  t0.setUTCDate(1 - (t0.getUTCDay() + 7 - i) % 7);\n  t0.setUTCHours(0, 0, 0, 0);\n  return Math.floor((1 + (t1 - t0)) / msWeek);\n}\n\nexport default {\n  format_date:     (date, shorten) => formatDate(t(date), !shorten),\n  format_utcdate:  (date, shorten) => formatUTCDate(t(date), !shorten),\n  timestamp:       (date) => +t(date),\n  year:            (date) => t(date).getFullYear(),\n  quarter:         (date) => Math.floor(t(date).getMonth() / 3),\n  month:           (date) => t(date).getMonth(),\n  date:            (date) => t(date).getDate(),\n  dayofweek:       (date) => t(date).getDay(),\n  hours:           (date) => t(date).getHours(),\n  minutes:         (date) => t(date).getMinutes(),\n  seconds:         (date) => t(date).getSeconds(),\n  milliseconds:    (date) => t(date).getMilliseconds(),\n  utcyear:         (date) => t(date).getUTCFullYear(),\n  utcquarter:      (date) => Math.floor(t(date).getUTCMonth() / 3),\n  utcmonth:        (date) => t(date).getUTCMonth(),\n  utcdate:         (date) => t(date).getUTCDate(),\n  utcdayofweek:    (date) => t(date).getUTCDay(),\n  utchours:        (date) => t(date).getUTCHours(),\n  utcminutes:      (date) => t(date).getUTCMinutes(),\n  utcseconds:      (date) => t(date).getUTCSeconds(),\n  utcmilliseconds: (date) => t(date).getUTCMilliseconds(),\n  datetime,\n  dayofyear,\n  week,\n  utcdatetime,\n  utcdayofyear,\n  utcweek,\n  now: Date.now\n};","import isDate from '../../util/is-date';\nimport isRegExp from '../../util/is-regexp';\nimport isObject from '../../util/is-object';\n\n/**\n * Compare two values for equality, using join semantics in which null\n * !== null. If the inputs are object-valued, a deep equality check\n * of array entries or object key-value pairs is performed.\n * @param {*} a The first input.\n * @param {*} b The second input.\n * @return {boolean} True if equal, false if not.\n */\nexport default function equal(a, b) {\n  return (a == null || b == null || a !== a || b !== b) ? false\n    : a === b ? true\n    : (isDate(a) || isDate(b)) ? +a === +b\n    : (isRegExp(a) && isRegExp(b)) ? a + '' === b + ''\n    : (isObject(a) && isObject(b)) ? deepEqual(a, b)\n    : false;\n}\n\nfunction deepEqual(a, b) {\n  if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) {\n    return false;\n  }\n\n  if (a.length || b.length) {\n    return arrayEqual(a, b);\n  }\n\n  const keysA = Object.keys(a);\n  const keysB = Object.keys(b);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  keysA.sort();\n  keysB.sort();\n\n  if (!arrayEqual(keysA, keysB, (a, b) => a === b)) {\n    return false;\n  }\n\n  const n = keysA.length;\n  for (let i = 0; i < n; ++i) {\n    const k = keysA[i];\n    if (!equal(a[k], b[k])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayEqual(a, b, test = equal) {\n  const n = a.length;\n  if (n !== b.length) return false;\n\n  for (let i = 0; i < n; ++i) {\n    if (!test(a[i], b[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}","import isValid from './is-valid';\n\nlet source = Math.random;\n\nexport function random() {\n  return source();\n}\n\n/**\n * Set a seed value for random number generation.\n * If the seed is a valid number, a 32-bit linear congruential generator\n * with the given seed will be used to generate random values.\n * If the seed is null, undefined, or not a valid number, the random\n * number generator will revert to Math.random.\n * @param {number} seed The random seed value. Should either be an\n *  integer or a fraction between 0 and 1.\n */\nexport function seed(seed) {\n  source = isValid(seed) && isFinite(seed = +seed) ? lcg(seed) : Math.random;\n}\n\nfunction lcg(seed) {\n  const a = 0x19660D;\n  const c = 0x3C6EF35F;\n  const m = 1 / 0x100000000;\n  seed = (0 <= seed && seed < 1 ? seed / m : Math.abs(seed)) | 0;\n\n  // Random numbers using a Linear Congruential Generator with seed value\n  // https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return () => (seed = a * seed + c | 0, m * (seed >>> 0));\n}","import { random } from '../../util/random';\n\nexport default {\n  random,\n  is_nan:    Number.isNaN,\n  is_finite: Number.isFinite,\n\n  abs:      Math.abs,\n  cbrt:     Math.cbrt,\n  ceil:     Math.ceil,\n  clz32:    Math.clz32,\n  exp:      Math.exp,\n  expm1:    Math.expm1,\n  floor:    Math.floor,\n  fround:   Math.fround,\n  log:      Math.log,\n  log10:    Math.log10,\n  log1p:    Math.log1p,\n  log2:     Math.log2,\n  max:      Math.max,\n  min:      Math.min,\n  pow:      Math.pow,\n  round:    Math.round,\n  sign:     Math.sign,\n  sqrt:     Math.sqrt,\n  trunc:    Math.trunc,\n\n  degrees:  (rad) => 180 * rad / Math.PI,\n  radians:  (deg) => Math.PI * deg / 180,\n  acos:     Math.acos,\n  acosh:    Math.acosh,\n  asin:     Math.asin,\n  asinh:    Math.asinh,\n  atan:     Math.atan,\n  atan2:    Math.atan2,\n  atanh:    Math.atanh,\n  cos:      Math.cos,\n  cosh:     Math.cosh,\n  sin:      Math.sin,\n  sinh:     Math.sinh,\n  tan:      Math.tan,\n  tanh:     Math.tanh\n};","const { hasOwnProperty } = Object.prototype;\n\nexport default function(object, property) {\n  return hasOwnProperty.call(object, property);\n}","import array from './array';\nimport bin from './bin';\nimport date from './date';\nimport equal from './equal';\nimport math from './math';\nimport object from './object';\nimport sequence from './sequence';\nimport string from './string';\n\nexport default {\n  bin,\n  equal,\n  sequence,\n  ...array,\n  ...date,\n  ...math,\n  ...object,\n  ...string\n};","/**\n * Truncate a value to a bin boundary.\n * Useful for creating equal-width histograms.\n * Values outside the [min, max] range will be mapped to\n * -Infinity (< min) or +Infinity (> max).\n * @param {number} value - The value to bin.\n * @param {number} min - The minimum bin boundary.\n * @param {number} max - The maximum bin boundary.\n * @param {number} step - The step size between bin boundaries.\n * @param {number} [offset=0] - Offset in steps by which to adjust\n *  the bin value. An offset of 1 will return the next boundary.\n */\nexport default function(value, min, max, step, offset) {\n  return value == null ? null\n    : value < min ? -Infinity\n    : value > max ? +Infinity\n    : (\n        value = Math.max(min, Math.min(value, max)),\n        min + step * Math.floor(1e-14 + (value - min) / step + (offset || 0))\n      );\n}","/**\n * Returns an array containing an arithmetic sequence from the start value\n * to the stop value, in step increments. If step is positive, the last\n * element is the largest start + i * step less than stop; if step is\n * negative, the last element is the smallest start + i * step greater\n * than stop. If the returned array would contain an infinite number of\n * values, an empty range is returned.\n * @param {number} [start=0] The starting value of the sequence.\n * @param {number} stop The stopping value of the sequence.\n *  The stop value is exclusive; it is not included in the result.\n * @param {number} [step=1] The step increment between sequence values.\n * @return {number[]} The generated sequence.\n */\nexport default function(start, stop, step) {\n  let n = arguments.length;\n  start = +start;\n  stop = +stop;\n  step = n < 2\n    ? (stop = start, start = 0, 1)\n    : n < 3 ? 1 : +step;\n\n  n = Math.max(0, Math.ceil((stop - start) / step)) | 0;\n  const seq = new Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    seq[i] = start + i * step;\n  }\n\n  return seq;\n}","import has from '../../util/has';\n\nexport default {\n  has:    (obj, property) => has(obj, property),\n  keys:   (obj) => Object.keys(obj),\n  values: (obj) => Object.values(obj)\n};","export default {\n  parse_date:  (str) => new Date(str),\n  parse_float: (str) => Number.parseFloat(str),\n  parse_int:   (str, radix) => Number.parseInt(str, radix),\n  endswith:    (str, search, length) => String(str).endsWith(search, length),\n  match:       (regexp, str) => regexp.test(str),\n  normalize:   (str, form) => String(str).normalize(form),\n  padend:      (str, len, fill) => String(str).padEnd(len, fill),\n  padstart:    (str, len, fill) => String(str).padStart(len, fill),\n  upper:       (str) => String(str).toUpperCase(),\n  lower:       (str) => String(str).toLowerCase(),\n  repeat:      (str, num) => String(str).repeat(num),\n  replace:     (str, pattern, replacement) => String(str).replace(pattern, String(replacement)),\n  substring:   (str, start, end) => String(str).substring(start, end),\n  split:       (str, separator, limit) => String(str).split(separator, limit),\n  startswith:  (str, search, length) => String(str).startsWith(search, length),\n  trim:        (str) => String(str).trim()\n};","import aggregateFunctions from './aggregate-functions';\nimport windowFunctions from './window-functions';\nimport functions from './functions';\nimport has from '../util/has';\n\nexport {\n  functions,\n  aggregateFunctions,\n  windowFunctions\n};\n\n/**\n * Check if an aggregate function with the given name exists.\n * @param {string} name The name of the aggregate function.\n * @return {boolean} True if found, false otherwise.\n */\nexport function isAggregate(name) {\n  return has(aggregateFunctions, name);\n}\n\n/**\n * Check if a window function with the given name exists.\n * @param {string} name The name of the window function.\n * @return {boolean} True if found, false otherwise.\n */\nexport function isWindow(name) {\n  return has(windowFunctions, name);\n}\n\n/**\n * Get an aggregate function definition.\n * @param {string} name The name of the aggregate function.\n * @return {AggregateDef} The aggregate function definition,\n *  or undefined if not found.\n */\nexport function getAggregate(name) {\n  return isAggregate(name) && aggregateFunctions[name];\n}\n\n/**\n * Get a window function definition.\n * @param {string} name The name of the window function.\n * @return {WindowDef} The window function definition,\n *  or undefined if not found.\n */\nexport function getWindow(name) {\n  return isWindow(name) && windowFunctions[name];\n}\n\n/**\n * Get an expression function definition.\n * @param {string} name The name of the function.\n * @return {Function} The function instance, or undefined if not found.\n */\nexport function getFunction(name) {\n  return has(functions, name) && functions[name];\n}","import { functions } from '../op';\n\nfunction compile(code, params) {\n  code = `\"use strict\"; return ${code}`;\n  return (Function('fn', '$', code))(functions, params);\n}\n\nexport default {\n  expr:  (expr, params) => compile(`(row,data,op)=>${expr};`, params),\n  expr2: (expr, params) => compile(`(row0,data0,row,data)=>${expr};`, params),\n  join:  (expr, params) => compile(`(row1,data1,row2,data2)=>${expr};`, params),\n  param: (expr, params) => compile(expr, params)\n};","export default {\n  undefined: 'void(0)',\n  Infinity:  'Number.POSITIVE_INFINITY',\n  NaN:       'Number.NaN',\n  E:         'Math.E',\n  LN2:       'Math.LN2',\n  LN10:      'Math.LN10',\n  LOG2E:     'Math.LOG2E',\n  LOG10E:    'Math.LOG10E',\n  PI:        'Math.PI',\n  SQRT1_2:   'Math.SQRT1_2',\n  SQRT2:     'Math.SQRT2'\n};","import { parse } from 'acorn';\n\nimport {\n  ArrowFunctionExpression,\n  Column,\n  Constant,\n  Function,\n  FunctionExpression,\n  Identifier,\n  Literal,\n  MemberExpression,\n  ObjectPattern,\n  OpLookup,\n  Parameter,\n  Property\n} from './ast/constants';\nimport clean from './ast/clean';\nimport walk from './ast/walk';\n\nimport codegen from './codegen';\nimport compile from './compile';\nimport constants from './constants';\nimport { getAggregate, getFunction, getWindow, isAggregate, isWindow } from '../op';\nimport isFunction from '../util/is-function';\nimport has from '../util/has';\nimport error from '../util/error';\n\nconst PARSER_OPT = { ecmaVersion: 11 };\nconst DEFAULT_PARAM_ID = '$';\nconst DEFAULT_TUPLE_ID = 'd';\nconst DEFAULT_TUPLE_ID1 = 'd1';\nconst DEFAULT_TUPLE_ID2 = 'd2';\n\nconst is = (type, node) => node && node.type === type;\nconst isFunctionExpression = node =>\n  is(FunctionExpression, node) ||\n  is(ArrowFunctionExpression, node);\n\nexport default function(exprs, opt = {}) {\n  const generate = opt.generate || codegen;\n  const compiler = opt.compiler || compile;\n  const params = getParams(opt);\n  const fields = {};\n  const opcall = {};\n  const values = {};\n  let fieldId = 0;\n  let opId = -1;\n\n  const compileExpr = opt.join ? compiler.join\n    : opt.index == 1 ? compiler.expr2\n    : compiler.expr;\n\n  // parser context\n  const ctx = {\n    op(op) {\n      const key = `${op.name}(${op.fields.concat(op.params).join(',')})`;\n      return opcall[key] || (op.id = ++opId, opcall[key] = op);\n    },\n    field(node) {\n      const code = generate(node);\n      return fields[code] || (fields[code] = ++fieldId);\n    },\n    param(node) {\n      return is(Literal, node)\n        ? node.value\n        : compiler.param(generate(node), params);\n    },\n    value(name, node) {\n      values[name] = opt.ast\n        ? clean(node)\n        : compileExpr(generate(node), params);\n    },\n    error(msg, node) {\n      // both expresions and fields are parsed\n      // with added code prefixes of length 6!\n      const i = node.start - 6;\n      const j = node.end - 6;\n      const snippet = String(ctx.spec).slice(i, j);\n      error(`${msg}: \"${snippet}\"`);\n    }\n  };\n\n  // copy all options to context, potentially overwriting methods\n  Object.assign(ctx, opt, { params });\n\n  // parse each expression\n  for (const name in exprs) {\n    parseExpression(ctx, name, exprs[name]);\n  }\n\n  // return expression asts if requested\n  if (opt.ast) {\n    return values;\n  }\n\n  // compile input field accessors\n  const f = [];\n  for (const key in fields) {\n    f[fields[key]] = compiler.expr(key, params);\n  }\n\n  // resolve input fields to operations\n  const ops = Object.values(opcall);\n  ops.forEach(op => op.fields = op.fields.map(id => f[id]));\n\n  return { ops, values };\n}\n\nconst getParams = opt => {\n  return (opt.table ? getTableParams(opt.table)\n    : opt.join ? {\n        ...getTableParams(opt.join[1]),\n        ...getTableParams(opt.join[0])\n      }\n    : {}) || {};\n};\n\nconst getTableParams = table =>\n  table && isFunction(table.params) ? table.params() : {};\n\nconst fieldRef = expr => {\n  const col = JSON.stringify(expr+'');\n  return !(expr.table || 0) ? `d=>d[${col}]` : `(a,b)=>b[${col}]`;\n};\n\nconst functionName = (ctx, node) => is(Identifier, node) ? node.name\n  : is(MemberExpression, node) ? node.property.name\n  : null;\n\nconst parseError = msg => (node, ctx) => ctx.error(msg, node);\n\nfunction handleIdentifier(node, ctx, parent) {\n  const { name } = node;\n\n  if (is(MemberExpression, parent) && parent.property === node) {\n    // do nothing: check head node, not nested properties\n  } else if (is(Property, parent) && parent.key === node) {\n    // do nothing: identifiers allowed in object expressions\n  } else if (ctx.paramsRef.has(name)) {\n    updateParameterNode(node, ctx.paramsRef.get(name));\n  } else if (ctx.columnRef.has(name)) {\n    updateColumnNode(node, name, ctx);\n  } else if (has(ctx.params, name)) {\n    updateParameterNode(node, name);\n  } else if (has(constants, name)) {\n    updateConstantNode(node, name);\n  } else {\n    return true;\n  }\n}\n\nfunction updateColumnNode(node, key, ctx) {\n  const [name, index] = ctx.columnRef.get(key);\n\n  // check column validity if we have a backing table\n  const table = index === 0 ? ctx.table\n    : index > 0 ? ctx.join[index - 1]\n    : null;\n  if (table && !has(table.data(), name)) {\n    ctx.error(`Invalid column \"${name}\"`, ctx);\n  }\n\n  node.type = Column;\n  node.name = name;\n  node.table = index;\n}\n\nfunction updateParameterNode(node, name) {\n  node.type = Parameter;\n  node.name = name;\n}\n\nfunction updateConstantNode(node, name) {\n  node.type = Constant;\n  node.name = name;\n  node.raw = constants[name];\n}\n\nconst visitors = {\n  FunctionDeclaration: parseError('Function definitions not allowed'),\n  ForStatement: parseError('For loops not allowed'),\n  ForOfStatement: parseError('For-of loops not allowed'),\n  ForInStatement: parseError('For-in loops not allowed'),\n  WhileStatement: parseError('While loops not allowed'),\n  DoWhileStatement: parseError('Do-while loops not allowed'),\n  AwaitExpression: parseError('Await expressions not allowed'),\n  ArrowFunctionExpression: parseError('Function definitions not allowed'),\n  AssignmentExpression: parseError('Assignments not allowed'),\n  FunctionExpression: parseError('Function definitions not allowed'),\n  NewExpression: parseError('Use of \"new\" not allowed'),\n  UpdateExpression: parseError('Updates not allowed'),\n\n  VariableDeclarator(node, ctx) {\n    ctx.scope.add(node.id.name);\n  },\n  Identifier(node, ctx, parent) {\n    if (handleIdentifier(node, ctx, parent) && !ctx.scope.has(node.name)) {\n      // handle identifier passed responsibility here\n      // raise error if identifier not defined in scope\n      ctx.error('Invalid variable name', node);\n    }\n  },\n  CallExpression(node, ctx) {\n    const name = functionName(ctx, node.callee);\n    const def = getAggregate(name) || getWindow(name);\n\n    // parse operator and rewrite invocation\n    if (def) {\n      if ((ctx.join || ctx.aggregate === false) && isAggregate(def)) {\n        ctx.error('Aggregate function not allowed', node);\n      }\n      if ((ctx.join || ctx.window === false) && isWindow(def)) {\n        ctx.error('Window function not allowed', node);\n      }\n\n      if (ctx.ast) {\n        node.callee = { type: Function, name };\n        node.arguments.forEach(arg => walk(arg, ctx, opVisitors));\n      } else {\n        const op = ctx.op(parseOperator(ctx, def, name, node.arguments));\n        Object.assign(node, {\n          type: OpLookup,\n          computed: true,\n          object: { type: Identifier, name: 'op' },\n          property: { type: Literal, raw: op.id }\n        });\n      }\n      return false;\n    } else if (getFunction(name)) {\n      node.callee = { type: Function, name };\n    } else {\n      ctx.error('Illegal function call', node);\n    }\n  },\n  MemberExpression(node, ctx) {\n    const { object, property } = node;\n\n    // bail if left head is not an identifier\n    // in this case we will recurse and handle it later\n    if (!is(Identifier, object)) return;\n    const { name } = object;\n\n    // allow use of Math prefix to access constant values\n    if (name === 'Math' && is(Identifier, property)\n        && has(constants, property.name)) {\n      updateConstantNode(node, property.name);\n      return;\n    }\n\n    const index = name === ctx.tuple ? 0\n      : name === ctx.tuple1 ? 1\n      : name === ctx.tuple2 ? 2\n      : -1;\n\n    if (index >= 0) {\n      // replace member expression with column ref\n      const table = index === 0 ? ctx.table : ctx.join[index - 1];\n      const names = table ? table.data() : null;\n      return spliceMember(node, { type: Column, table: index }, ctx, names);\n    } else if (name === ctx.$param) {\n      // replace member expression with param ref\n      return spliceMember(node, { type: Parameter }, ctx, ctx.params);\n    } else if (ctx.paramsRef.has(name)) {\n      updateParameterNode(node, ctx.paramsRef.get(name));\n    } else if (ctx.columnRef.has(name)) {\n      updateColumnNode(object, name, ctx);\n    } else if (has(ctx.params, name)) {\n      updateParameterNode(object, name);\n    }\n  }\n};\n\nfunction spliceMember(node, props, ctx, values) {\n  const { property } = node;\n  const name = is(Identifier, property) ? { name: property.name }\n    : is(Literal, property) ? { name: property.value, computed: true }\n    : ctx.error('Invalid member expression', node);\n\n  if (values && !has(values, name.name)) {\n    ctx.error(`Invalid ${props.type.toLowerCase()} \"${name.name}\"`, node);\n  }\n  Object.assign(node, props, name);\n  return false;\n}\n\nconst opVisitors = {\n  ...visitors,\n  VariableDeclarator: parseError('Variable declarations not allowed within operator call'),\n  Identifier(node, ctx, parent) {\n    if (handleIdentifier(node, ctx, parent)) {\n      ctx.error('Variable not accessible within operator call', node);\n    }\n  },\n  CallExpression(node, ctx) {\n    const name = functionName(ctx, node.callee);\n\n    // rewrite if built-in function\n    if (getFunction(name)) {\n      node.callee = { type: Function, name };\n    } else {\n      ctx.error('Illegal function call', node);\n    }\n  }\n};\n\nfunction parser(expr) {\n  try {\n    const code = expr.field ? fieldRef(expr) : expr;\n    return parse(`expr=(${code})`, PARSER_OPT).body[0].expression.right;\n  } catch (err) {\n    error(`Expression parse error: ${expr+''}`, err);\n  }\n}\n\nexport function parseExpression(ctx, name, spec) {\n  const ast = parser(spec);\n  let node = ctx.root = ast;\n  ctx.spec = spec;\n  ctx.tuple = null;\n  ctx.tuple1 = null;\n  ctx.tuple2 = null;\n  ctx.$param = null;\n  ctx.scope = new Set();\n  ctx.paramsRef = new Map();\n  ctx.columnRef = new Map();\n\n  // parse input column parameters\n  // if no function def, assume default tuple identifiers\n  if (isFunctionExpression(node)) {\n    parseFunction(node, ctx);\n    node = node.body;\n  } else if (ctx.join) {\n    ctx.scope.add(ctx.tuple1 = DEFAULT_TUPLE_ID1);\n    ctx.scope.add(ctx.tuple2 = DEFAULT_TUPLE_ID2);\n    ctx.scope.add(ctx.$param = DEFAULT_PARAM_ID);\n  } else {\n    ctx.scope.add(ctx.tuple = DEFAULT_TUPLE_ID);\n    ctx.scope.add(ctx.$param = DEFAULT_PARAM_ID);\n  }\n\n  // rewrite column references & function calls\n  walk(node, ctx, visitors);\n\n  ctx.value(name, ctx.root);\n}\n\nfunction parseFunction(node, ctx) {\n  if (node.generator) ctx.error('Generator functions not allowed', node);\n  if (node.async) ctx.error('Async functions not allowed', node);\n\n  const { params } = node;\n  const len = params.length;\n  const setc = index => (name, key) => ctx.columnRef.set(name, [key, index]);\n  const setp = (name, key) => ctx.paramsRef.set(name, key);\n\n  if (!len) {\n    // do nothing\n  } else if (ctx.join) {\n    parseRef(ctx, params[0], 'tuple1', setc(1));\n    if (len > 1) parseRef(ctx, params[1], 'tuple2', setc(2));\n    if (len > 2) parseRef(ctx, params[2], '$param', setp);\n  } else {\n    parseRef(ctx, params[0], 'tuple', setc(0));\n    if (len > 1) parseRef(ctx, params[1], '$param', setp);\n  }\n\n  ctx.root = node.body;\n}\n\nfunction parseRef(ctx, node, refName, alias) {\n  if (is(Identifier, node)) {\n    ctx.scope.add(node.name);\n    ctx[refName] = node.name;\n  } else if (is(ObjectPattern, node)) {\n    node.properties.forEach(p => {\n      const key = is(Identifier, p.key) ? p.key.name\n        : is(Literal, p.key) ? p.key.value\n        : ctx.error('Invalid argument', p);\n      if (!is(Identifier, p.value)) {\n        ctx.error('Unsupported destructuring pattern', p.value);\n      }\n      alias(p.value.name, key);\n    });\n  }\n}\n\nfunction parseOperator(ctx, def, name, args) {\n  const fields = [];\n  const params = [];\n  const idxFields = def.param[0] || 0;\n  const idxParams = idxFields + (def.param[1] || 0);\n\n  args.forEach((arg, index) => {\n    if (index < idxFields) {\n      walk(arg, ctx, opVisitors);\n      fields.push(ctx.field(arg));\n    } else if (index < idxParams) {\n      walk(arg, ctx, opVisitors);\n      params.push(ctx.param(arg));\n    } else {\n      ctx.error('Illegal operator parameter', arg);\n    }\n  });\n\n  return { name, fields, params, ...(ctx.spec.window || {}) };\n}","export const Expr = 'Expr';\nexport const ExprList = 'ExprList';\nexport const ExprNumber = 'ExprNumber';\nexport const ExprObject = 'ExprObject';\nexport const JoinKeys = 'JoinKeys';\nexport const JoinValues = 'JoinValues';\nexport const Options = 'Options';\nexport const OrderbyKeys = 'OrderKeys';\nexport const SelectionList = 'SelectionList';\nexport const TableRef = 'TableRef';\nexport const TableRefList = 'TableRefList';\n\nexport const Descending = 'Descending';\nexport const Query = 'Query';\nexport const Selection = 'Selection';\nexport const Verb = 'Verb';\nexport const Window = 'Window';","export default function(list, fn = (x => x), delim = '') {\n  const n = list.length;\n  if (!n) return '';\n\n  let s = fn(list[0], 0);\n  for (let i = 1; i < n; ++i) {\n    s += delim + fn(list[i], i);\n  }\n\n  return s;\n}","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from './ascending';\nimport min from './min';\nimport max from './max';\nimport quantile from './quantile';\n\nexport default class ValueList {\n  constructor(values) {\n    this.values(values || []);\n  }\n\n  values(values) {\n    if (arguments.length) {\n      this._values = values;\n      this._sorted = null;\n      this._start = 0;\n    } else {\n      if (this._start) {\n        this._values = this._values.slice(this._start);\n        this._start = 0;\n      }\n      return this._values;\n    }\n  }\n\n  add(value) {\n    this._values.push(value);\n    this._sorted = null;\n  }\n\n  rem() {\n    this._start += 1;\n    this._sorted = null;\n  }\n\n  min() {\n    return this._sorted\n      ? this._sorted[0]\n      : min(this._values, this._start);\n  }\n\n  max() {\n    return this._sorted\n      ? this._sorted[this._sorted.length - 1]\n      : max(this._values, this._start);\n  }\n\n  quantile(p) {\n    if (!this._sorted) {\n      this._sorted = this.values().slice();\n      this._sorted.sort(ascending);\n    }\n    return quantile(this._sorted, p);\n  }\n}","export default function(values, start = 0, stop = values.length) {\n  let min = values[start];\n\n  for (let i = start; i < stop; ++i) {\n    if (min > values[i]) {\n      min = values[i];\n    }\n  }\n\n  return min;\n}","export default function(values, start = 0, stop = values.length) {\n  let max = values[start];\n\n  for (let i = start; i < stop; ++i) {\n    if (max < values[i]) {\n      max = values[i];\n    }\n  }\n\n  return max;\n}","export default function quantile(values, p) {\n  const n = values.length;\n\n  if (!n) return;\n  if ((p = +p) <= 0 || n < 2) return +values[0];\n  if (p >= 1) return +values[n - 1];\n\n  const i = (n - 1) * p;\n  const i0 = Math.floor(i);\n  const v0 = +values[i0];\n  const v1 = +values[i0 + 1];\n  return v0 + (v1 - v0) * (i - i0);\n}","import Reducer from './reducer';\nimport { getAggregate } from '../../op';\nimport concat from '../../util/concat';\nimport error from '../../util/error';\nimport isValid from '../../util/is-valid';\nimport unroll from '../../util/unroll';\nimport ValueList from '../../util/value-list';\n\nconst update = (ops, args, fn) => unroll(\n  ops, args,\n  '{' + concat(ops, (_, i) => `_${i}.${fn}(${args});`) + '}'\n);\n\nexport default function(oplist, stream) {\n  const { ops, output } = expand(oplist, stream);\n  const fields = oplist[0].fields;\n  const n = fields.length;\n  const cls = n === 0 ? FieldReducer\n    : n === 1 ? Field1Reducer\n    : n === 2 ? Field2Reducer\n    : error('Unsupported field count: ' + n);\n  return new cls(fields, ops, output);\n}\n\nfunction expand(oplist, stream) {\n  const has = {};\n  const ops = [];\n\n  function add(name, params = []) {\n    // check key\n    const key = name + ':' + params;\n    if (has[key]) return has[key];\n\n    // get op instance\n    const def = getAggregate(name);\n    const op = def.create(...params);\n\n    // add required dependencies\n    if (stream && def.stream) {\n      def.stream.forEach(name => add(name, []));\n    }\n    if (def.req) {\n      def.req.forEach(name => add(name, []));\n    }\n\n    // update state\n    has[key] = op;\n    ops.push(op);\n\n    return op;\n  }\n\n  const output = oplist.map(item => {\n    const op = add(item.name, item.params);\n    op.output = item.id;\n    return op;\n  });\n\n  return { ops, output };\n}\n\nclass FieldReducer extends Reducer {\n  constructor(fields, ops, outputs) {\n    super(outputs);\n    this._op = ops;\n    this._fields = fields;\n  }\n\n  init() {\n    const state = { count: 0, valid: 0 };\n    this._op.forEach(op => op.init(state));\n\n    // value list requested\n    if (state.values) {\n      state.list = new ValueList();\n    }\n\n    return state;\n  }\n\n  writeToArrays(state, values, index) {\n    const op = this._outputs;\n    const n = op.length;\n    for (let i = 0; i < n; ++i) {\n      values[op[i].output][index] = op[i].value(state);\n    }\n    return 1;\n  }\n\n  writeToObject(state, object) {\n    const op = this._outputs;\n    const n = op.length;\n    for (let i = 0; i < n; ++i) {\n      object[op[i].output] = op[i].value(state);\n    }\n    return 1;\n  }\n\n  _add() {\n  }\n\n  add(state) {\n    ++state.count;\n  }\n\n  rem(state) {\n    --state.count;\n  }\n}\n\nclass Field1Reducer extends FieldReducer {\n  constructor(fields, ops, outputs) {\n    super(fields, ops, outputs);\n\n    // unroll op invocations for performance\n    const args = ['state', 'v1', 'v2'];\n    this._add = update(ops, args, 'add');\n    this._rem = update(ops, args, 'rem');\n  }\n\n  add(state, row, data) {\n    const value = this._fields[0](row, data);\n    ++state.count;\n    if (isValid(value)) {\n      ++state.valid;\n      if (state.list) state.list.add(value);\n      this._add(state, value);\n    }\n  }\n\n  rem(state, row, data) {\n    const value = this._fields[0](row, data);\n    --state.count;\n    if (isValid(value)) {\n      --state.valid;\n      if (state.list) state.list.rem(value);\n      this._rem(state, value);\n    }\n  }\n}\n\nclass Field2Reducer extends FieldReducer {\n  constructor(fields, ops, outputs) {\n    super(fields, ops, outputs);\n\n    // unroll op invocations for performance\n    const args = ['state', 'v1', 'v2'];\n    this._add = update(ops, args, 'add');\n    this._rem = update(ops, args, 'rem');\n  }\n\n  add(state, row, data) {\n    const value1 = this._fields[0](row, data);\n    const value2 = this._fields[1](row, data);\n    ++state.count;\n    if (isValid(value1) && isValid(value2)) {\n      ++state.valid;\n      this._add(state, value1, value2);\n    }\n  }\n\n  rem(state, row, data) {\n    const value1 = this._fields[0](row, data);\n    const value2 = this._fields[1](row, data);\n    --state.count;\n    if (isValid(value1) && isValid(value2)) {\n      --state.valid;\n      this._rem(state, value1, value2);\n    }\n  }\n}","import error from '../../util/error';\n\n/**\n * Abstract class for custom aggregation operations.\n */\nexport default class Reducer {\n  constructor(outputs) {\n    this._outputs = outputs;\n  }\n\n  size() {\n    return this._outputs.length;\n  }\n\n  outputs() {\n    return this._outputs;\n  }\n\n  init(/* columns */) {\n    return {};\n  }\n\n  add(/* state, row, data */) {\n    // no-op, subclasses should override\n  }\n\n  rem(/* state, row, data */) {\n    // no-op, subclasses should override\n  }\n\n  writeToArrays(/* state, values, index */) {\n    error('Unsupported operation');\n  }\n\n  writeToObject(/* state, object */) {\n    error('Unsupported operation');\n  }\n}","import fieldReducer from './field-reducer';\nimport repeat from '../../util/repeat';\n\nexport function aggregateGet(table, ops, get) {\n  if (ops.length) {\n    const result = aggregate(table, ops);\n    const keys = table.isGrouped() ? table.groups().keys : null;\n    const data = table.data();\n    get = keys\n      ? get.map(f => row => f(row, data, result[keys[row]]))\n      : get.map(f => row => f(row, data, result));\n  }\n\n  return get;\n}\n\nexport function aggregate(table, ops) {\n  if (!ops.length) {\n    return undefined;\n  }\n\n  // instantiate aggregators\n  const aggrs = reducers(ops);\n\n  if (table.isGrouped()) {\n    const groups = table.groups();\n    const { size } = groups;\n\n    // instantiate aggregate result objects\n    const result = repeat(size, () => ({}));\n\n    // compute aggregates, extract results\n    aggrs.forEach(aggr => {\n      const cells = reduceGroups(table, aggr, groups);\n      for (let i = 0; i < size; ++i) {\n        aggr.writeToObject(cells[i], result[i]);\n      }\n    });\n\n    return result;\n  } else {\n    // instantiate aggregate result object\n    const result = {};\n\n    // compute aggregates, extract results\n    aggrs.forEach(aggr => {\n      const cell = reduceFlat(table, aggr);\n      aggr.writeToObject(cell, result);\n    });\n\n    return result;\n  }\n}\n\nexport function reducers(ops, stream) {\n  const aggrs = [];\n  const fields = {};\n\n  // group operators by field inputs\n  for (const op of ops) {\n    const key = op.fields.map(f => f + '').join(',');\n    (fields[key] || (fields[key] = [])).push(op);\n  }\n\n  // generate a field reducer for each field\n  for (const key in fields) {\n    aggrs.push(fieldReducer(fields[key], stream));\n  }\n\n  return aggrs;\n}\n\nexport function reduceFlat(table, reducer) {\n  // initialize aggregation cell\n  const cell = reducer.init();\n\n  // compute aggregate values\n  table.scan((row, data) => reducer.add(cell, row, data));\n\n  return cell;\n}\n\nexport function reduceGroups(table, reducer, groups) {\n  const { keys, size } = groups;\n\n  // initialize aggregation cells\n  const cells = repeat(size, () => reducer.init());\n\n  // compute aggregate values\n  table.scan((row, data) => reducer.add(cells[keys[row]], row, data));\n\n  return cells;\n}\n\nexport function groupInit(data, table) {\n  const { names, size } = table.groups();\n\n  // initialize group output columns\n  names.forEach(name => data[name] = Array(size));\n\n  // return empty row count array\n  return new Uint32Array(size + 1);\n}\n\nexport function groupOutput(output, table, counts) {\n  const { get, names, rows, size } = table.groups();\n  const data = table.data();\n\n  // write group values to output columns\n  names.forEach((name, index) => {\n    const column = output[name];\n    const getter = get[index];\n    for (let i = 0, row = 0; i < size; ++i) {\n      const value = getter(rows[i], data);\n      const count = counts[i + 1];\n      for (let j = 0; j < count; ++j) {\n        column[row++] = value;\n      }\n    }\n  });\n}","export default function(compare) {\n  return {\n    left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n","import ascending from '../../util/ascending';\nimport bisector from '../../util/bisector';\nimport concat from '../../util/concat';\nimport unroll from '../../util/unroll';\n\nconst bisect = bisector(ascending);\n\nexport default function(data, frame, adjust, ops, aggrs) {\n  let rows, peer, cells, result;\n  const isPeer = index => peer[index - 1] === peer[index];\n  const numOps = ops.length;\n  const numAgg = aggrs.length;\n\n  const evaluate = ops.length\n    ? unroll(\n      ops, ['w', 'r'],\n        '{' + concat(ops, (_, i) => `r[_${i}.name]=_${i}.value(w,_${i}.get);`) + '}'\n      )\n    : () => {};\n\n  const w = {\n    i0: 0,\n    i1: 0,\n    index: 0,\n    size: 0,\n    peer: isPeer,\n\n    init(partition, peers, tuple) {\n      w.index = w.i0 = w.i1 = 0;\n      w.size = peers.length;\n      rows = partition;\n      peer = peers;\n      result = tuple;\n\n      // initialize aggregates\n      cells = aggrs ? aggrs.map(aggr => aggr.init()) : null;\n\n      // initialize window ops\n      for (let i = 0; i < numOps; ++i) {\n        ops[i].init();\n      }\n\n      return w;\n    },\n\n    value(index, get) {\n      return get(rows[index], data);\n    },\n\n    step(idx) {\n      const [f0, f1] = frame;\n      const n = w.size;\n      const p0 = w.i0;\n      const p1 = w.i1;\n\n      w.i0 = f0 != null ? Math.max(0, idx - Math.abs(f0)) : 0;\n      w.i1 = f1 != null ? Math.min(n, idx + Math.abs(f1) + 1) : n;\n      w.index = idx;\n\n      if (adjust) {\n        if (w.i0 > 0 && isPeer(w.i0)) {\n          w.i0 = bisect.left(peer, peer[w.i0]);\n        }\n        if (w.i1 < n && isPeer(w.i1)) {\n          w.i1 = bisect.right(peer, peer[w.i1 - 1]);\n        }\n      }\n\n      // evaluate aggregates\n      for (let i = 0; i < numAgg; ++i) {\n        const aggr = aggrs[i];\n        const cell = cells[i];\n        for (let j = p0; j < w.i0; ++j) {\n          aggr.rem(cell, rows[j], data);\n        }\n        for (let j = p1; j < w.i1; ++j) {\n          aggr.add(cell, rows[j], data);\n        }\n        aggr.writeToObject(cell, result);\n      }\n\n      // evaluate window ops\n      evaluate(w, result);\n\n      return result;\n    }\n  };\n\n  return w;\n}","import { reducers } from '../reduce/util';\nimport { getWindow, isAggregate } from '../../op';\nimport windowState from './window-state';\n\nconst frameValue = op =>\n  (op.frame || [null, null]).map(v => Number.isFinite(v) ? v : null);\n\nconst peersValue = op => !!op.peers;\n\nfunction windowOp(spec) {\n  const { id, name, fields = [], params = [] } = spec;\n  const op = getWindow(name).create(...params);\n  if (fields.length) op.get = fields[0];\n  op.name = id;\n  return op;\n}\n\nexport function window(table, output, values, results = [], ops) {\n  // instantiate window states\n  const input = table.data();\n  const states = windowStates(ops, input);\n  const nstate = states.length;\n\n  // scan each ordered partition\n  table.partitions().forEach((rows, partitionIndex) => {\n    const size = rows.length;\n    const peers = windowPeers(table, rows);\n    const result = results[partitionIndex] || {};\n\n    // initialize window states\n    for (let i = 0; i < nstate; ++i) {\n      states[i].init(rows, peers, result);\n    }\n\n    // calculate window values per-row\n    for (let index = 0; index < size; ++index) {\n      // advance window frame, updates result object\n      for (let i = 0; i < nstate; ++i) {\n        states[i].step(index);\n      }\n      // write output values (TODO rewrite for performance?)\n      const row = rows[index];\n      for (const name in values) {\n        output[name][row] = values[name](row, input, result);\n      }\n    }\n  });\n}\n\nfunction windowStates(ops, data) {\n  const map = {};\n\n  // group operations by window frame parameters\n  ops.forEach(op => {\n    const frame = frameValue(op);\n    const peers = peersValue(op);\n    const key = `${frame},${peers}`;\n    const { aggOps, winOps } = map[key] || (map[key] = {\n      frame,\n      peers,\n      aggOps: [],\n      winOps: []\n    });\n    isAggregate(op.name)\n      ? aggOps.push(op)\n      : winOps.push(windowOp(op));\n  });\n\n  return Object.values(map).map(_ =>\n    windowState(data, _.frame, _.peers, _.winOps, reducers(_.aggOps, true)\n  ));\n}\n\nfunction windowPeers(table, rows) {\n  if (table.isOrdered()) {\n    // generate peer ids for sort equality checking\n    const compare = table.comparator();\n    const data = table.data();\n    const nrows = rows.length;\n    const peers = new Uint32Array(nrows);\n    for (let i = 1, index = 0; i < nrows; ++i) {\n      peers[i] = compare(rows[i - 1], rows[i], data) ? ++index : index;\n    }\n    return peers;\n  } else {\n    // no sort, no peers: reuse row indices as peer ids\n    return rows;\n  }\n}","export default Array.isArray;\n","import isArray from './is-array';\n\nexport default function toArray(value) {\n  return value != null\n    ? (isArray(value) ? value : [value])\n    : [];\n}","import { window } from './window/window';\nimport { aggregate } from './reduce/util';\nimport { isWindow } from '../op';\nimport toArray from '../util/to-array';\n\nfunction isWindowed(op) {\n  return isWindow(op.name) ||\n    op.frame && (\n      Number.isFinite(op.frame[0]) ||\n      Number.isFinite(op.frame[1])\n    );\n}\n\nexport default function(table, { values, ops }) {\n  // instantiate output data\n  const total = table.totalRows();\n  const data = { ...table.columns() };\n  for (const name in values) {\n    data[name] = Array(total);\n  }\n\n  // analyze operations, compute non-windowed aggregates\n  const [ aggOps, winOps ] = segmentOps(ops);\n  const result = aggregate(table, aggOps);\n\n  // perform table scans to generate output values\n  winOps.length\n    ? window(table, data, values, toArray(result), winOps)\n    : output(table, data, values, result);\n\n  return table.create({ data });\n}\n\nfunction segmentOps(ops) {\n  const aggOps = [];\n  const winOps = [];\n\n  for (const key in ops) {\n    const op = ops[key];\n    op.id = key;\n    (isWindowed(op) ? winOps : aggOps).push(op);\n  }\n\n  return [aggOps, winOps];\n}\n\nfunction output(table, data, values, result = {}) {\n  const groups = table.groups();\n\n  if (groups) {\n    const { keys } = groups;\n    for (const name in values) {\n      const get = values[name];\n      const col = data[name];\n      table.scan((row, d) => col[row] = get(row, d, result[keys[row]]));\n    }\n  } else {\n    for (const name in values) {\n      const get = values[name];\n      const col = data[name];\n      table.scan((row, d) => col[row] = get(row, d, result));\n    }\n  }\n}","const ONE = 0x80000000;\nconst ALL = 0xFFFFFFFF;\n\nexport default class BitSet {\n  constructor(size) {\n    this._size = size;\n    this._bits = new Uint32Array(Math.ceil(size / 32));\n  }\n\n  get length() {\n    return this._size;\n  }\n\n  // https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n  count() {\n    const n = this._bits.length;\n    let count = 0;\n    for (let i = 0; i < n; ++i) {\n      for (let b = this._bits[i]; b; ++count) {\n        b &= b - 1;\n      }\n    }\n    return count;\n  }\n\n  get(i) {\n    return this._bits[i >> 5] & (ONE >>> i);\n  }\n\n  set(i) {\n    this._bits[i >> 5] |= (ONE >>> i);\n  }\n\n  clear(i) {\n    this._bits[i >> 5] &= ~(ONE >>> i);\n  }\n\n  scan(fn) {\n    for (let i = this.next(0); i >= 0; i = this.next(i + 1)) {\n      fn(i);\n    }\n  }\n\n  next(i) {\n    const bits = this._bits;\n    const n = bits.length;\n\n    let index = i >> 5;\n    let curr = bits[index] & (ALL >>> i);\n\n    for (; index < n; curr = bits[++index]) {\n      if (curr !== 0) {\n        return (index * 32) + Math.clz32(curr);\n      }\n    }\n\n    return -1;\n  }\n\n  not() {\n    const bits = this._bits;\n    const n = bits.length;\n\n    // invert all bits\n    for (let i = 0; i < n; ++i) {\n      bits[i] = ~bits[i];\n    }\n\n    // unset extraneous trailing bits\n    const tail = this._size % 32;\n    if (tail) {\n      bits[n - 1] &= ONE >> (tail - 1);\n    }\n\n    return this;\n  }\n\n  and(bitset) {\n    const a = this._bits;\n    const b = bitset._bits;\n    const s = new BitSet(Math.min(this.length, bitset.length));\n    const c = s._bits;\n    const n = c.length;\n\n    for (let i = 0; i < n; ++i) {\n      c[i] = a[i] & b[i];\n    }\n\n    return s;\n  }\n\n  or(bitset) {\n    const a = this._bits;\n    const b = bitset._bits;\n    const s = new BitSet(Math.max(this.length, bitset.length));\n    const c = s._bits;\n    const n = c.length;\n\n    for (let i = 0; i < n; ++i) {\n      c[i] = a[i] | b[i];\n    }\n\n    return s;\n  }\n}","import { aggregateGet } from './reduce/util';\nimport toArray from '../util/to-array';\nimport has from '../util/has';\n\nexport default function(table, { values = {}, ops = [] }, options = {}) {\n  const names = Object.keys(values);\n  if (!names.length) return table;\n\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const index = options.index\n    ? options.index === true ? 'index' : options.index + ''\n    : null;\n  const drop = options.drop || {};\n  const get = aggregateGet(table, ops, Object.values(values));\n\n  // initialize output columns\n  const data = {};\n  const priors = [];\n  const copies = [];\n  const unroll = [];\n\n  // original and copied columns\n  table.columnNames().forEach(name => {\n    if (!has(drop, name)) {\n      const col = data[name] = [];\n      if (!has(values, name)) {\n        priors.push(table.column(name));\n        copies.push(col);\n      }\n    }\n  });\n\n  // unrolled output columns\n  names.forEach(name => {\n    if (!has(drop, name)) {\n      if (!has(data, name)) data[name] = [];\n      unroll.push(data[name]);\n    }\n  });\n\n  // index column, if requested\n  const icol = index ? (data[index] = []) : null;\n\n  let start = 0;\n  const m = priors.length;\n  const n = unroll.length;\n\n  const copy = (row, maxlen) => {\n    for (let i = 0; i < m; ++i) {\n      copies[i].length = start + maxlen;\n      copies[i].fill(priors[i].get(row), start, start + maxlen);\n    }\n  };\n\n  const indices = icol\n    ? (row, maxlen) => {\n        for (let i = 0; i < maxlen; ++i) {\n          icol[row + i] = i;\n        }\n      }\n    : () => {};\n\n  if (n === 1) {\n    // optimize common case of one array-valued column\n    const fn = get[0];\n    const col = unroll[0];\n\n    table.scan((row, data) => {\n      // extract array data\n      const array = toArray(fn(row, data));\n      const maxlen = Math.min(array.length, limit);\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let j = 0; j < maxlen; ++j) {\n        col[start + j] = array[j];\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  } else {\n    table.scan((row, data) => {\n      let maxlen = 0;\n\n      // extract parallel array data\n      const arrays = get.map(fn => {\n        const value = toArray(fn(row, data));\n        maxlen = Math.min(Math.max(maxlen, value.length), limit);\n        return value;\n      });\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let i = 0; i < n; ++i) {\n        const col = unroll[i];\n        const arr = arrays[i];\n        for (let j = 0; j < maxlen; ++j) {\n          col[start + j] = arr[j];\n        }\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  }\n\n  return table.create({\n    data,\n    filter: null,\n    groups: null,\n    order:  null\n  });\n}","import isFunction from '../../util/is-function';\n\n/**\n * Annotate an expression in an object wrapper.\n * @param {string|Function|Object} expr An expression to annotate.\n * @param {Object} properties The properties to annotate with.\n * @return {Object} A new wrapped expression object.\n */\nexport default function(expr, properties) {\n  return expr && expr.expr\n    ? new Wrapper({ ...expr, ...properties })\n    : new Wrapper(properties, expr);\n}\n\nclass Wrapper {\n  constructor(properties, expr) {\n    this.expr = expr;\n    Object.assign(this, properties);\n  }\n  toString() {\n    return String(this.expr);\n  }\n  toObject() {\n    return {\n      ...this,\n      expr: this.toString(),\n      ...(isFunction(this.expr) ? { func: true } : {})\n    };\n  }\n}","import wrap from './wrap';\n\n/**\n * Annotate an expression to indicate it is a string field reference.\n * @param {string|Object} expr The column name, or an existing wrapped\n *  expression for a column name.\n * @param {string} [name] The column name to use. If provided, will\n *  overwrite the input expression value.\n * @param {number} [table=0] The table index of the field, in case of\n *  expressions over multiple tables.\n * @return A wrapped expression for a named column.\n * @example field('colA')\n */\nexport default function(expr, name, table = 0) {\n  const props = table ? { field: true, table } : { field: true };\n  return wrap(\n    expr,\n    name ? { expr: name, ...props } : props\n  );\n}","export default function(value) {\n  return typeof value === 'number';\n}","import error from '../../util/error';\nimport isArray from '../../util/is-array';\nimport isFunction from '../../util/is-function';\nimport isObject from '../../util/is-object';\nimport isNumber from '../../util/is-number';\nimport isString from '../../util/is-string';\n\nexport default function resolve(table, sel, map = {}) {\n  sel = isNumber(sel) ? table.columnName(sel) : sel;\n\n  if (isString(sel)) {\n    map[sel] = sel;\n  } else if (isArray(sel)) {\n    sel.forEach(r => resolve(table, r, map));\n  } else if (isFunction(sel)) {\n    resolve(table, sel(table), map);\n  } else if (isObject(sel)) {\n    Object.assign(map, sel);\n  } else {\n    error(`Invalid column selection: ${sel+''}`);\n  }\n\n  return map;\n}\n\nfunction decorate(value, toObject) {\n  value.toObject = toObject;\n  return value;\n}\n\nfunction toObject(value) {\n  return isArray(value) ? value.map(toObject)\n    : value && value.toObject ? value.toObject()\n    : value;\n}\n\n/**\n * Select all columns in a table.\n * Returns a function-valued selection compatible with {@link Table#select}.\n * @return {Function} Selection function compatible with {@link Table#select}.\n */\nexport function all() {\n  return decorate(\n    table => table.columnNames(),\n    () => ({ all: [] })\n  );\n}\n\n/**\n * Negate a column selection, selecting all other columns in a table.\n * Returns a function-valued selection compatible with {@link Table#select}.\n * @param {...any} selection The selection to negate. May be a column name,\n *  column index, array of either, or a selection function (e.g., from range).\n * @return {Function} Selection function compatible with {@link Table#select}.\n */\nexport function not(...selection) {\n  selection = selection.flat();\n  return decorate(\n    table => {\n      const drop = resolve(table, selection);\n      return table.columnNames(name => !drop[name]);\n    },\n    () => ({ not: toObject(selection) })\n  );\n}\n\n/**\n * Select a contiguous range of columns.\n * @param {string|number} start The name/index of the first selected column.\n * @param {string|number} end The name/index of the last selected column.\n * @return {Function} Selection function compatible with {@link Table#select}.\n */\nexport function range(start, end) {\n  return decorate(\n    table => {\n      let i = isNumber(start) ? start : table.columnIndex(start);\n      let j = isNumber(end) ? end : table.columnIndex(end);\n      if (j < i) { const t = j; j = i; i = t; }\n      return table.columnNames().slice(i, j + 1);\n    },\n    () => ({ range: [start, end] })\n  );\n}","import field from './field';\nimport resolve from './selection';\nimport parse from '../../expression/parse';\nimport error from '../../util/error';\nimport isNumber from '../../util/is-number';\nimport isObject from '../../util/is-object';\nimport isString from '../../util/is-string';\nimport isFunction from '../../util/is-function';\nimport toArray from '../../util/to-array';\n\nexport default function(name, table, params, options = { window: false }) {\n  const exprs = {};\n\n  const marshal = param => {\n    param = isNumber(param) ? table.columnName(param) : param;\n    isString(param) ? (exprs[param] = field(param))\n      : isFunction(param) ? Object.keys(resolve(table, param)).forEach(marshal)\n      : isObject(param) ? Object.assign(exprs, param)\n      : error(`Invalid ${name} value: ${param+''}`);\n  };\n\n  toArray(params).forEach(marshal);\n\n  if (options.preparse) {\n    options.preparse(exprs);\n  }\n\n  return parse(exprs, { table, ...options });\n}","export default function(list1, list2, args, code) {\n  return Function('_', '$',\n    '\"use strict\"; const '\n    + list1.map((_, i) => `_${i} = _[${i}]`).join(', ')\n    + '; const '\n    + list2.map((_, i) => `$${i} = $[${i}]`).join(', ')\n    + `; return (${args}) => ${code};`\n  )(list1, list2);\n}","import concat from '../util/concat';\nimport unroll from '../util/unroll2';\n\nfunction emitter(columns, getters) {\n  const args = ['i', 'a', 'j', 'b'];\n  return unroll(columns, getters, args,\n    '{' + concat(columns, (_, i) => `_${i}.push($${i}(${args}));`) + '}');\n}\n\nexport default function(tableL, tableR, predicate, { values }, options = {}) {\n  // initialize data for left table\n  const dataL = tableL.data();\n  const idxL = tableL.indices(false);\n  const nL = idxL.length;\n  const hitL = new Int32Array(nL);\n\n  // initialize data for right table\n  const dataR = tableR.data();\n  const idxR = tableR.indices(false);\n  const nR = idxR.length;\n  const hitR = new Int32Array(nR);\n\n  // initialize output data\n  const data = {}, columns = [], getters = [];\n  for (const name in values) {\n    columns.push(data[name] = []);\n    getters.push(values[name]);\n  }\n  const emit = emitter(columns, getters);\n\n  // perform nested-loops join\n  for (let i = 0; i < nL; ++i) {\n    const rowL = idxL[i];\n    for (let j = 0; j < nR; ++j) {\n      const rowR = idxR[j];\n      if (predicate(rowL, dataL, rowR, dataR)) {\n        emit(rowL, dataL, rowR, dataR);\n        hitL[i] = 1;\n        hitR[j] = 1;\n      }\n    }\n  }\n\n  if (options.left) {\n    for (let i = 0; i < nL; ++i) {\n      if (!hitL[i]) {\n        emit(idxL[i], dataL, -1, dataR);\n      }\n    }\n  }\n\n  if (options.right) {\n    for (let j = 0; j < nR; ++j) {\n      if (!hitR[j]) {\n        emit(-1, dataL, idxR[j], dataR);\n      }\n    }\n  }\n\n  return tableL.create({\n    data,\n    filter: null,\n    groups: null,\n    order:  null\n  });\n}","import concat from '../util/concat';\nimport unroll from '../util/unroll2';\n\nfunction emitter(columns, getters) {\n  const args = ['i', 'a', 'j', 'b'];\n  return unroll(columns, getters, args,\n    '{' + concat(columns, (_, i) => `_${i}.push($${i}(${args}));`) + '}');\n}\n\nexport default function(tableL, tableR, [keyL, keyR], { values }, options = {}) {\n  // initialize data for left table\n  const dataL = tableL.data();\n  const nL = tableL.totalRows();\n  const hitL = new Int32Array(nL);\n\n  // initialize data for right table\n  const dataR = tableR.data();\n  const nR = tableR.totalRows();\n  const hitR = new Int32Array(nR);\n\n  // determine which table to hash\n  let tableScan, keyScan, hitScan;\n  let tableHash, keyHash, hitHash, dataHash;\n  if (tableL.numRows() >= tableR.numRows()) {\n    tableScan = tableL; keyScan = keyL; hitScan = hitL;\n    tableHash = tableR; keyHash = keyR; hitHash = hitR;\n    dataHash = tableR.data();\n  } else {\n    tableScan = tableR; keyScan = keyR; hitScan = hitR;\n    tableHash = tableL; keyHash = keyL; hitHash = hitL;\n    dataHash = tableL.data();\n  }\n\n  // build lookup table\n  const lut = new Map();\n  tableHash.scan((row, data) => {\n    const key = keyHash(row, data);\n    if (key != null && key === key) {\n      if (!lut.has(key)) lut.set(key, []);\n      lut.get(key).push(row);\n    }\n  });\n\n  // initialize output data\n  const data = {}, columns = [], getters = [];\n  for (const name in values) {\n    columns.push(data[name] = []);\n    getters.push(values[name]);\n  }\n  const emit = emitter(columns, getters);\n  const emitScan = tableScan === tableL ? emit\n    : (i, a, j, b) => emit(j, b, i, a);\n\n  // scan other table\n  tableScan.scan((rowScan, dataScan) => {\n    const list = lut.get(keyScan(rowScan, dataScan));\n    if (list) {\n      const n = list.length;\n      for (let i = 0; i < n; ++i) {\n        const rowHash = list[i];\n        emitScan(rowScan, dataScan, rowHash, dataHash);\n        hitHash[rowHash] = 1;\n      }\n      hitScan[rowScan] = 1;\n    }\n  });\n\n  if (options.left) {\n    for (let i = 0; i < nL; ++i) {\n      if (!hitL[i]) {\n        emit(i, dataL, -1, dataR);\n      }\n    }\n  }\n\n  if (options.right) {\n    for (let j = 0; j < nR; ++j) {\n      if (!hitR[j]) {\n        emit(-1, dataL, j, dataR);\n      }\n    }\n  }\n\n  return tableL.create({\n    data,\n    filter: null,\n    groups: null,\n    order:  null\n  });\n}","import isArray from './is-array';\nimport isDate from './is-date';\nimport isRegExp from './is-regexp';\nimport isTypedArray from './is-typed-array';\n\nfunction key(value) {\n  const type = typeof value;\n  return type === 'string' ? `\"${value}\"`\n    : type !== 'object' || !value ? value\n    : isDate(value) ? +value\n    : isArray(value) || isTypedArray(value) ? `[${value.map(key)}]`\n    : isRegExp(value) ? value + ''\n    : objectKey(value);\n}\n\nfunction objectKey(value) {\n  let s = '{';\n  let i = -1;\n  for (const k in value) {\n    if (++i > 0) s += ',';\n    s += `\"${k}\":${key(value[k])}`;\n  }\n  s += '}';\n  return s;\n}\n\nexport default function(get, nulls) {\n  const n = get.length;\n  return n === 1\n    ? (row, data) => key(get[0](row, data))\n    : (row, data) => {\n        let s = '';\n        for (let i = 0; i < n; ++i) {\n          if (i > 0) s += '|';\n          const v = get[i](row, data);\n          if (nulls && (v == null || v !== v)) return null;\n          s += key(v);\n        }\n        return s;\n      };\n}","import field from './field';\nimport parse from '../../expression/parse';\nimport error from '../../util/error';\nimport isFunction from '../../util/is-function';\nimport isNumber from '../../util/is-number';\nimport isObject from '../../util/is-object';\nimport isString from '../../util/is-string';\nimport keyFunction from '../../util/key-function';\nimport toArray from '../../util/to-array';\n\nexport default function(name, table, params) {\n  const exprs = {};\n\n  toArray(params).forEach((param, i) => {\n    param = isNumber(param) ? table.columnName(param) : param;\n    isString(param) ? (exprs[i] = field(param))\n      : isFunction(param) || isObject(param) && param.expr ? (exprs[i] = param)\n      : error(`Invalid ${name} key value: ${param+''}`);\n  });\n\n  const fn = parse(exprs, { table, aggregate: false, window: false });\n  return keyFunction(Object.values(fn.values), true);\n}","export default function intersect(a, b) {\n  const set = new Set(b);\n  return a.filter(x => set.has(x));\n}","import _join_loop from '../engine/join-loop';\nimport _join_hash from '../engine/join-hash';\nimport parseKey from './expr/parse-key';\nimport parseValue from './expr/parse';\nimport { all } from './expr/selection';\nimport parse from '../expression/parse';\nimport has from '../util/has';\nimport intersect from '../util/intersect';\nimport isArray from '../util/is-array';\n\nconst OPT_L = { aggregate: false, window: false };\nconst OPT_R = { ...OPT_L, index: 1 };\n\nexport default function(tableL, tableR, on, values, options) {\n  if (!on) {\n    // perform natural join if join condition not provided\n    const isect = intersect(tableL.columnNames(), tableR.columnNames());\n    on = [isect, isect];\n  }\n\n  if (!values) {\n    // include all table columns if values not provided\n    values = [all(), all()];\n  }\n\n  const optParse = { join: [tableL, tableR] };\n\n  const join = isArray(on)\n    ? (on = [\n        parseKey('join', tableL, on[0]),\n        parseKey('join', tableR, on[1])\n      ], _join_hash)\n    : (on = parse({ on }, optParse).values.on, _join_loop);\n\n  return join(\n    tableL, tableR, on,\n    parseValues(tableL, tableR, values, optParse, options && options.suffix),\n    options\n  );\n}\n\nfunction parseValues(tableL, tableR, values, optParse, suffix = []) {\n  if (isArray(values)) {\n    let vL, vR, vJ, n = values.length;\n\n    if (n--) {\n      vL = parseValue('join', tableL, values[0], OPT_L).values;\n    }\n    if (n--) {\n      vR = parseValue('join', tableR, values[1], OPT_R).values;\n    }\n    if (n--) {\n      vJ = parse(values[2], optParse).values;\n    }\n\n    // handle name collisions\n    const rename = new Set();\n    for (const name in vR) {\n      if (has(vL, name)) {\n        rename.add(name);\n      }\n    }\n    if (rename.size) {\n      vL = rekey(vL, rename, suffix[0] || '_1');\n      vR = rekey(vR, rename, suffix[1] || '_2');\n    }\n\n    return { values: { ...vL, ...vR, ...vJ } };\n  } else {\n    return parse(values, optParse);\n  }\n}\n\nfunction rekey(values, names, suffix) {\n  const object = {};\n  for (const name in values) {\n    const key = name + (names.has(name) ? suffix : '');\n    object[key] = values[name];\n  }\n  return object;\n}","import { aggregate, aggregateGet, groupInit, groupOutput } from './reduce/util';\n\nconst opt = (value, defaultValue) => value != null ? value : defaultValue;\n\nexport default function(table, on, values, options = {}) {\n  const { keys, keyColumn } = pivotKeys(table, on, options);\n  const vsep = opt(options.valueSeparator, '_');\n  const namefn = Object.keys(values.values).length > 1\n    ? (i, name) => keys[i] + vsep + name\n    : i => keys[i];\n\n  // perform separate aggregate operations for each key\n  // if keys do not match, emit NaN so aggregate skips it\n  // use custom toString method for proper field resolution\n  const results = keys.map(\n    k => values.ops.map(op => {\n      const fields = op.fields.map(f => {\n        const fn = (r, d) => k === keyColumn[r] ? f(r, d) : NaN;\n        fn.toString = () => k + ':' + f + '';\n        return fn;\n      });\n      return { ...op, fields };\n    })\n  ).map(ops => aggregate(table, ops));\n\n  return table.create({\n    data: output(table, values.values, namefn, keys, results),\n    filter: null,\n    groups: null,\n    order: null\n  });\n}\n\nfunction pivotKeys(table, on, options) {\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const sort = opt(options.sort, true);\n  const ksep = opt(options.keySeparator, '_');\n\n  // construct key accessor function\n  const get = aggregateGet(table, on.ops, Object.values(on.values));\n  const key = get.length === 1\n    ? get[0]\n    : (row, data) => get.map(fn => fn(row, data)).join(ksep);\n\n  // generate vector of per-row key values\n  const kcol = Array(table.totalRows());\n  table.scan((row, data) => kcol[row] = key(row, data));\n\n  // collect unique key values\n  const aggr = aggregate(\n    table.ungroup(),\n    [ { id: 0, name: 'unique', fields: [(row => kcol[row])], params: [] } ]\n  );\n\n  // get ordered set of unique key values\n  const keys = sort ? aggr[0].sort() : aggr[0];\n\n  // return key values\n  return {\n    keys: Number.isFinite(limit) ? keys.slice(0, limit) : keys,\n    keyColumn: kcol\n  };\n}\n\nfunction output(table, values, namefn, keys, results) {\n  const n = results.length;\n  const data = {};\n\n  if (table.isGrouped()) {\n    // write groupby fields to output\n    groupOutput(data, table, groupInit(data, table).fill(1));\n\n    // write values to output\n    const size = results[0].length;\n    for (const name in values) {\n      const get = values[name];\n      for (let i = 0; i < n; ++i) {\n        const result = results[i];\n        const col = data[namefn(i, name)] = Array(size);\n        for (let j = 0; j < size; ++j) {\n          col[j] = get(j, null, result[j]);\n        }\n      }\n    }\n  } else {\n    // write values to output\n    for (const name in values) {\n      const get = values[name];\n      for (let i = 0; i < n; ++i) {\n        data[namefn(i, name)] = [ get(0, null, results[i]) ];\n      }\n    }\n  }\n\n  return data;\n}","import _pivot from '../engine/pivot';\nimport parse from './expr/parse';\n\n// TODO: enforce aggregates only (no output changes) for values\nexport default function(table, on, values, options) {\n  return _pivot(\n    table,\n    parse('fold', table, on),\n    parse('fold', table, values, { preparse }),\n    options\n  );\n}\n\nfunction preparse(values) {\n  // map direct field reference to \"any\" aggregate\n  for (const key in values) {\n    const value = values[key];\n    if (value.field) {\n      values[key] = `d => any(d[${JSON.stringify(value+'')}])`;\n    }\n  }\n}","import { groupInit, groupOutput, reduceFlat, reduceGroups } from './reduce/util';\n\nexport default function(table, reducer) {\n  const data = {};\n\n  if (table.isGrouped()) {\n    const groups = table.groups();\n    const counts = groupInit(data, table);\n    output(\n      reduceGroups(table, reducer, groups),\n      reducer, data, counts\n    );\n    groupOutput(data, table, counts);\n  } else {\n    output(\n      reduceFlat(table, reducer),\n      reducer, data\n    );\n  }\n\n  return table.create({\n    data,\n    filter: null,\n    groups: null,\n    order: null\n  });\n}\n\nfunction output(cells, reducer, data, counts) {\n  // initialize output columns\n  reducer.outputs().map(name => data[name] = []);\n\n  // write aggregate values to output columns\n  if (counts) {\n    const n = counts.length;\n    for (let i = 0; i < n - 1; ++i) {\n      counts[i + 1] = reducer.writeToArrays(cells[i], data, counts[i]);\n    }\n  } else {\n    reducer.writeToArrays(cells, data, 0);\n  }\n}","import { aggregate, groupInit, groupOutput, reducers } from './reduce/util';\nimport reduce from './reduce';\nimport isArray from '../util/is-array';\n\nexport default function(table, { values, ops }) {\n  if (values == null) {\n    // no expression values, only operator output\n    return reduce(table, reducers(ops));\n  }\n\n  // output data\n  const data = {};\n\n  // write groupby fields to output\n  if (table.isGrouped()) {\n    groupOutput(data, table, groupInit(data, table).fill(1));\n  }\n\n  // perform aggregation and return output table\n  return table.create({\n    data: output(values, aggregate(table, ops), data),\n    filter: null,\n    groups: null,\n    order:  null\n  });\n}\n\nfunction output(values, result, data) {\n  const grouped = isArray(result);\n  const size = grouped ? result.length : 1;\n\n  if (grouped) {\n    for (const name in values) {\n      const get = values[name];\n      const col = data[name] = Array(size);\n      for (let i = 0; i < size; ++i) {\n        col[i] = get(i, null, result[i]);\n      }\n    }\n  } else {\n    for (const name in values) {\n      const get = values[name];\n      const col = data[name] = Array(size);\n      col[0] = get(0, null, result);\n    }\n  }\n\n  return data;\n}","import ascending from './ascending';\nimport bisector from './bisector';\nimport { random } from './random';\n\nexport default function(buffer, replace, index, weight) {\n  return (\n    replace\n      ? (weight ? sampleRW : sampleRU)\n      : (weight ? sampleNW : sampleNU)\n  )(buffer.length, buffer, index, weight);\n}\n\n// uniform sampling with replacement\n// uses straightforward uniform sampling\nfunction sampleRU(size, buffer, index) {\n  const n = index.length;\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[(n * random()) | 0];\n  }\n  return buffer;\n}\n\n// weighted sampling with replacement\n// uses binary search lookup against cumulative weight\nfunction sampleRW(size, buffer, index, weight) {\n  const n = index.length;\n  const w = new Float64Array(n);\n\n  let sum = 0;\n  for (let i = 0; i < n; ++i) {\n    w[i] = (sum += weight(index[i]));\n  }\n\n  const bisect = bisector(ascending).right;\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[bisect(w, sum * random())];\n  }\n  return buffer;\n}\n\n// uniform sampling without replacement\n// uses reservoir sampling to build out the sample\n// https://en.wikipedia.org/wiki/Reservoir_sampling\nfunction sampleNU(size, buffer, index) {\n  const n = index.length;\n  if (size >= n) return index;\n\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[i];\n  }\n\n  for (let i = size; i < n; ++i) {\n    const j = i * random();\n    if (j < size) {\n      buffer[j | 0] = index[i];\n    }\n  }\n\n  return buffer;\n}\n\n// weighted sample without replacement\n// uses method of Efraimidis and Spirakis\n// TODO: could use min-heap to improve efficiency\nfunction sampleNW(size, buffer, index, weight) {\n  const n = index.length;\n  if (size >= n) return index;\n\n  const w = new Float32Array(n);\n  const k = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    k[i] = i;\n    w[i] = -Math.log(random()) / weight(index[i]);\n  }\n\n  k.sort((a, b) => w[a] - w[b]);\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[k[i]];\n  }\n  return buffer;\n}","import _derive from '../engine/derive';\nimport _rollup from '../engine/rollup';\nimport _sample from '../engine/sample';\nimport parse from '../expression/parse';\nimport isNumber from '../util/is-number';\nimport isString from '../util/is-string';\n\nexport default function(table, size, options = {}) {\n  return _sample(\n    table,\n    parseSize(table, size),\n    parseWeight(table, options.weight),\n    options\n  );\n}\n\nconst get = col => row => col.get(row) || 0;\n\nfunction parseSize(table, size) {\n  return isNumber(size)\n    ? () => size\n    : get(_rollup(table, parse({ size }, { table })).column('size'));\n}\n\nfunction parseWeight(table, w) {\n  if (w == null) return null;\n  w = isNumber(w) ? table.columnName(w) : w;\n  return get(\n    isString(w)\n      ? table.column(w)\n      : _derive(table, parse({ w }, { table })).column('w')\n  );\n}","import { aggregateGet } from './reduce/util';\nimport toArray from '../util/to-array';\n\nexport default function(table, { values = {}, ops = [] }, options = {}) {\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const names = Object.keys(values);\n  if (names.length === 0) return table;\n\n  const as = (names.length === 1 && options.as) || [];\n  const get = aggregateGet(table, ops, Object.values(values));\n  const data = { ...table.data() };\n\n  names.forEach((name, index) => {\n    const columns = spread(table, get[index], limit);\n    const n = columns.length;\n    for (let i = 0; i < n; ++i) {\n      data[as[i] || `${name}${i + 1}`] = columns[i];\n    }\n  });\n\n  return table.create({ data });\n}\n\nfunction spread(table, get, limit) {\n  const nrows = table.totalRows();\n  const columns = [];\n\n  table.scan((row, data) => {\n    const values = toArray(get(row, data));\n    const n = Math.min(values.length, limit);\n    for (let i = 0; i < n; ++i) {\n      const column = columns[i] || (columns[i] = Array(nrows).fill(null));\n      column[row] = values[i];\n    }\n  });\n\n  return columns;\n}","import { aggregateGet } from './reduce/util';\nimport keyFunction from '../util/key-function';\n\nexport default function(table, exprs) {\n  return table.create({\n    groups: createGroups(table, exprs)\n  });\n}\n\nfunction createGroups(table, { values = {}, ops = [] }) {\n  const data = table.data();\n  const names = Object.keys(values);\n  if (names.length === 0) return null;\n\n  let get = aggregateGet(table, ops, Object.values(values));\n  const getKey = keyFunction(get);\n  const keys = new Uint32Array(table.totalRows());\n  const index = {};\n  const rows = [];\n\n  table.scan((row, data) => {\n    const key = getKey(row, data) + '';\n    const val = index[key];\n    keys[row] = val != null ? val : (index[key] = rows.push(row) - 1);\n  });\n\n  if (!ops.length) {\n    // capture data in closure, so no interaction with select\n    get = get.map(f => row => f(row, data));\n  }\n\n  return { keys, get, names, rows, size: rows.length };\n}","import codegen from './codegen';\nimport parse from './parse';\nimport { aggregate } from '../engine/reduce/util';\n\n// generate code to compare a single field\nconst _compare = (u, v, lt, gt) =>\n  `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}\n    : (u > v || v == null) && u != null ? ${gt}\n    : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}\n    : v !== v && u === u ? ${gt} : `;\n\nexport default function(table, fields) {\n  // parse expressions, generate code for both a and b values\n  const fn = {};\n  let opA = 'op';\n  let opB = 'op';\n  let keys = null;\n  if (table.isGrouped()) {\n    opA += '[ka]';\n    opB += '[kb]';\n    keys = table.groups().keys;\n  }\n  const { ops } = parse(fields, {\n    table,\n    value: (name, node) => {\n      fn[name] = [\n        codegen(node, { index: 'a', op: opA }),\n        codegen(node, { index: 'b', op: opB })\n      ];\n    },\n    window: false\n  });\n\n  // calculate aggregate values if needed\n  const op = ops.length ? aggregate(table, ops) : null;\n\n  // generate comparison code for each field\n  let code = 'return (a, b) => {\\n';\n  if (op && table.isGrouped()) {\n    code += '  const ka = keys[a], kb = keys[b];\\n';\n  }\n  code += '  var u, v;\\n  return ';\n  for (const name in fields) {\n    const o = fields[name].desc ? -1 : 1;\n    const [u, v] = fn[name];\n    code += _compare(u, v, -o, o);\n  }\n  code += '0;\\n};';\n\n  // instantiate and return comparator function\n  return (Function('op', 'keys', 'data', code))(op, keys, table.data());\n}","import { all, desc, field, not, range, rolling } from '../verbs';\nimport Query from './query';\nimport error from '../util/error';\nimport isArray from '../util/is-array';\nimport isFunction from '../util/is-function';\nimport isNumber from '../util/is-number';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\nimport map from '../util/map-object';\nimport toArray from '../util/to-array';\n\nfunction func(expr) {\n  const f = d => d;\n  f.toString = () => expr;\n  return f;\n}\n\nexport function getTable(catalog, ref) {\n  ref = ref && isFunction(ref.query) ? ref.query() : ref;\n  return ref && isFunction(ref.evaluate)\n    ? ref.evaluate(null, catalog)\n    : catalog(ref);\n}\n\nexport function isSelection(value) {\n  return isObject(value) && (\n    isArray(value.all) ||\n    isArray(value.not) ||\n    isArray(value.range)\n  );\n}\n\nexport function toObject(value) {\n  return value && isFunction(value.toObject) ? value.toObject()\n    : isFunction(value) ? { expr: String(value), func: true }\n    : isArray(value) ? value.map(toObject)\n    : isObject(value) ? map(value, _ => toObject(_))\n    : value;\n}\n\nexport function fromObject(value) {\n  return isArray(value) ? value.map(fromObject)\n    : !isObject(value) ? value\n    : isArray(value.verbs) ? Query.from(value)\n    : isArray(value.all) ? all()\n    : isArray(value.range) ? range(...value.range)\n    : isArray(value.not) ? not(value.not.map(toObject))\n    : fromExprObject(value);\n}\n\nfunction fromExprObject(value) {\n  let output = value;\n  let expr = value.expr;\n\n  if (expr != null) {\n    if (value.field === true) {\n      output = expr = field(expr);\n    } else if (value.func === true) {\n      output = expr = func(expr);\n    }\n\n    if (isObject(value.window)) {\n      const { frame, peers } = value.window;\n      output = expr = rolling(expr, frame, peers);\n    }\n\n    if (value.desc === true) {\n      output = desc(expr);\n    }\n  }\n\n  return value === output\n    ? map(value, _ => fromObject(_))\n    : output;\n}\n\nexport function joinKeys(keys) {\n  return isArray(keys) ? keys.map(parseJoinKeys)\n    : keys;\n}\n\nfunction parseJoinKeys(keys) {\n  const list = [];\n\n  toArray(keys).forEach(param => {\n    isNumber(param) ? list.push(param)\n      : isString(param) ? list.push(field(param, null))\n      : isObject(param) && param.expr ? list.push(param)\n      : isFunction(param) ? list.push(param)\n      : error(`Invalid key value: ${param+''}`);\n  });\n\n  return list;\n}\n\nexport function joinValues(values) {\n  return isArray(values)\n    ? values.map(parseJoinValues)\n    : values;\n}\n\nfunction parseJoinValues(values, index) {\n  return index < 2 ? toArray(values) : values;\n}\n\nexport function orderbyKeys(keys) {\n  const list = [];\n\n  keys.forEach(param => {\n    const expr = param.expr != null ? param.expr : param;\n    if (isObject(expr) && !isFunction(expr)) {\n      for (const key in expr) {\n        list.push(expr[key]);\n      }\n    } else {\n      param = isNumber(expr) ? expr\n        : isString(expr) ? field(param)\n        : isFunction(expr) ? param\n        : error(`Invalid orderby field: ${param+''}`);\n      list.push(param);\n    }\n  });\n\n  return list;\n}","import wrap from './wrap';\n\n/**\n * Annotate a table expression to compute rolling aggregate or window\n * functions within a sliding window frame. For example, to specify a\n * rolling 7-day average centered on the current day, use rolling with\n * a frame value of [-3, 3].\n * @param {string|Function|Object} expr The table expression to annotate.\n * @param {[number?, number?]} [frame=[-Infinity, 0]] The sliding window frame\n *  offsets. Each entry indicates an offset from the current value. If an\n *  entry is non-finite, the frame will be unbounded in that direction,\n *  including all preceding or following values. If unspecified, the frame\n *  will include the current values and all preceding values.\n * @param {boolean} [includePeers=false] Indicates if the sliding window frame\n *  should ignore peer (tied) values. If false (the default), the window frame\n *  boundaries are insensitive to peer values. If `true`, the window frame\n *  expands to include all peers. This parameter only affects operations that\n *  depend on the window frame: aggregate functions and the first_value,\n *  last_value, and nth_value window functions.\n * @return A new wrapped expression annotated with rolling window parameters.\n * @example rolling(d => mean(d.colA), [-3, 3])\n * @example rolling(d => last_value(d.colA), null, true)\n */\nexport default function(expr, frame, includePeers) {\n  return wrap(expr, {\n    window: {\n      frame: frame || [-Infinity, 0],\n      peers: !!includePeers\n    }\n  });\n}","import wrap from './wrap';\n\n/**\n * Annotate a table expression to indicate descending sort order.\n * @param {string|Function|Object} expr The table expression to annotate.\n * @return {Object} A wrapped expression indicating descending sort.\n * @example desc('colA')\n * @example desc(d => d.colA)\n */\nexport default function(expr) {\n  return wrap(expr, { desc: true });\n}","import __dedupe from './dedupe';\nimport __derive from './derive';\nimport __except from './except';\nimport __filter from './filter';\nimport __fold from './fold';\nimport __intersect from './intersect';\nimport __join from './join';\nimport __join_filter from './join-filter';\nimport __lookup from './lookup';\nimport __pivot from './pivot';\nimport __rollup from './rollup';\nimport __sample from './sample';\nimport __select from './select';\nimport __spread from './spread';\nimport __union from './union';\nimport __unroll from './unroll';\nimport __groupby from './groupby';\nimport __orderby from './orderby';\n\nimport __concat from '../engine/concat';\nimport __reduce from '../engine/reduce';\nimport __ungroup from '../engine/ungroup';\nimport __unorder from '../engine/unorder';\n\nimport ColumnTable from '../table/column-table';\nimport mapObject from '../util/map-object';\n\nObject.assign(ColumnTable.prototype, {\n  __concat,\n  __dedupe,\n  __derive,\n  __except,\n  __filter,\n  __fold,\n  __intersect,\n  __join,\n  __join_filter,\n  __lookup,\n  __pivot,\n  __rollup,\n  __sample,\n  __select,\n  __spread,\n  __union,\n  __unroll,\n  __groupby,\n  __orderby,\n  __ungroup,\n  __unorder,\n  __reduce\n});\n\nexport { default as op } from '../op/op-api';\nexport { default as bin } from './expr/bin';\nexport { default as desc } from './expr/desc';\nexport { default as field } from './expr/field';\nexport { default as rolling } from './expr/rolling';\nexport { all, not, range } from './expr/selection';\n\n/**\n * Create a new table for a set of named columns.\n * @param {Object.<string, Array|TypedArray>} columns\n *  The set of named column arrays.\n *  Object keys are the column names.\n *  The enumeration order of the keys determines the column indices.\n *  Object values must be arrays (or array-like values) of identical length.\n * @return {ColumnTable} the instantiated table\n * @example table({ colA: ['a', 'b', 'c'], colB: [3, 4, 5] })\n */\nexport function table(columns) {\n  return new ColumnTable(mapObject(columns, x => x));\n}\n\n/**\n * Create a new table from an existing object, such as an array of\n * objects or a set of key-value pairs.\n * @param {Object|Array|Map} values Data values to populate the table.\n *  If array-valued or iterable, imports rows for each non-null value,\n *  using the provided column names as keys for each row object. If no\n *  names are provided, the first non-null object's own keys are used.\n *  If object- or Map-valued, create columns for the keys and values.\n * @param {string[]} [names] Column names to include.\n *  For object or Map values, specifies the key and value column names.\n *  Otherwise, specifies the keys to look up on each row object.\n * @return {ColumnTable} the instantiated table.\n * @example from([ { colA: 1, colB: 2 }, { colA: 3, colB: 4 } ])\n */\nexport function from(values, names) {\n  return ColumnTable.from(values, names);\n}","import Column from '../table/column';\n\nexport default function(table, others) {\n  if (others.length === 0) return table;\n\n  const tables = [table, ...others];\n  const names = table.columnNames();\n  const nrows = tables.reduce((n, t) => n + t.numRows(), 0);\n  const data = {};\n\n  names.forEach(name => {\n    const arr = Array(nrows);\n    let row = 0;\n    tables.forEach(table => {\n      const col = table.column(name) || { get: () => undefined };\n      table.scan(trow => arr[row++] = col.get(trow));\n    });\n    data[name] = Column.from(arr);\n  });\n\n  return table.create({\n    data,\n    filter: null,\n    groups: null,\n    order:  null\n  });\n}","import uniqueName from '../util/unique-name';\n\nexport default function(table, keys = []) {\n  const names = table.columnNames();\n  const num = uniqueName(names, '_num');\n  keys = keys.length ? keys : names;\n\n  return table\n    .groupby(keys)\n    .derive({ [num]: 'row_number()' })\n    .filter(`d.${num} === 1`)\n    .select(names)\n    .reify();\n}","export default function(names, prefix) {\n  const set = new Set(names);\n  let name = prefix;\n  let index = 0;\n  while (set.has(name)) {\n    name = `${prefix}_${++index}`;\n  }\n  return name;\n}","import _derive from '../engine/derive';\nimport parse from '../expression/parse';\n\nexport default function(table, values) {\n  return _derive(table, parse(values, { table }));\n}","export default function(table, others) {\n  if (others.length === 0) return table;\n  const names = table.columnNames();\n  return others.reduce((a, b) => a.antijoin(b.select(names)), table).dedupe();\n}","import _derive from '../engine/derive';\nimport _filter from '../engine/filter';\nimport parse from '../expression/parse';\n\nexport default function(table, criteria) {\n  const expr = parse({ test: criteria }, { table });\n  let { test } = expr.values;\n  if (expr.ops.length) {\n    const bv = _derive(table, expr).column('test');\n    test = row => bv.get(row);\n  }\n  return _filter(table, test);\n}","import BitSet from '../table/bit-set';\n\nexport default function(table, predicate) {\n  const filter = new BitSet(table.totalRows());\n\n  table.scan((row, data) => {\n    if (predicate(row, data)) {\n      filter.set(row);\n    }\n  });\n\n  return table.create({ filter });\n}","import _fold from '../engine/fold';\nimport parse from './expr/parse';\n\nexport default function(table, values, options) {\n  return _fold(table, parse('fold', table, values), options);\n}","import unroll from './unroll';\nimport { aggregateGet } from './reduce/util';\n\nexport default function(table, { values = {}, ops = [] }, options = {}) {\n  const keys = Object.keys(values);\n  const n = keys.length;\n  if (n === 0) return table;\n\n  const as = options.as || [];\n  const vals = aggregateGet(table, ops, Object.values(values));\n  const exprs = {\n    values: {\n      [as[0] || 'key']: () => keys,\n      [as[1] || 'value']: (row, data) => vals.map(fn => fn(row, data))\n    }\n  };\n\n  return unroll(table, exprs, { ...options, drop: values });\n}","export default function(table, others) {\n  const names = table.columnNames();\n  return others.length\n    ? others.reduce((a, b) => a.semijoin(b.select(names)), table).dedupe()\n    : table.reify([]);\n}","import _join_filter from '../engine/join-filter';\nimport parseKey from './expr/parse-key';\nimport parse from '../expression/parse';\nimport intersect from '../util/intersect';\nimport isArray from '../util/is-array';\n\nexport default function(tableL, tableR, on, options) {\n  if (!on) {\n    // perform natural join if join condition not provided\n    const isect = intersect(tableL.columnNames(), tableR.columnNames());\n    on = [isect, isect];\n  }\n\n  on = isArray(on)\n    ? toPredicate(\n        parseKey('join', tableL, on[0]),\n        parseKey('join', tableR, on[1])\n      )\n    : parse({ on }, { join: [tableL, tableR] }).values.on;\n\n  return _join_filter(tableL, tableR, on, options);\n}\n\nfunction toPredicate(keyL, keyR) {\n  return (rowL, dataL, rowR, dataR) => {\n    const kl = keyL(rowL, dataL);\n    const kr = keyR(rowR, dataR);\n    return kl === kr && kl != null && kr != null;\n  };\n}","import BitSet from '../table/bit-set';\n\nexport default function(tableL, tableR, predicate, options = {}) {\n  const filter = new BitSet(tableL.totalRows());\n\n  // initialize data for right table\n  const dataR = tableR.data();\n  const idxR = tableR.indices(false);\n  const nR = idxR.length;\n\n  // scan tables, record matches against left table\n  tableL.scan((rowL, dataL) => {\n    for (let j = 0; j < nR; ++j) {\n      if (predicate(rowL, dataL, idxR[j], dataR)) {\n        filter.set(rowL);\n        break;\n      }\n    }\n  });\n\n  // if anti-join, negate the filter\n  if (options.anti) {\n    filter.not();\n  }\n\n  return tableL.create({ filter });\n}","import _lookup from '../engine/lookup';\nimport parseKey from './expr/parse-key';\nimport parseValues from './expr/parse';\n\nexport default function(tableL, tableR, [keyL, keyR], values) {\n  return _lookup(\n    tableL,\n    tableR,\n    [ parseKey('lookup', tableL, keyL), parseKey('lookup', tableR, keyR) ],\n    parseValues('lookup', tableR, values)\n  );\n}","import { aggregateGet } from './reduce/util';\n\nexport default function(tableL, tableR, [keyL, keyR], { values, ops }) {\n  // instantiate output data\n  const data = { ...tableL.columns() };\n  const names = Object.keys(values);\n  const total = tableL.totalRows();\n  names.forEach(name => data[name] = Array(total));\n\n  // build lookup table\n  const lut = new Map();\n  tableR.scan((row, data) => {\n    const key = keyR(row, data);\n    if (key != null && key === key) {\n      lut.set(keyR(row, data), row);\n    }\n  });\n\n  // find matching rows\n  const rowL = new Int32Array(tableL.numRows());\n  const rowR = new Int32Array(tableL.numRows());\n  let m = 0;\n  tableL.scan((lrow, data) => {\n    const rrow = lut.get(keyL(lrow, data));\n    rowL[m] = lrow;\n    rowR[m] = rrow == null ? -1 : rrow;\n    ++m;\n  });\n\n  // output values for matching rows\n  const dataR = tableR.data();\n  const get = aggregateGet(tableR, ops, Object.values(values));\n  const n = get.length;\n\n  for (let i = 0; i < n; ++i) {\n    const column = data[names[i]];\n    const getter = get[i];\n    for (let j = 0; j < m; ++j) {\n      const rrow = rowR[j];\n      column[rowL[j]] = rrow >= 0 ? getter(rrow, dataR) : undefined;\n    }\n  }\n\n  return tableL.create({ data });\n}","import _rollup from '../engine/rollup';\nimport parse from '../expression/parse';\n\nexport default function(table, values) {\n  // TODO: parser should enforce no column refs in output values\n  return _rollup(table, parse(values, { table }));\n}","import sample from '../util/sample';\n\nexport default function(table, size, weight, options = {}) {\n  const replace = !!options.replace;\n  const parts = table.partitions(false);\n\n  let total = 0;\n  size = parts.map((idx, group) => {\n    let s = size(group);\n    total += (s = (replace ? s : Math.min(idx.length, s)));\n    return s;\n  });\n\n  const samples = new Uint32Array(total);\n  let curr = 0;\n\n  parts.forEach((idx, group) => {\n    const sz = size[group];\n    const buf = samples.subarray(curr, curr += sz);\n\n    if (!replace && sz === idx.length) {\n      // sample size === data size, no replacement\n      // no need to sample, just copy indices\n      buf.set(idx);\n    } else {\n      sample(buf, replace, idx, weight);\n    }\n  });\n\n  return table.reify(samples);\n}","import _select from '../engine/select';\nimport resolve from './expr/selection';\n\nexport default function(table, columns) {\n  return _select(table, resolve(table, columns));\n}","import error from '../util/error';\nimport isString from '../util/is-string';\n\nexport default function(table, columns) {\n  const data = {};\n\n  for (const curr in columns) {\n    const value = columns[curr];\n    const next = isString(value) ? value : curr;\n    if (next) {\n      data[next] = table.column(curr) || error(`Unrecognized column: ${curr}`);\n    }\n  }\n\n  return table.create({ data });\n}","import _spread from '../engine/spread';\nimport parse from './expr/parse';\n\nexport default function(table, values, options) {\n  return _spread(table, parse('spread', table, values), options);\n}","export default function(table, others) {\n  return table.concat(others).dedupe();\n}","import _unroll from '../engine/unroll';\nimport parse from './expr/parse';\n\nexport default function(table, values, options) {\n  return _unroll(\n    table,\n    parse('unroll', table, values),\n    options && options.drop\n      ? { ...options, drop: parse('unroll', table, options.drop).values }\n      : options\n  );\n}","import _groupby from '../engine/groupby';\nimport parse from './expr/parse';\n\nexport default function(table, values) {\n  return _groupby(table, parse('groupby', table, values));\n}","import _orderby from '../engine/orderby';\nimport field from './expr/field';\nimport parse from '../expression/compare';\nimport error from '../util/error';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport isNumber from '../util/is-number';\nimport isString from '../util/is-string';\n\nexport default function(table, values) {\n  return _orderby(table, parseValues(table, values));\n}\n\nfunction parseValues(table, params) {\n  const exprs = {};\n\n  let index = -1;\n  params.forEach(param => {\n    const expr = param.expr != null ? param.expr : param;\n\n    if (isObject(expr) && !isFunction(expr)) {\n      for (const key in expr) {\n        exprs[++index] = expr[key];\n      }\n    } else {\n      param = isNumber(expr) ? field(param, table.columnName(expr))\n        : isString(expr) ? field(param)\n        : isFunction(expr) ? param\n        : error(`Invalid orderby field: ${param+''}`);\n      exprs[++index] = param;\n    }\n  });\n\n  return parse(table, exprs);\n}","export default function(table, comparator) {\n  return table.create({ order: comparator });\n}\n","export default function(table) {\n  return table.isGrouped()\n    ? table.create({ groups: null })\n    : table;\n}","export default function(table) {\n  return table.isOrdered()\n    ? table.create({ order: null })\n    : table;\n}","import error from '../util/error';\nimport isArray from '../util/is-array';\nimport isFunction from '../util/is-function';\nimport isNumber from '../util/is-number';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\nimport toArray from '../util/to-array';\nimport parse from '../expression/parse';\nimport { isSelection, toObject } from './util';\n\nimport { Column } from '../expression/ast/constants';\nimport {\n  Descending,\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  Selection,\n  SelectionList,\n  TableRef,\n  TableRefList,\n  Window\n} from './constants';\n\nconst Methods = {\n  [Expr]: astExpr,\n  [ExprList]: astExprList,\n  [ExprNumber]: astExprNumber,\n  [ExprObject]: astExprObject,\n  [JoinKeys]: astJoinKeys,\n  [JoinValues]: astJoinValues,\n  [OrderbyKeys]: astExprList,\n  [SelectionList]: astSelectionList\n};\n\nexport default function(value, type, propTypes) {\n  return type === TableRef ? astTableRef(value)\n    : type === TableRefList ? value.map(astTableRef)\n    : ast(toObject(value), type, propTypes);\n}\n\nfunction ast(value, type, propTypes) {\n  return type === Options\n    ? (value ? astOptions(value, propTypes) : value)\n    : Methods[type](value);\n}\n\nfunction astOptions(value, types = {}) {\n  const output = {};\n  for (const key in value) {\n    const prop = value[key];\n    output[key] = types[key] ? ast(prop, types[key]) : prop;\n  }\n  return output;\n}\n\nfunction astParse(expr, opt) {\n  return parse({ expr }, { ...opt, ast: true }).expr;\n}\n\nfunction astColumn(name) {\n  return { type: Column, name };\n}\n\nfunction astColumnIndex(index) {\n  return { type: Column, index };\n}\n\nfunction astExprObject(obj, opt) {\n  if (isString(obj)) {\n    return astParse(obj, opt);\n  }\n\n  if (obj.expr) {\n    let ast;\n    if (obj.field === true) {\n      ast = astColumn(obj.expr);\n    } else if (obj.func === true) {\n      ast = astExprObject(obj.expr, opt);\n    }\n    if (ast) {\n      if (obj.desc) {\n        ast = { type: Descending, expr: ast };\n      }\n      if (obj.window) {\n        ast = { type: Window, expr: ast, ...obj.window };\n      }\n      return ast;\n    }\n  }\n\n  return Object.keys(obj)\n    .map(key => ({\n      ...astExprObject(obj[key], opt),\n      as: key\n    }));\n}\n\nfunction astSelection(sel) {\n  const type = Selection;\n  return sel.all ? { type, operator: 'all' }\n    : sel.not ? { type, operator: 'not', arguments: astExprList(sel.not) }\n    : sel.range ? { type, operator: 'range', arguments: astExprList(sel.range) }\n    : error('Invalid input');\n}\n\nfunction astSelectionList(arr) {\n  return toArray(arr).map(astSelectionItem).flat();\n}\n\nfunction astSelectionItem(val) {\n  return isSelection(val) ? astSelection(val)\n    : isNumber(val) ? astColumnIndex(val)\n    : isString(val) ? astColumn(val)\n    : isObject(val) ? Object.keys(val)\n      .map(name => ({ type: Column, name, as: val[name] }))\n    : error('Invalid input');\n}\n\nfunction astExpr(val) {\n  return isSelection(val) ? astSelection(val)\n    : isNumber(val) ? astColumnIndex(val)\n    : isString(val) ? astColumn(val)\n    : isObject(val) ? astExprObject(val)\n    : error('Invalid input');\n}\n\nfunction astExprList(arr) {\n  return toArray(arr).map(astExpr).flat();\n}\n\nfunction astExprNumber(val) {\n  return isNumber(val) ? val : astExprObject(val);\n}\n\nfunction astJoinKeys(val) {\n  return isArray(val)\n    ? val.map(astExprList)\n    : astExprObject(val, { join: true });\n}\n\nfunction astJoinValues(val) {\n  return isArray(val)\n    ? val.map((v, i) => i < 2\n        ? astExprList(v)\n        : astExprObject(v, { join: true })\n      )\n    : astExprObject(val, { join: true });\n}\n\nfunction astTableRef(value) {\n  return value && isFunction(value.toAST)\n    ? value.toAST()\n    : value;\n}","import { Verb as VerbType } from './constants';\n\nimport {\n  fromObject,\n  getTable,\n  joinKeys,\n  joinValues,\n  orderbyKeys,\n  toObject\n} from './util';\n\nimport {\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  SelectionList,\n  TableRef,\n  TableRefList\n} from './constants';\n\nimport toAST from './to-ast';\n\n/**\n * Model an Arquero verb as a serializable object.\n */\nexport class Verb {\n\n  /**\n   * Construct a new verb instance.\n   * @param {string} verb The verb name.\n   * @param {object[]} schema Schema describing verb parameters.\n   * @param {any[]} params Array of parameter values.\n   */\n  constructor(verb, schema = [], params = []) {\n    this.verb = verb;\n    this.schema = schema;\n    schema.forEach((s, index) => {\n      const type = s.type;\n      const param = params[index];\n      const value = type === JoinKeys ? joinKeys(param)\n        : type === JoinValues ? joinValues(param)\n        : type === OrderbyKeys ? orderbyKeys(param)\n        : param;\n      this[s.name] = value !== undefined ? value : s.default;\n    });\n  }\n\n  /**\n   * Create new verb instance from the given serialized object.\n   * @param {object} object A serialized verb representation, such as\n   *  those generated by Verb.toObject.\n   * @returns {Verb} The instantiated verb.\n   */\n  static from(object) {\n    const verb = Verbs[object.verb];\n    const params = (verb.schema || [])\n      .map(({ name }) => fromObject(object[name]));\n    return verb(...params);\n  }\n\n  /**\n   * Evaluate this verb against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    const params = this.schema.map(({ name, type }) => {\n      const value = this[name];\n      return type === TableRef ? getTable(catalog, value)\n        : type === TableRefList ? value.map(t => getTable(catalog, t))\n        : value;\n    });\n    return table[this.verb](...params);\n  }\n\n  /**\n   * Serialize this verb as a JSON-compatible object. The resulting\n   * object can be passed to Verb.from to re-instantiate this verb.\n   * @returns {object} A JSON-compatible object representing this verb.\n   */\n  toObject() {\n    const obj = { verb: this.verb };\n    this.schema.forEach(({ name }) => {\n      obj[name] = toObject(this[name]);\n    });\n    return obj;\n  }\n\n  /**\n   * Serialize this verb to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero verbs to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    const obj = { type: VerbType, verb: this.verb };\n    this.schema.forEach(({ name, type, props }) => {\n      obj[name] = toAST(this[name], type, props);\n    });\n    return obj;\n  }\n}\n\nfunction createVerb(name, schema) {\n  return Object.assign(\n    (...params) => new Verb(name, schema, params),\n    { schema }\n  );\n}\n\n/**\n * A lookup table of verb classes.\n */\nexport const Verbs = {\n  count:      createVerb('count', [\n                { name: 'options', type: Options }\n              ]),\n  dedupe:     createVerb('dedupe', [\n                { name: 'keys', type: ExprList, default: [] }\n              ]),\n  derive:     createVerb('derive', [\n                { name: 'values', type: ExprObject }\n              ]),\n  filter:     createVerb('filter', [\n                { name: 'criteria', type: ExprObject }\n              ]),\n  groupby:    createVerb('groupby', [\n                { name: 'keys', type: ExprList }\n              ]),\n  orderby:    createVerb('orderby', [\n                { name: 'keys', type: OrderbyKeys }\n              ]),\n  rollup:     createVerb('rollup', [\n                { name: 'values', type: ExprObject }\n              ]),\n  sample:     createVerb('sample', [\n                { name: 'size', type: ExprNumber },\n                { name: 'options', type: Options, props: { weight: Expr } }\n              ]),\n  select:     createVerb('select', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  ungroup:    createVerb('ungroup'),\n  unorder:    createVerb('unorder'),\n  reify:      createVerb('reify'),\n  fold:       createVerb('fold', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  pivot:      createVerb('pivot', [\n                { name: 'keys', type: ExprList },\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  spread:     createVerb('spread', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  unroll:     createVerb('unroll', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options, props: { drop: ExprList } }\n              ]),\n  lookup:     createVerb('lookup', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: ExprList }\n              ]),\n  join:       createVerb('join', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  cross:      createVerb('cross', [\n                { name: 'table', type: TableRef },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  semijoin:   createVerb('semijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  antijoin:   createVerb('antijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  concat:     createVerb('concat', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  union:      createVerb('union', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  intersect:  createVerb('intersect', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  except:     createVerb('except', [\n                { name: 'tables', type: TableRefList }\n              ])\n};\n\n\n// export const Reify = createVerb('reify');\n\n// export const Count = createVerb('count', [\n//   { name: 'options', type: Options }\n// ]);\n\n// export const Dedupe = createVerb('dedupe', [\n//   { name: 'keys', type: ExprList, default: [] }\n// ]);\n\n// export const Derive = createVerb('derive', [\n//   { name: 'values', type: ExprObject }\n// ]);\n\n// export const Filter = createVerb('filter', [\n//   { name: 'criteria', type: ExprObject }\n// ]);\n\n// export const Groupby = createVerb('groupby', [\n//   { name: 'keys', type: ExprList }\n// ]);\n\n// export const Orderby = createVerb('orderby', [\n//   { name: 'keys', type: OrderbyKeys }\n// ]);\n\n// export const Rollup = createVerb('rollup', [\n//   { name: 'values', type: ExprObject }\n// ]);\n\n// export const Sample = createVerb('sample', [\n//   { name: 'size', type: ExprNumber },\n//   { name: 'options', type: Options, props: { weight: Expr } }\n// ]);\n\n// export const Select = createVerb('select', [\n//   { name: 'columns', type: SelectionList }\n// ]);\n\n// export const Ungroup = createVerb('ungroup');\n\n// export const Unorder = createVerb('unorder');\n\n// export const Fold = createVerb('fold', [\n//   { name: 'values', type: ExprList },\n//   { name: 'options', type: Options }\n// ]);\n\n// export const Pivot = createVerb('pivot', [\n//   { name: 'keys', type: ExprList },\n//   { name: 'values', type: ExprList },\n//   { name: 'options', type: Options }\n// ]);\n\n// export const Spread = createVerb('spread', [\n//   { name: 'values', type: ExprList },\n//   { name: 'options', type: Options }\n// ]);\n\n// export const Unroll = createVerb('unroll', [\n//   { name: 'values', type: ExprList },\n//   { name: 'options', type: Options, props: { drop: ExprList } }\n// ]);\n\n// export const Lookup = createVerb('lookup', [\n//   { name: 'table', type: TableRef },\n//   { name: 'on', type: JoinKeys },\n//   { name: 'values', type: ExprList }\n// ]);\n\n// export const Join = createVerb('join', [\n//   { name: 'table', type: TableRef },\n//   { name: 'on', type: JoinKeys },\n//   { name: 'values', type: JoinValues },\n//   { name: 'options', type: Options }\n// ]);\n\n// export const Cross = createVerb('cross', [\n//   { name: 'table', type: TableRef },\n//   { name: 'values', type: JoinValues },\n//   { name: 'options', type: Options }\n// ]);\n\n// export const Semijoin = createVerb('semijoin', [\n//   { name: 'table', type: TableRef },\n//   { name: 'on', type: JoinKeys }\n// ]);\n\n// export const Antijoin = createVerb('antijoin', [\n//   { name: 'table', type: TableRef },\n//   { name: 'on', type: JoinKeys }\n// ]);\n\n// export const Concat = createVerb('concat', [\n//   { name: 'tables', type: TableRefList }\n// ]);\n\n// export const Union = createVerb('union', [\n//   { name: 'tables', type: TableRefList }\n// ]);\n\n// export const Intersect = createVerb('intersect', [\n//   { name: 'tables', type: TableRefList }\n// ]);\n\n// export const Except = createVerb('except', [\n//   { name: 'tables', type: TableRefList }\n// ]);\n\n// /**\n//  * A lookup table of verb classes.\n//  */\n// export const Verbs = {\n//   count:     Count,\n//   dedupe:    Dedupe,\n//   derive:    Derive,\n//   filter:    Filter,\n//   groupby:   Groupby,\n//   orderby:   Orderby,\n//   rollup:    Rollup,\n//   sample:    Sample,\n//   select:    Select,\n//   ungroup:   Ungroup,\n//   unorder:   Unorder,\n//   fold:      Fold,\n//   pivot:     Pivot,\n//   spread:    Spread,\n//   unroll:    Unroll,\n//   lookup:    Lookup,\n//   join:      Join,\n//   cross:     Cross,\n//   semijoin:  Semijoin,\n//   antijoin:  Antijoin,\n//   concat:    Concat,\n//   union:     Union,\n//   intersect: Intersect,\n//   except:    Except\n// };","import { Query as QueryType } from './constants';\nimport { Verb } from './verb';\n\n/**\n * Model a query as a collection of serializble verbs.\n */\nexport default class Query {\n\n  /**\n   * Construct a new query instance.\n   * @param {Verb[]} verbs An array of verb instances.\n   * @param {object} [params] Optional query parameters, corresponding\n   *  to parameter references in table expressions.\n   * @param {string} [table] Optional name of the table to query.\n   */\n  constructor(verbs, params, table) {\n    this._verbs = verbs || [];\n    this._params = params || null;\n    this._table = table;\n  }\n\n  /**\n   * Create a new query instance from the given serialized object.\n   * @param {object} object A serialized query representation, such as\n   *  those generated by Query.toObject.\n   * @returns {Query} The instantiated query.\n   */\n  static from({ verbs, table, params }) {\n    return new Query(verbs.map(Verb.from), params, table);\n  }\n\n  /**\n   * Return the number of verbs in this query.\n   */\n  get length() {\n    return this._verbs.length;\n  }\n\n  /**\n   * Return the name of the table this query applies to.\n   * @return {string} The name of the source table, or undefined.\n   */\n  get tableName() {\n    return this._table;\n  }\n\n  /**\n   * Get or set table expression parameter values.\n   * If called with no arguments, returns the current parameter values\n   * as an object. Otherwise, adds the provided parameters to this\n   * query's parameter set and returns the table. Any prior parameters\n   * with names matching the input parameters are overridden.\n   * @param {Object} values The parameter values.\n   * @return {Query|Object} The current parameter values (if called\n   *  with no arguments) or this query.\n   */\n  params(values) {\n    if (arguments.length) {\n      this._params = { ...this._params, ...values };\n      return this;\n    } else {\n      return this._params;\n    }\n  }\n\n  /**\n   * Evaluate this query against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    table = table || catalog(this._table);\n    for (const verb of this._verbs) {\n      table = verb.evaluate(table.params(this._params), catalog);\n    }\n    return table;\n  }\n\n  /**\n   * Serialize this query as a JSON-compatible object. The resulting\n   * object can be passed to Query.from to re-instantiate this query.\n   * @returns {object} A JSON-compatible object representing this query.\n   */\n  toObject() {\n    return serialize(this, 'toObject');\n  }\n\n  /**\n   * Serialize this query as a JSON-compatible object. The resulting\n   * object can be passed to Query.from to re-instantiate this query.\n   * This method simply returns the result of toObject, but is provided\n   * as a separate method to allow later customization of JSON export.\n   * @returns {object} A JSON-compatible object representing this query.\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Serialize this query to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero queries to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    return serialize(this, 'toAST', { type: QueryType });\n  }\n}\n\nfunction serialize(query, method, props) {\n  return {\n    ...props,\n    verbs: query._verbs.map(verb => verb[method]()),\n    ...(query._params ? { params: query._params } : null),\n    ...(query._table ? { table: query._table } : null)\n  };\n}","import Query from '../query/query';\nimport { Verb, Verbs } from '../query/verb';\n\n/**\n * Create a new query builder instance. The query builder provides\n * a table-like verb API to construct a query that can be\n * serialized or evaluated against Arquero tables.\n * @param {string} [tableName] The name of the table to query. If\n *  provided, will be used as the default input table to pull from\n *  a provided catalog to run the query against.\n * @return {QueryBuilder} A new query builder instance.\n */\nexport function query(tableName) {\n  return new QueryBuilder(tableName);\n}\n\n/**\n * Create a new query builder instance from a serialized object.\n * @param {object} object A serialized query representation, such as\n *  those generated by query(...).toObject().\n * @returns {QueryBuilder} The instantiated query builder.\n */\nexport function queryFrom(object) {\n  return QueryBuilder.from(object);\n}\n\n/**\n * Table-like interface for constructing queries.\n */\nexport default class QueryBuilder extends Query {\n\n  /**\n   * Construct a new query builder instance.\n   */\n  constructor(source, verbs, params) {\n    super(verbs, params, source);\n  }\n\n  /**\n   * Create a new query builder instance from a serialized object.\n   * @param {object} object A serialized query representation, such as\n   *  those generated by QueryBuilder.toObject().\n   * @returns {QueryBuilder} The instantiated query builder.\n   */\n  static from({ verbs, table, params }) {\n    return new QueryBuilder(\n      table,\n      verbs.map(Verb.from),\n      params\n    );\n  }\n\n  /**\n   * Provide an informative object string tag.\n   */\n  get [Symbol.toStringTag]() {\n    if (!this._verbs) return 'Object'; // bail if called on prototype\n    const ns = this._verbs.length;\n    return `QueryBuilder: ${ns} verbs`\n      + (this._table ? ` on '${this._table}'` : '');\n  }\n\n  /**\n   * Append a verb to the current query and return a new query builder.\n   * @param {Verb} verb The verb to append to the query.\n   * @return {QueryBuilder} A new QueryBuilder with appended verb.\n   */\n  append(verb) {\n    return new QueryBuilder(\n      this._table,\n      this._verbs.concat(verb),\n      this._params\n    );\n  }\n\n  // -- Transformation Verbs ------------------------------------------------\n\n  /**\n   * Fully materialize an instance of a table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {QueryBuilder} A new builder with \"reify\" verb appended.\n   */\n  reify() {\n    return this.append(Verbs.reify());\n  }\n\n  /**\n   * Options for count transformations.\n   * @typedef {Object} CountOptions\n   * @property {string} [as='count'] The name of the output count column.\n   */\n\n  /**\n   * Count the number of values in a group. This method is a shorthand\n   * for {@link QueryBuilder#rollup} with a count aggregate function.\n   * @param {CountOptions} [options] Options for the count.\n   * @return {QueryBuilder} A new builder with \"count\" verb appended.\n   * @example query.groupby('colA').count()\n   * @example query.groupby('colA').count({ as: 'num' })\n   */\n  count(options) {\n    return this.append(Verbs.count(options));\n  }\n\n  /**\n   * De-duplicate table rows by removing repeated row values.\n   * @param  {...any} [keys] Key columns to check for duplicates.\n   *  Two rows are considered duplicates if they have matching values\n   *  for all keys. If keys are unspecified, all columns are used.\n   *  Keys may be column name strings, column index numbers, or value\n   *  objects with output column names for keys and table expressions\n   *  for values.\n   * @return {QueryBuilder} A new builder with \"dedupe\" verb appended.\n   * @example query.dedupe()\n   * @example query.dedupe('a', 'b')\n   * @example query.dedupe({ abs: d => op.abs(d.a) })\n   */\n  dedupe(...keys) {\n    return this.append(Verbs.dedupe(keys.flat()));\n  }\n\n  /**\n   * Derive new column values based on the provided expressions.\n   * @param {Object} values Object of name-value pairs defining the\n   *  columns to derive. The input object should have output column\n   *  names for keys and table expressions for values.\n   * @return {QueryBuilder} A new builder with \"derive\" verb appended.\n   * @example query.derive({ sumXY: d => d.x + d.y })\n   */\n  derive(values) {\n    return this.append(Verbs.derive(values));\n  }\n\n  /**\n   * Filter a table to a subset of rows based on the input criteria.\n   * The resulting table provides a filtered view over the original data;\n   * no data copy is made. To create a table that copies only filtered data\n   * to new data structures, call {@link QueryBuilder#reify} on the output table.\n   * @param {Function} criteria The filter criteria as a table expression.\n   *  Both aggregate and window functions are permitted, and will take into\n   *  account any {@link QueryBuilder#groupby} or {@link QueryBuilder#orderby} settings.\n   * @return {QueryBuilder} A new builder with \"filter\" verb appended.\n   * @example query.filter(d => abs(d.value) < 5)\n   */\n  filter(criteria) {\n    return this.append(Verbs.filter(criteria));\n  }\n\n  /**\n   * Group table rows based on a set of column values.\n   * Subsequent operations that are sensitive to grouping (such as\n   * aggregate functions) will operate over the grouped rows.\n   * To undo grouping, use {@link QueryBuilder#ungroup}.\n   * @param  {...any} keys Key column values to group by.\n   *  Keys may be column name strings, column index numbers, or value\n   *  objects with output column names for keys and table expressions\n   *  for values.\n   * @return {QueryBuilder} A new builder with \"groupby\" verb appended.\n   * @example query.groupby('colA', 'colB')\n   * @example query.groupby({ key: d => d.colA + d.colB })\n   */\n  groupby(...keys) {\n    return this.append(Verbs.groupby(keys.flat()));\n  }\n\n  /**\n   * Order table rows based on a set of column values.\n   * Subsequent operations sensitive to ordering (such as window functions)\n   * will operate over sorted values.\n   * The resulting table provides an view over the original data, without\n   * any copying. To create a table with sorted data copied to new data\n   * strucures, call {@link QueryBuilder#reify} on the result of this method.\n   * To undo ordering, use {@link QueryBuilder#unorder}.\n   * @param  {...any} keys Key values to sort by, in precedence order.\n   *  By default, sorting is done in ascending order.\n   *  To sort in descending order, wrap values using {@link desc}.\n   *  If a string, order by the column with that name.\n   *  If a number, order by the column with that index.\n   *  If a function, must be a valid table expression; aggregate functions\n   *  are permitted, but window functions are not.\n   *  If an object, object values must be valid values parameters\n   *  with output column names for keys and table expressions\n   *  for values (the output names will be ignored).\n   *  If an array, array values must be valid key parameters.\n   * @return {QueryBuilder} A new builder with \"orderby\" verb appended.\n   * @example query.orderby('a', desc('b'))\n   * @example query.orderby({ a: 'a', b: desc('b') )})\n   * @example query.orderby(desc(d => d.a))\n   */\n  orderby(...keys) {\n    return this.append(Verbs.orderby(keys.flat()));\n  }\n\n  /**\n   * Rollup a table to produce an aggregate summary.\n   * Often used in conjunction with {@link QueryBuilder#groupby}.\n   * To produce counts only, {@link QueryBuilder#count} is a convenient shortcut.\n   * @param {Object} values Object of name-value pairs defining aggregated\n   *  output columns. The input object should have output column\n   *  names for keys and table expressions for values.\n   * @return {QueryBuilder} A new builder with \"rollup\" verb appended.\n   * @example query.groupby('colA').rollup({ mean: d => mean(d.colB) })\n   * @example query.groupby('colA').rollup({ mean: op.median('colB') })\n   */\n  rollup(values) {\n    return this.append(Verbs.rollup(values));\n  }\n\n  /**\n   * Options for sample transformations.\n   * @typedef {Object} SampleOptions\n   * @property {boolean} [replace=false] Flag for sampling with replacement.\n   * @property {Function|string} [weight] Column values to use as weights\n   *  for sampling. Rows will be sampled with probability proportional to\n   *  their relative weight. The input should be a column name string or\n   *  a table expression compatible with {@link QueryBuilder#derive}.\n   */\n\n  /**\n   * Generate a table from a random sample of rows.\n   * If the table is grouped, performs a stratified sample by\n   * sampling from each group separately.\n   * @param {number|Function} size The number of samples to draw per group.\n   *  If number-valued, the same sample size is used for each group.\n   *  If function-valued, the input should be an aggregate table\n   *  expression compatible with {@link QueryBuilder#rollup}.\n   * @param {SampleOptions} options Options for sampling.\n   * @return {QueryBuilder} A new builder with \"sample\" verb appended.\n   * @example query.sample(50)\n   * @example query.sample(100, { replace: true })\n   * @example query.groupby('colA').sample(() => op.floor(0.5 * op.count()))\n   */\n  sample(size, options) {\n    return this.append(Verbs.sample(size, options));\n  }\n\n  /**\n   * Select a subset of columns into a new table, potentially renaming them.\n   * @param {string|string[]|number|number[]|Object|Function} columns The columns to select.\n   *  The input may consist of:\n   *  - column name strings,\n   *  - column integer indices,\n   *  - objects with current column names as keys and new column names as\n   *    values (for renaming), or\n   *  - functions that take a table as input and returns a valid selection\n   *    parameter (typically the output of the selection helper functions\n   *    {@link all}, {@link not}, or {@link range}).\n   * @return {QueryBuilder} A new builder with \"select\" verb appended.\n   * @example query.select('colA', 'colB')\n   * @example query.select(not('colB', 'colC'))\n   * @example query.select({ colA: 'newA', colB: 'newB' })\n   */\n  select(...columns) {\n    return this.append(Verbs.select(columns.flat()));\n  }\n\n  /**\n   * Ungroup a table, removing any grouping criteria.\n   * Undoes the effects of {@link QueryBuilder#groupby}.\n   * @return {QueryBuilder} A new builder with \"ungroup\" verb appended.\n   * @example query.ungroup()\n   */\n  ungroup() {\n    return this.append(Verbs.ungroup());\n  }\n\n  /**\n   * Unorder a table, removing any sorting criteria.\n   * Undoes the effects of {@link QueryBuilder#orderby}.\n   * @return {QueryBuilder} A new builder with \"unorder\" verb appended.\n   * @example query.unorder()\n   */\n  unorder() {\n    return this.append(Verbs.unorder());\n  }\n\n  // -- Reshaping Verbs -----------------------------------------------------\n\n  /**\n   * Options for fold transformations.\n   * @typedef {Object} FoldOptions\n   * @property {string[]} [as=['key', 'value']] An array indicating the\n   *  output column names to use for the key and value columns, respectively.\n   */\n\n  /**\n   * Fold one or more columns into two key-value pair columns.\n   * The fold transform is an inverse of the {@link QueryBuilder#pivot} transform.\n   * The resulting table has two new columns, one containing the column\n   * names (named \"key\") and the other the column values (named \"value\").\n   * The number of output rows equals the original row count multiplied\n   * by the number of folded columns.\n   * @param {*} values The columns to fold. The input may consist of an array\n   *  with column name strings, objects with output names as keys and current\n   *  names as values (output names will be ignored), or the output of the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   * @param {FoldOptions} options Options for folding.\n   * @return {QueryBuilder} A new builder with \"fold\" verb appended.\n   * @example query.fold('colA')\n   * @example query.fold(['colA', 'colB'])\n   * @example query.fold(range(5, 8))\n   */\n  fold(values, options) {\n    return this.append(Verbs.fold(values, options));\n  }\n\n  /**\n   * Options for pivot transformations.\n   * @typedef {Object} PivotOptions\n   * @property {number} [limit=Infinity] The maximum number of new columns to generate.\n   * @property {string} [keySeparator='_'] A string to place between multiple key names.\n   * @property {string} [valueSeparator='_'] A string to place between key and value names.\n   * @property {boolean} [sort=true] Flag for alphabetical sorting of new column names.\n   */\n\n  /**\n   * Pivot columns into a cross-tabulation.\n   * The pivot transform is an inverse of the {@link QueryBuilder#fold} transform.\n   * The resulting table has new columns for each unique combination\n   * of the provided *keys*, populated with the provided *values*.\n   * The provided *values* must be aggregates, as a single set of keys may\n   * include more than one row. If string-valued, the *any* aggregate is used.\n   * If only one *values* column is defined, the new pivoted columns will\n   * be named using key values directly. Otherwise, input value column names\n   * will be included as a component of the output column names.\n   * @param {*} keys Key values to map to new column names. Keys may be an\n   *  array of column name strings, column index numbers, or value objects\n   *  with output column names for keys and table expressions for values.\n   * @param {string|string[]|Object} values Output values for pivoted columns.\n   *  Column string names will be wrapped in any *any* aggregate.\n   *  If object-valued, the input object should have output value\n   *  names for keys and table expressions for values.\n   * @param {PivotOptions} options Options for pivoting.\n   * @return {QueryBuilder} A new builder with \"pivot\" verb appended.\n   * @example query.pivot('key', 'value')\n   * @example query.pivot(['keyA', 'keyB'], ['valueA', 'valueB'])\n   * @example query.pivot({ key: d => d.key }, { value: d => sum(d.value) })\n   */\n  pivot(keys, values, options) {\n    return this.append(Verbs.pivot(keys, values, options));\n  }\n\n  /**\n   * Options for spread transformations.\n   * @typedef {Object} SpreadOptions\n   * @property {number} [limit=Infinity] The maximum number of new columns to generate.\n   * @property {string[]} [as] Output column names to use. This option only\n   *  applies when a single column is spread. If the given array of names is\n   *  shorter than the number of generated columns, the additional columns\n   *  will be named using the standard naming convention.\n   */\n\n  /**\n   * Spread array elements into a set of new columns.\n   * Output columns are named based on the value key and array index.\n   * @param {string|Array|Object} values The columns to spread, as either\n   *  an array of column names or a key-value object of table expressions.\n   * @param {SpreadOptions} [options] Options for spreading.\n   * @return {QueryBuilder} A new builder with \"spread\" verb appended.\n   * @example query.spread({ a: split(d.text, '') })\n   * @example query.spread('arrayCol', { limit: 100 })\n   */\n  spread(values, options) {\n    return this.append(Verbs.spread(values, options));\n  }\n\n  /**\n   * Options for unroll transformations.\n   * @typedef {Object} UnrollOptions\n   * @property {number} [limit=Infinity] The maximum number of new rows\n   *  to generate per array value.\n   * @property {boolean|string} [index=false] Flag or column name for adding\n   *  zero-based array index values as an output column. If true, a new column\n   *  named \"index\" will be included. If string-valued, a new column with\n   *  the given name will be added.\n   * @property {string|string[]|number|number[]|Object|Function} [drop]\n   *  A selection of columns to drop (exclude) from the unrolled output.\n   *  The input may consist of:\n   *  - column name strings,\n   *  - column integer indices,\n   *  - objects with column names as keys,\n   *  - functions that take a table as input and returns a valid selection\n   *    parameter (typically the output of the selection helper functions\n   *    {@link all}, {@link not}, or {@link range}).\n   */\n\n  /**\n   * Unroll one or more array-valued columns into new rows.\n   * If more than one array value is used, the number of new rows\n   * is the smaller of the limit and the largest length.\n   * Values for all other columns are copied over.\n   * @param {string|Array|Object} values The columns to unroll, as either\n   *  an array of column names or a key-value object of table expressions.\n   * @param {UnrollOptions} [options] Options for unrolling.\n   * @return {QueryBuilder} A new builder with \"unroll\" verb appended.\n   * @example query.unroll('colA', { limit: 1000 })\n   */\n  unroll(values, options) {\n    return this.append(Verbs.unroll(values, options));\n  }\n\n  // -- Joins ---------------------------------------------------------------\n\n  /**\n   * Lookup values from a secondary table and add them as new columns.\n   * A lookup occurs upon matching key values for rows in both tables.\n   * If the secondary table has multiple rows with the same key, only\n   * the last observed instance will be considered in the lookup.\n   * Lookup is similar to {@link QueryBuilder#join_left}, but with a streamlined\n   * syntax and the added constraint of allowing at most one match only.\n   * @param {string} other The name of the secondary table to look up values from.\n   * @param {Array} on A two-element array of lookup keys (column name\n   *  strings or table expressions) for this table and the secondary table,\n   *  respectively.\n   * @param {string|Object} values The column values to add from the\n   *  secondary table. Can be column name strings or objects with column\n   *  names as keys and table expressions as values.\n   * @return {QueryBuilder} A new builder with \"lookup\" verb appended.\n   * @example query.lookup(other, ['key1', 'key2'], 'value1', 'value2')\n   */\n  lookup(other, on, ...values) {\n    return this.append(Verbs.lookup(other, on, values.flat()));\n  }\n\n  /**\n   * Options for join transformations.\n   * @typedef {Object} JoinOptions\n   * @property {boolean} [left=false] Flag indicating a left outer join.\n   *  If both the *left* and *right* are true, indicates a full outer join.\n   * @property {boolean} [right=false] Flag indicating a right outer join.\n   *  If both the *left* and *right* are true, indicates a full outer join.\n   * @property {string[]} [suffix=['_1', '_2']] Column name suffixes to\n   *  append if two columns with the same name are produced by the join.\n   */\n\n  /**\n   * Join two tables, extending the columns of one table with\n   * values from the other table. The current table is considered\n   * the \"left\" table in the join, and the new table input is\n   * considered the \"right\" table in the join. By default an inner\n   * join is performed, removing all rows that do not match the\n   * join criteria. To perform left, right, or full outer joins, use\n   * the {@link QueryBuilder#join_left}, {@link QueryBuilder#join_right}, or\n   * {@link QueryBuilder#join_full} methods, or provide an options argument.\n   * @param {string} other The names of the other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join.\n   * @return {QueryBuilder} A new builder with \"join\" verb appended.\n   * @example query.join(other, ['keyL', 'keyR'])\n   * @example query.join(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join(other, on, values, options) {\n    return this.append(Verbs.join(other, on, values, options));\n  }\n\n  /**\n   * Perform a left outer join on two tables. Rows in the left table\n   * that do not match a row in the right table will be preserved.\n   * This is a convenience method with fixed options for {@link QueryBuilder#join}.\n   * @param {string} other The name of the other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: true, right: false}.\n   * @return {QueryBuilder} A new builder with \"join_left\" verb appended.\n   * @example query.join_left(other, ['keyL', 'keyR'])\n   * @example query.join_left(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_left(other, on, values, options) {\n    const opt = { ...options, left: true, right: false };\n    return this.join(other, on, values, opt);\n  }\n\n  /**\n   * Perform a right outer join on two tables. Rows in the right table\n   * that do not match a row in the left table will be preserved.\n   * This is a convenience method with fixed options for {@link QueryBuilder#join}.\n   * @param {string} other The name of the other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: false, right: true}.\n   * @return {QueryBuilder} A new builder with \"join_right\" verb appended.\n   * @example query.join_right(other, ['keyL', 'keyR'])\n   * @example query.join_right(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_right(other, on, values, options) {\n    const opt = { ...options, left: false, right: true };\n    return this.join(other, on, values, opt);\n  }\n\n  /**\n   * Perform a full outer join on two tables. Rows in either the left or\n   * right table that do not match a row in the other will be preserved.\n   * This is a convenience method with fixed options for {@link QueryBuilder#join}.\n   * @param {string} other The names of the other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {Array|Object} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: true, right: true}.\n   * @return {QueryBuilder} A new builder with \"join_full\" verb appended.\n   * @example query.join_full(other, ['keyL', 'keyR'])\n   * @example query.join_full(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_full(other, on, values, options) {\n    const opt = { ...options, left: true, right: true };\n    return this.join(other, on, values, opt);\n  }\n\n  /**\n   * Produce the Cartesian cross product of two tables. The output table\n   * has one row for every pair of input table rows. Beware that outputs\n   * may be quite large, as the number of output rows is the product of\n   * the input row counts.\n   * This is a convenience method for {@link QueryBuilder#join} in which the\n   * join criteria is always true.\n   * @param {string} other The name of the other (right) table to join with.\n   * @param {Array|Object} [values] The columns to include in the output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join.\n   * @return {QueryBuilder} A new builder with \"cross\" verb appended.\n   * @example query.cross(other)\n   * @example query.cross(other, [['leftKey', 'leftVal'], ['rightVal']])\n   */\n  cross(other, values, options) {\n    return this.append(Verbs.cross(other, values, options));\n  }\n\n  /**\n   * Perform a semi-join, filtering the left table to only rows that\n   * match a row in the right table.\n   * @param {string} other The names of the other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @return {QueryBuilder} A new builder with \"semijoin\" verb appended.\n   * @example query.semijoin(other)\n   * @example query.semijoin(other, ['keyL', 'keyR'])\n   * @example query.semijoin(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  semijoin(other, on) {\n    return this.append(Verbs.semijoin(other, on));\n  }\n\n  /**\n   * Perform an anti-join, filtering the left table to only rows that\n   * do *not* match a row in the right table.\n   * @param {string} other The names of the other (right) table to join with.\n   * @param {Array|Function} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @return {QueryBuilder} A new builder with \"antijoin\" verb appended.\n   * @example query.antijoin(other)\n   * @example query.antijoin(other, ['keyL', 'keyR'])\n   * @example query.antijoin(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  antijoin(other, on) {\n    return this.append(Verbs.antijoin(other, on));\n  }\n\n  // -- Set Operations ------------------------------------------------------\n\n  /**\n   * Concatenate multiple tables into a single table, preserving all rows.\n   * This transformation mirrors the UNION_ALL operation in SQL.\n   * Only named columns in this table are included in the output.\n   * @see QueryBuilder#union\n   * @param  {...string} tables A list of table names to concatenate.\n   * @return {QueryBuilder} A new builder with \"concat\" verb appended.\n   * @example query.concat(other)\n   * @example query.concat(other1, other2)\n   * @example query.concat([other1, other2])\n   */\n  concat(...tables) {\n    return this.append(Verbs.concat(tables.flat()));\n  }\n\n  /**\n   * Union multiple tables into a single table, deduplicating all rows.\n   * This transformation mirrors the UNION operation in SQL. It is\n   * similar to {@link QueryBuilder#concat} but suppresses duplicate rows with\n   * values identical to another row.\n   * Only named columns in this table are included in the output.\n   * @see QueryBuilder#concat\n   * @param  {...string} tables A list of table names to union.\n   * @return {QueryBuilder} A new builder with \"union\" verb appended.\n   * @example query.union(other)\n   * @example query.union(other1, other2)\n   * @example query.union([other1, other2])\n   */\n  union(...tables) {\n    return this.append(Verbs.union(tables.flat()));\n  }\n\n  /**\n   * Intersect multiple tables, keeping only rows whose with identical\n   * values for all columns in all tables, and deduplicates the rows.\n   * This transformation is similar to a series of {@link QueryBuilder#semijoin}\n   * calls, but additionally suppresses duplicate rows.\n   * @see QueryBuilder#semijoin\n   * @param  {...string} tables A list of table names to intersect.\n   * @return {QueryBuilder} A new builder with \"intersect\" verb appended.\n   * @example query.intersect(other)\n   * @example query.intersect(other1, other2)\n   * @example query.intersect([other1, other2])\n   */\n  intersect(...tables) {\n    return this.append(Verbs.intersect(tables.flat()));\n  }\n\n  /**\n   * Compute the set difference with multiple tables, keeping only rows in\n   * this table that whose values do not occur in the other tables.\n   * This transformation is similar to a series of {@link QueryBuilder#antijoin}\n   * calls, but additionally suppresses duplicate rows.\n   * @see QueryBuilder#antijoin\n   * @param  {...string} tables A list of table names to difference.\n   * @return {QueryBuilder} A new builder with \"except\" verb appended.\n   * @example query.except(other)\n   * @example query.except(other1, other2)\n   * @example query.except([other1, other2])\n   */\n  except(...tables) {\n    return this.append(Verbs.except(tables.flat()));\n  }\n}","import ColumnTable from '../table/column-table';\nimport error from '../util/error';\n\n/**\n * Options for Apache Arrow import.\n * @typedef {Object} ArrowOptions\n * @property {string[]} [columns] Ordered list of column names to import.\n * @property {boolean} [unpack=false] Flag to unpack binary-encoded Arrow\n *  data to standard JavaScript values. Unpacking can incur an upfront time\n *  and memory cost to extract data to new arrays, but can speed up later\n *  query processing by enabling faster data access.\n */\n\n/**\n * Create a new table backed by an Apache Arrow table instance.\n * @param {Object} arrowTable An Apache Arrow data table.\n * @param {ArrowOptions} options Options for Arrow import.\n * @param {ColumnTable} table A new table containing the imported values.\n */\nexport default function(arrowTable, options = {}) {\n  const columns = {};\n\n  const names = options.columns || arrowTable.schema.fields.map(f => f.name);\n  const unpack = !!options.unpack;\n\n  names.forEach(name => {\n    const column = arrowTable.getColumn(name);\n    if (column == null) {\n      error(`Arrow column does not exist: ${JSON.stringify(name)}`);\n    }\n    columns[name] = unpack ? arrayFromArrow(column) : column;\n  });\n\n  return new ColumnTable(columns);\n}\n\nfunction arrayFromArrow(column) {\n  // if dictionary column, perform more efficient extraction\n  // if has null values, extract to standard array\n  // otherwise, let Arrow try to use copy-less subarray call\n  return column.dictionary ? arrayFromDictionary(column)\n    : column.nullCount > 0 ? [...column]\n    : column.toArray();\n}\n\nfunction arrayFromDictionary(column) {\n  // decode utf-8 only once per dictionary key\n  // use the last chunk in case the dictionary builds as it goes\n  const chunks = column.chunks;\n  const dict = chunks[chunks.length - 1].dictionary.toArray();\n  const array = new Array(column.length);\n\n  // populate array values\n  let i = -1;\n  for (const chunk of chunks) {\n    const { nullBitmap: nulls, data: { values, length: m } } = chunk;\n    if (nulls && nulls.length) {\n      for (let j = 0; j < m; ++j) {\n        // j >> 3 advances the byte every 8 bits;\n        // (1 << (j & 7) checks if the relevant bit is set in that byte\n        array[++i] = !(nulls[j >> 3] & (1 << (j & 7)))\n          ? null\n          : dict[values[j]];\n      }\n    } else {\n      for (let j = 0; j < m; ++j) {\n        array[++i] = dict[values[j]];\n      }\n    }\n  }\n\n  return array;\n}","import parseIsoDate from './parse-iso-date';\n\nexport default function(input) {\n  const value = input.trim();\n  let parsed;\n\n  return !value ? null\n    : value === 'true' ? true\n    : value === 'false' ? false\n    : value === 'NaN' ? NaN\n    : !isNaN(parsed = +value) ? parsed\n    : (parsed = parseIsoDate(value, d => new Date(d))) !== value ? parsed\n    : input;\n}","const EOL = {};\nconst EOF = {};\nconst QUOTE = 34;\nconst NEWLINE = 10;\nconst RETURN = 13;\n\n// Adapted from d3-dsv: https://github.com/d3/d3-dsv/blob/master/src/dsv.js\n// Copyright 2013-2016 Mike Bostock\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n// * Redistributions of source code must retain the above copyright notice, this\n//   list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n// * Neither the name of the author nor the names of contributors may be used to\n//   endorse or promote products derived from this software without specific prior\n//   written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nexport default function(text, delimCode, callback) {\n  let N = text.length,\n      I = 0, // current character index\n      n = 0, // current line number\n      t, // current token\n      eof = N <= 0, // current token followed by EOF?\n      eol = false; // current token followed by EOL?\n\n  // Strip the trailing newline.\n  if (text.charCodeAt(N - 1) === NEWLINE) --N;\n  if (text.charCodeAt(N - 1) === RETURN) --N;\n\n  function token() {\n    if (eof) return EOF;\n    if (eol) return eol = false, EOL;\n\n    // Unescape quotes.\n    const j = I;\n    let i, c;\n    if (text.charCodeAt(j) === QUOTE) {\n      while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n      if ((i = I) >= N) eof = true;\n      else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n      else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n      return text.slice(j + 1, i - 1).replace(/\"\"/g, '\"');\n    }\n\n    // Find next delimiter or newline.\n    while (I < N) {\n      if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n      else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n      else if (c !== delimCode) continue;\n      return text.slice(j, i);\n    }\n\n    // Return last token before EOF.\n    return eof = true, text.slice(j, N);\n  }\n\n  while ((t = token()) !== EOF) {\n    const row = [];\n    while (t !== EOL && t !== EOF) row.push(t), t = token();\n    if (callback(row, n++) == null) continue;\n  }\n}","import ColumnTable from '../table/column-table';\nimport autoType from '../util/auto-type';\nimport isFunction from '../util/is-function';\nimport parse from '../util/parse-dsv';\nimport repeat from '../util/repeat';\n\nconst DEFAULT_COLUMN_NAME = 'col';\n\n/**\n * Options for CSV parsing.\n * @typedef {Object} CSVParseOptions\n * @property {string} [delimiter=','] The delimiter between values.\n * @property {boolean} [autoType=true] Flag controlling automatic type inference.\n * @property {boolean} [header=true] Flag to specify presence of header row.\n *  If true, assumes the CSV contains a header row with column names.\n *  If false, indicates the CSV does not contain a header row, and the\n *  columns are given the names 'col1', 'col2', and so on.\n * @property {Object} [parse] Object of column parsing options.\n *  The object keys should be column names. The object values should be\n *  parsing functions to invoke to transform values upon input.\n */\n\n/**\n * Parse a comma-separated values (CSV) string into a table. Other\n * delimiters, such as tabs or pipes ('|'), can be specified using\n * the options argument. By default, automatic type inference is performed\n * for input values; string values that match the ISO standard\n * date format are parsed into JavaScript Date objects. To disable this\n * behavior, set the autoType option to false. To perform custom parsing\n * of input column values, use the parse option.\n * @param {string} text A string in a delimited-value format.\n * @param {CSVParseOptions} options The formatting options.\n * @param {ColumnTable} table A new table containing the parsed values.\n */\nexport default function(text, options = {}) {\n  const delimiter = options.delimiter == null ? ',' : options.delimiter;\n  const delim = (delimiter + '').charCodeAt(0);\n  const defaultParser = options.autoType !== false ? autoType : d => d;\n  const header = options.header !== false;\n  let names, values, parsers;\n\n  parse(text, delim, (array, index) => {\n    if (index === 0) {\n      const n = array.length;\n      values = repeat(n, () => []);\n      parsers = Array(n).fill(defaultParser);\n\n      if (header) {\n        const p = options.parse || {};\n        (names = array)\n          .forEach((_, i) => isFunction(p[_]) ? (parsers[i] = p[_]) : 0);\n        return;\n      } else {\n        names = repeat(n, i => `${DEFAULT_COLUMN_NAME}${i + 1}`);\n      }\n    }\n\n    const n = names.length;\n    for (let i = 0; i < n; ++i) {\n      values[i].push(parsers[i](array[i]));\n    }\n  });\n\n  const columns = {};\n  names.forEach((name, i) => columns[name] = values[i]);\n  return new ColumnTable(columns);\n}","import ColumnTable from '../table/column-table';\nimport parseIsoDate from '../util/parse-iso-date';\n\nfunction autoType(key, value) {\n  return typeof value === 'string'\n    ? parseIsoDate(value, d => new Date(d))\n    : value;\n}\n\n/**\n * Options for JSON parsing.\n * @typedef {Object} JSONParseOptions\n * @property {boolean} [autoType=true] Flag controlling automatic type inference.\n *  If set to false, automatic date parsing for input JSON strings is disabled.\n * @property {Object} [parse] Object of column parsing options.\n *  The object keys should be column names. The object values should be\n *  parsing functions to invoke to transform values upon input.\n */\n\n/**\n * Parse JavaScript Object Notation (JSON) data into a table. The expected\n * JSON format is an object with column names for keys and column value\n * arrays for values. By default string values that match the ISO standard\n * date format are parsed into JavaScript Date objects. To disable this\n * behavior, set the autoType option to false. To perform custom parsing\n * of input column values, use the parse option.\n * @param {string|Object} data A string in a JSON format, or a\n *  corresponding Object instance.\n * @param {JSONParseOptions} options The formatting options.\n * @param {ColumnTable} table A new table containing the parsed values.\n */\nexport default function(data, options = {}) {\n  if (typeof data === 'string') {\n    data = JSON.parse(\n      data,\n      options.autoType === false ? null : autoType\n    );\n  }\n\n  if (options.parse) {\n    for (const name in options.parse) {\n      data[name] = data[name].map(options.parse[name]);\n    }\n  }\n\n  return new ColumnTable(data);\n}","import { fromArrow, fromCSV, fromJSON } from 'arquero';\n\nfunction error(message) {\n  throw Error(message);\n}\n\nexport default function(type, url, options) {\n  switch (type) {\n    case 'csv':\n      return loadCSV(url, options);\n    case 'json':\n      return loadJSON(url, options);\n    case 'arrow':\n      return loadArrow(url, options);\n    default:\n      error(`Unrecognized file type: \"${type}\"`);\n  }\n}\n\nasync function loadCSV(url, options) {\n  const data = await fetch(url).then(res => res.text());\n  return fromCSV(data, options);\n}\n\nasync function loadJSON(url, options) {\n  const data = await fetch(url).then(res => res.text());\n  return fromJSON(data, options);\n}\n\nasync function loadArrow(url, options) {\n  if (typeof Arrow !== 'undefined') {\n    const buf = await fetch(url).then(res => res.arrayBuffer());\n    // eslint-disable-next-line no-undef\n    const table = Arrow.Table.from([new Uint8Array(buf)]);\n    return fromArrow(table, options);\n  } else {\n    error('Apache Arrow has not been imported.');\n  }\n}","import { from, queryFrom, seed as setSeed, table } from 'arquero';\nimport Database from './database';\nimport load from './load';\n\nexport async function handleMessage(request, response) {\n  const { method, params } = request;\n  if (handlers.has(method)) {\n    try {\n      const handler = handlers.get(method);\n      response.send(await handler(params));\n    } catch (err) {\n      response.error(err);\n    }\n  } else {\n    response.error(`Unknown method: ${method}`);\n  }\n}\n\nconst db = new Database();\n\nconst handlers = new Map()\n  .set('add',   onAdd)\n  .set('drop',  onDrop)\n  .set('fetch', onFetch)\n  .set('list',  onList)\n  .set('load',  onLoad)\n  .set('query', onQuery)\n  .set('seed',  onSeed);\n\nfunction insert(name, dt, append = false) {\n  if (append) {\n    db.append(name, dt);\n  } else {\n    db.add(name, dt);\n  }\n  return { type: 'table', table: name };\n}\n\nfunction transfer(dt, options) {\n  return { type: 'data', data: dt.toJSON(options) };\n}\n\nfunction onSeed({ seed }) {\n  setSeed(seed);\n  return { type: 'seed', seed };\n}\n\nfunction onList() {\n  return { type: 'list', list: db.list() };\n}\n\n// drop table from catalog\n// name: string\nfunction onDrop({ name }) {\n  return { type: 'table', name, drop: db.drop(name) };\n}\n\n// add table to catalog\n// name: string\n// type: enum(columns, rows)\n// append: boolean\n// data: any\nfunction onAdd({ name, type, append, data }) {\n  const dt = type === 'rows' ? from(data) : table(data);\n  return insert(name, dt, append);\n}\n\n// load table into catalog\n// name: string\n// type: enum(csv, json, arrow)\n// append: boolean\n// options: object\n//   arrow: { columns, unpack }\n//   csv: { delimiter, header, autoType, parse? }\n//   json: { autoType, parse? }\nasync function onLoad({ name, append, url, type, options }) {\n  const dt = await load(type, url, options);\n  return insert(name, dt, append);\n}\n\n// query table in catalog\n// name: string\n// query: serialized Query\n// as: string\nfunction onQuery({ query, as, options }) {\n  const dt = db.query(query.name, queryFrom(query));\n  return as ? insert(as, dt) : transfer(dt, options);\n}\n\n// fetch table data\n// name: string\n// columns: select-compatible\n// rows: array or boolean\n// type: enum(columns, rows)\nfunction onFetch({ name, options }) {\n  const dt = db.get(name);\n  return transfer(dt, options);\n}","export default class Database {\n  constructor() {\n    this._tables = new Map();\n  }\n\n  get(name) {\n    return this._tables.get(name);\n  }\n\n  set(name, table) {\n    this._tables.set(name, table);\n  }\n\n  list() {\n    return [...this._tables.keys()];\n  }\n\n  add(name, table) {\n    if (this._tables.has(name)) {\n      throw `Table already exists: \"${name}\"`;\n    }\n    this.set(name, table);\n  }\n\n  drop(name) {\n    return this._tables.delete(name);\n  }\n\n  append(name, table) {\n    this.set(name, this.get(name).concat(table));\n  }\n\n  query(name, query) {\n    return query.evaluate(\n      name ? this.get(name) : null,\n      name => this.get(name)\n    );\n  }\n}","import { ERROR, RESULT } from './constants';\nimport { handleMessage } from './handler';\n\nonmessage = async function(event) {\n  const request = event.data;\n  handleMessage(request, response(request));\n};\n\nconst response = req => {\n  const request = {\n    id: req.id,\n    method: req.method\n  };\n\n  return {\n    error(err) {\n      postMessage({\n        status: ERROR,\n        request,\n        error: err && err.message || String(err)\n      });\n    },\n    send(result) {\n      postMessage({\n        status: RESULT,\n        request,\n        result\n      });\n    }\n  };\n};","export const ERROR = 'error';\nexport const RESULT = 'result';"],"names":["message","Error","isFunction","value","reps","result","Array","i","fill","Object","prototype","toString","call","columns","table","names","columnNames","numRows","limit","Math","min","Infinity","formats","options","formatOpt","format","alignOpt","align","forEach","name","auto","scan","count","nulls","dates","dutcs","nums","digits","type","isDate","d","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","s","p","indexOf","e","l","length","max","utc","maxdigits","inferFormat","columnName","column","fn","row","get","values","ctx","n","r","data","stop","cell","Table","[object Object]","nrows","filter","groups","order","params","this","_names","freeze","_total","_nrows","_data","_filter","_group","_order","_params","Symbol","toStringTag","nr","numCols","isFiltered","totalRows","isGrouped","size","isOrdered","indices","slice","index","error","iterator","show","msg","obj","objects","console","log","_index","Uint32Array","compare","sort","a","b","_partitions","keys","part","repeat","push","next","arguments","as","rollup","__dedupe","flat","__derive","criteria","__filter","__groupby","__orderby","reducer","__reduce","__rollup","__sample","__select","__ungroup","__unorder","__fold","__pivot","__spread","__unroll","other","on","__lookup","__join","opt","left","right","__join_filter","anti","tables","__concat","__union","__intersect","__except","Column","isObject","isString","raise","iter","Map","fromKeyValuePairs","entries","isRegExp","addCol","first","done","cols","map","addRow","fromValues","vals","key","val","width","char","len","join","from","pad2","v","formatISO","year","month","date","hours","sec","ms","short","suffix","pad","formatYear","formatDate","isNaN","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","formatUTCDate","getUTCFullYear","getUTCMonth","getUTCDate","Int8Array","JSON","stringify","k","isTypedArray","maxlen","abs","pow","toExponential","toFixed","output","style","mapObject","styles","idx","tag","alignValue","css","text","formatValue","replace","defaultFormatter","list","args","code","Function","_","unroll","ColumnTable","columnsFrom","group","super","f","and","undefined","rows","Int32Array","sum","reduce","_rows","_size","_keys","regroup","tuples","create","rowObjectBuilder","ncols","prev","curr","constructor","ArrayType","reindex","delim","delimiter","reFormat","RegExp","test","toCSV","toHTML","formatter","toJSON","escape","toMarkdown","reservedWords","3","5","6","strict","strictBind","ecma5AndLessKeywords","keywords","5module","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","set","pos","isIdentifierStart","astral","String","fromCharCode","isIdentifierChar","TokenType","label","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","prec","keywords$1","kw","types","num","regexp","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","questionDot","arrow","template","invalidTemplate","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","coalesce","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","source","isNewLine","ecma2019String","nonASCIIwhitespace","skipWhiteSpace","ref","hasOwnProperty","has","propName","isArray","wordsRegexp","words","Position","line","col","offset","SourceLocation","start","end","sourceFile","getLineInfo","input","cur","lastIndex","match","exec","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","warnedAboutEcmaVersion","getOptions","opts","warn","tokens","token","array","block","startLoc","endLoc","comment","loc","range","pushComment","functionFlags","async","generator","Parser","startPos","reserved","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","lineStart","lastIndexOf","curLine","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","yieldPos","awaitPos","awaitIdentPos","labels","undefinedExports","skipLineComment","scopeStack","enterScope","regexpState","prototypeAccessors","inFunction","configurable","inGenerator","inAsync","allowSuper","allowDirectSuper","treatFunctionsAsVar","inNonArrowFunction","parse","node","startNode","nextToken","parseTopLevel","currentVarScope","flags","currentThisScope","treatFunctionsAsVarInScope","currentScope","extend","plugins","cls","parseExpressionAt","parser","parseExpression","tokenizer","defineProperties","pp","literal","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","doubleProto","spaceAfter","charAt","eat","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","expr","expression","pp$1","exports","body","stmt","parseStatement","adaptDirectivePrologue","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseExpressionStatement","parseImport","parseExport","maybeName","parseLabeledStatement","isBreak","parseIdent","lab","pop","parseParenExpression","awaitAt","parseFor","init$1","parseVar","declarations","await","parseForIn","init","toAssignable","checkLValPattern","isAsync","declarationPosition","parseFunction","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","exitScope","empty","handler","clause","param","parseBindingAtom","simple","finalizer","object","i$1","label$1","statementStart","createNewLexicalScope","exitStrict","update","isForIn","id","parseMaybeAssign","isFor","decl","parseVarId","statement","allowExpressionBody","initFunction","checkLValSimple","oldYieldPos","oldAwaitPos","oldAwaitIdentPos","parseFunctionParams","parseFunctionBody","parseBindingList","isStatement","oldStrict","parseClassId","parseClassSuper","classBody","hadConstructor","element","parseClassElement","superClass","constructorAllowsSuper","this$1","method","tryContextual","noLineBreak","computed","startNodeAt","static","isGenerator","parsePropertyName","allowsDirectSuper","parseClassMethod","parseMethod","parseExprSubscripts","exported","checkExport","parseExprAtom","fNode","declaration","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","spec","checkUnreserved","local","checkLocalExport","checkPatternExport","pat","properties","prop","list$1","elements","elt","decls","nodes","parseImportSpecifiers","node$1","node$2","imported","statements","isDirectiveCandidate","directive","raw","pp$2","isBinding","toAssignableList","operator","exprList","last","parseSpread","parseRestBinding","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","bindingType","checkClashes","isBind","declareName","checkLValInnerPattern","pp$3","checkPropClash","propHash","shorthand","proto","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","oldTrailingComma","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","parseAwait","parseSubscripts","base","noCalls","maybeAsyncArrow","optionalChained","parseSubscript","optional","chainNode","optionalSupported","property","parseExprList","parseArrowExpression","callee","quasi","parseTemplate","isTagged","readRegexp","canBeArrow","parseLiteral","regex","pattern","parseParenAndDistinguishExpression","parseNew","parseExprImport","meta","parseDynamicImport","parseImportMeta","errorPos","bigint","spreadStart","innerStartPos","innerStartLoc","lastIsComma","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","item","empty$1","isImport","parseTemplateElement","cooked","tail","curElt","quasis","isAsyncProp","isPattern","parseProperty","parsePropertyValue","copyNode","paramCount","isArrowFunction","isMethod","isExpression","useStrict","checkParams","nonSimple","isSimpleParamList","oldLabels","allowDuplicates","nameHash","liberal","delegate","pp$4","err","SyntaxError","raisedAt","pp$5","Scope","var","lexical","functions","scope","redeclared","scope$2","scope$3","SCOPE_TOP","Node","pp$6","newNode","TokContext","isExpr","preserveSpace","override","types$1","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","pp$7","braceIsBlock","prevType","parent","curContext","inGeneratorContext","out","statementParens","allowed","ecma9BinaryProperties","ecma10BinaryProperties","unicodeBinaryProperties","9","10","11","12","ecma11BinaryProperties","unicodeGeneralCategoryValues","ecma9ScriptValues","ecma10ScriptValues","ecma11ScriptValues","unicodeScriptValues","buildUnicodeData","binary","nonBinary","General_Category","Script","Script_Extensions","gc","sc","scx","pp$8","RegExpValidationState","validFlags","unicodeProperties","switchU","switchN","lastIntValue","lastStringValue","lastAssertionIsQuantifiable","numCapturingParens","maxBackReference","groupNames","backReferenceNames","codePointToString","ch","isSyntaxCharacter","isControlLetter","isUnicodePropertyNameCharacter","isUnicodePropertyValueCharacter","isDecimalDigit","isHexDigit","hexToInt","isOctalDigit","reset","unicode","at","forceU","c","nextIndex","current","lookahead","advance","validateRegExpFlags","state","flag","validateRegExpPattern","regexp_pattern","regexp_disjunction","regexp_alternative","regexp_eatQuantifier","regexp_eatTerm","regexp_eatAssertion","regexp_eatAtom","regexp_eatExtendedAtom","lookbehind","noError","regexp_eatQuantifierPrefix","regexp_eatBracedQuantifier","regexp_eatDecimalDigits","regexp_eatPatternCharacters","regexp_eatReverseSolidusAtomEscape","regexp_eatCharacterClass","regexp_eatUncapturingGroup","regexp_eatCapturingGroup","regexp_eatAtomEscape","regexp_groupSpecifier","regexp_eatInvalidBracedQuantifier","regexp_eatExtendedPatternCharacter","regexp_eatSyntaxCharacter","regexp_eatGroupName","regexp_eatRegExpIdentifierName","regexp_eatRegExpIdentifierStart","regexp_eatRegExpIdentifierPart","regexp_eatRegExpUnicodeEscapeSequence","isRegExpIdentifierStart","isRegExpIdentifierPart","regexp_eatBackReference","regexp_eatCharacterClassEscape","regexp_eatCharacterEscape","regexp_eatKGroupName","regexp_eatDecimalEscape","regexp_eatControlEscape","regexp_eatCControlLetter","regexp_eatZero","regexp_eatHexEscapeSequence","regexp_eatLegacyOctalEscapeSequence","regexp_eatIdentityEscape","regexp_eatControlLetter","regexp_eatFixedHexDigits","lead","leadSurrogateEnd","trail","regexp_eatHexDigits","isCharacterClassEscape","regexp_eatUnicodePropertyValueExpression","regexp_eatUnicodePropertyName","regexp_eatUnicodePropertyValue","regexp_validateUnicodePropertyNameAndValue","regexp_eatLoneUnicodePropertyNameOrValue","nameOrValue","regexp_validateUnicodePropertyNameOrValue","regexp_classRanges","regexp_eatClassAtom","regexp_eatClassEscape","ch$1","regexp_eatClassControlLetter","regexp_eatOctalDigit","n1","n2","Token","pp$9","stringToBigInt","str","BigInt","codePointToString$1","ignoreEscapeSequenceInKeyword","getToken","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","loop","readToken_dot","readNumber","next2","readToken_slash","finishOp","readToken_mult_modulo_exp","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readToken_question","readRadixNumber","readString","escaped","inClass","flagsStart","readWord1","readInt","radix","maybeLegacyOctalNumericLiteral","allowSeparators","isLegacyOctalNumericLiteral","total","lastCode","startsWithDot","octal","val$1","parseInt","parseFloat","readCodePoint","codePos","readHexChar","invalidStringToken","quote","chunkStart","readEscapedChar","INVALID_TEMPLATE_ESCAPE_ERROR","inTemplateElement","readTmplToken","readInvalidTemplateToken","position","inTemplate","octalStr","substr","word","escStart","esc","acorn","version","tokTypes","keywordTypes","tokContexts","Identifier","Literal","MemberExpression","Parameter","walk","visitors","visit","walker","walkers","unary","ternary","func","TemplateLiteral","CallExpression","NewExpression","ArrayExpression","AssignmentExpression","AwaitExpression","BinaryExpression","LogicalExpression","UnaryExpression","UpdateExpression","ConditionalExpression","ObjectExpression","Property","ArrowFunctionExpression","FunctionExpression","FunctionDeclaration","VariableDeclaration","VariableDeclarator","SpreadElement","BlockStatement","ExpressionStatement","IfStatement","ForStatement","WhileStatement","DoWhileStatement","SwitchStatement","SwitchCase","ReturnStatement","Program","strip","stripMember","Constant","OpLookup","o","t","ObjectPattern","BreakStatement","initOp","noop","add","rem","any","valid","invalid","distinct","counts","delete","unique","req","mode","product","Number","prod","stream","mean","mean_d","average","variance","dev","variancep","stdev","sqrt","stdevp","NaN","quantile","median","covariance","cov","mean_x","mean_y","dev_x","dev_y","x","y","dx","dy","dy2","covariancep","corr","bins","maxbins","nice","minstep","div","logb","LN10","level","ceil","span","step","round","precision","eps","floor","rank","w","peer","cume_dist","cume","row_number","avg_rank","j","dense_rank","drank","percent_rank","ntile","lag","defaultValue","first_value","i0","last_value","i1","nth_value","nth","isValid","concat","includes","seq","indexof","lastindexof","pluck","reverse","iso_re","fix_tz","Date","m","msDay","msWeek","t0","t1","setTime","parseIsoDate","format_date","shorten","format_utcdate","timestamp","quarter","dayofweek","getDay","minutes","seconds","milliseconds","utcyear","utcquarter","utcmonth","utcdate","utcdayofweek","getUTCDay","utchours","utcminutes","utcseconds","utcmilliseconds","datetime","now","dayofyear","setHours","setMonth","setDate","tz","getTimezoneOffset","week","firstday","utcdatetime","UTC","utcdayofyear","setUTCHours","utcweek","setUTCDate","setUTCMonth","equal","getPrototypeOf","arrayEqual","keysA","keysB","deepEqual","random","seed","isFinite","lcg","is_nan","is_finite","cbrt","clz32","exp","expm1","fround","log10","log1p","log2","sign","trunc","degrees","rad","PI","radians","deg","acos","acosh","asin","asinh","atan","atan2","atanh","cos","cosh","sin","sinh","tan","tanh","bin","sequence","math","parse_date","parse_float","parse_int","endswith","search","endsWith","normalize","form","padend","padEnd","padstart","padStart","upper","toUpperCase","lower","toLowerCase","replacement","substring","separator","startswith","startsWith","trim","isAggregate","aggregateFunctions","isWindow","windowFunctions","getAggregate","getWindow","getFunction","compile","expr2","E","LN2","LOG2E","LOG10E","SQRT1_2","SQRT2","PARSER_OPT","is","exprs","generate","codegen","compiler","getParams","fields","opcall","fieldId","opId","compileExpr","ast","Default","clean","ops","getTableParams","functionName","parseError","handleIdentifier","paramsRef","updateParameterNode","columnRef","updateColumnNode","constants","updateConstantNode","ForOfStatement","ForInStatement","def","aggregate","window","arg","opVisitors","idxFields","idxParams","field","parseOperator","tuple","tuple1","tuple2","spliceMember","$param","props","fieldRef","root","Set","isFunctionExpression","setc","setp","parseRef","refName","alias","Expr","ExprList","ExprNumber","ExprObject","JoinKeys","JoinValues","Options","OrderbyKeys","SelectionList","TableRef","TableRefList","ValueList","_start","_values","_sorted","ascending","v0","oplist","expand","FieldReducer","Field1Reducer","Field2Reducer","outputs","_outputs","_op","_fields","_add","_rem","value1","value2","aggregateGet","aggrs","reducers","aggr","cells","reduceGroups","writeToObject","reduceFlat","fieldReducer","groupInit","groupOutput","getter","lo","hi","mid","bisect","bisector","results","states","frame","frameValue","peers","peersValue","aggOps","winOps","windowOp","adjust","isPeer","numOps","numAgg","evaluate","partition","f0","f1","p0","p1","windowState","windowStates","nstate","partitions","partitionIndex","comparator","windowPeers","toArray","isWindowed","segmentOps","ONE","BitSet","_bits","bits","bitset","drop","priors","copies","icol","copy","arrays","arr","Wrapper","wrap","resolve","sel","isNumber","decorate","toObject","all","marshal","preparse","list1","list2","tableL","tableR","predicate","dataL","idxL","nL","hitL","dataR","idxR","nR","hitR","getters","emit","emitter","rowL","rowR","keyL","keyR","tableScan","keyScan","hitScan","tableHash","keyHash","hitHash","dataHash","lut","emitScan","rowScan","dataScan","rowHash","objectKey","keyFunction","intersect","OPT_L","OPT_R","rekey","keyColumn","ksep","keySeparator","kcol","ungroup","pivotKeys","vsep","valueSeparator","namefn","writeToArrays","grouped","buffer","weight","sampleRW","sampleRU","sampleNW","sampleNU","Float64Array","Float32Array","spread","createGroups","getKey","_compare","u","lt","gt","getTable","catalog","query","isSelection","not","fromObject","verbs","Query","columnIndex","selection","includePeers","rolling","desc","fromExprObject","parseJoinKeys","parseJoinValues","others","trow","uniqueName","groupby","derive","select","reify","_derive","antijoin","dedupe","bv","_fold","semijoin","isect","optParse","parseKey","_join_hash","_join_loop","vL","vR","vJ","parseValue","rename","parseValues","_join_filter","kl","kr","lrow","rrow","_lookup","_pivot","_rollup","parts","samples","sz","buf","subarray","sample","_sample","parseSize","parseWeight","_select","_spread","_unroll","_groupby","_orderby","opA","opB","Methods","astExpr","astExprList","astExprObject","astSelectionItem","propTypes","astOptions","astColumn","astColumnIndex","astParse","astSelection","astTableRef","toAST","Verb","verb","schema","joinValues","orderbyKeys","default","Verbs","createVerb","orderby","unorder","fold","pivot","lookup","cross","union","except","_verbs","_table","tableName","serialize","QueryBuilder","append","arrowTable","unpack","getColumn","dictionary","chunks","dict","chunk","nullBitmap","arrayFromDictionary","nullCount","arrayFromArrow","parsed","EOL","EOF","defaultParser","autoType","header","parsers","delimCode","callback","N","I","eol","url","fromCSV","fetch","then","res","loadCSV","fromJSON","loadJSON","Arrow","arrayBuffer","fromArrow","Uint8Array","loadArrow","db","_tables","handlers","dt","insert","transfer","load","queryFrom","setSeed","onmessage","event","request","response","send","handleMessage","postMessage","status"],"mappings":"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"}